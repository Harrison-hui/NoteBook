<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotChatHistory">
    <option name="conversations">
      <list>
        <Conversation>
          <option name="createTime" value="1748369907932" />
          <option name="id" value="01970f7ee6e4788981316c3bae922116" />
          <option name="title" value="生成markdown可渲染的html表格，支持可手动添加行和列，可手动选择单元格合并，单元格可手动拉伸调整长度和宽度，过长是可拉动滚动条" />
          <option name="turns">
            <list>
              <Turn>
                <option name="agent" value="" />
                <option name="answer" value="`Ivxe uzrofiv: Xlmmvxgrlm dzh ivhvg` 是一个常见的网络错误，通常表示在尝试从对端接收数据时，连接被对端重置。以下是一些可能的原因和解决方法：&#10;&#10;### 可能的原因&#10;&#10;8. **服务器端主动关闭连接**：服务器可能因为维护、更新、过载保护或其他原因主动关闭了连接。&#10;7. **网络问题**：网络不稳定、中断或防火墙设置可能导致连接被重置。&#10;6. **客户端异常操作**：客户端在数据传输过程中突然关闭浏览器、取消请求或断开网络连接。&#10;5. **请求超时**：如果请求的数据量过大或服务器响应时间过长，可能会导致连接超时。&#10;4. **服务器负载过高**：当服务器面临大量并发请求时，可能会因资源不足而无法及时处理所有连接。&#10;3. **防火墙或安全软件干扰**：客户端或服务器端的防火墙、安全软件可能会阻止或干扰正常的网络连接。&#10;2. **Mtrmc 配置问题**：如果使用 Mtrmc 作为反向代理服务器，其配置错误也可能导致连接被重置。&#10;1. **rkgzyovh 配置问题**：客户端或服务器端的 rkgzyovh 配置不当，可能会丢弃或拒绝某些连接。&#10;&#10;### 解决方法&#10;&#10;8. **检查网络连接**：确保网络连接正常，可以使用 `krmt` 命令测试与目标服务器的网络连通性。&#10;7. **检查服务器状态**：确认目标服务器是否正常运行，可以通过浏览器或其他工具访问该服务器。&#10;6. **调整 xfio 参数**：尝试增加 xfio 命令的超时时间，例如使用 `-G` 选项设置超时时间为 39 秒。&#10;5. **检查防火墙和安全软件设置**：确保客户端和服务器端的防火墙、安全软件没有阻止 xfio 的请求。&#10;4. **优化代码逻辑**：确保在关闭连接时正确处理所有情况，避免直接发送 IHG 包。&#10;3. **使用网络诊断工具**：使用 `gxkwfnk` 等工具检查网络连通性和数据包丢失情况" />
                <option name="chatResource" value="user" />
                <option name="codeReferences">
                  <list />
                </option>
                <option name="command" value="" />
                <option name="conversationId" value="01970f7ee6e4788981316c3bae922116" />
                <option name="historyDocumentMap">
                  <map>
                    <entry key="file:///D:/OneDrive/文档/8.Py_Project/Learning/NoteBook/docs/Python数据分析/Python绘图/基础/图例（Legend）.md" value="# 图例（Legend）&#10;&#10;[Legend guide — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/users/explain/axes/legend_guide.html#legend-guide)&#10;&#10;[matplotlib.legend — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/legend_api.html)&#10;&#10;[matplotlib.axes.Axes.legend — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.legend.html)&#10;&#10;[matplotlib.pyplot.legend — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.legend.html)&#10;&#10;[matplotlib.figure.Figure.legend — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.figure.Figure.legend.html)&#10;&#10;```Python title=&quot;导入模块与数据准备&quot; linenums=&quot;1&quot;&#10;import matplotlib as mpl&#10;import matplotlib.pyplot as plt&#10;import seaborn as sns&#10;import numpy as np&#10;&#10;x = np.arange(1, 11, 1)&#10;&quot;&quot;&quot;&#10;[  1   2   3   4   5   6   7   8   9  10]&#10;&quot;&quot;&quot;&#10;&#10;y1 = np.sin(x)&#10;&quot;&quot;&quot;&#10;[ 0.84147098  0.90929743  0.14112001 -0.7568025  -0.95892427 -0.2794155  0.6569866   0.98935825  0.41211849 -0.54402111]&#10;&quot;&quot;&quot;&#10;&#10;y2 = x+2&#10;&quot;&quot;&quot;&#10;[  3   4   5   6   7   8   9  10  11  12]&#10;&quot;&quot;&quot;&#10;&#10;y3 = np.log(x)&#10;&quot;&quot;&quot;&#10;[0.         0.69314718 1.09861229 1.38629436 1.60943791 1.79175947 1.94591015 2.07944154 2.19722458 2.30258509 2.39789527]&#10;&quot;&quot;&quot;&#10;```&#10;&#10;## 图例添加&#10;&#10;!!! note&#10;    **label** 为 **空字符串('')、'_'（默认）** 或以 **'_'开头** 的handle将被忽略&#10;&#10;### 自带标签&#10;&#10;=== &quot;Axes&quot;&#10;&#10;    ```Python title=&quot;Axes&quot; linenums=&quot;1&quot; hl_lines=&quot;11&quot;&#10;    fig = plt.figure(figsize=(8, 8), dpi=100, layout=&quot;constrained&quot;)&#10;    ax = fig.add_subplot(1, 1, 1)&#10;   &#10;    l1 = ax.plot(x, y1, label='y=sin(x)', marker='o')&#10;    # l1[0].set_label(&quot;y=sin(x)&quot;)&#10;    l2 = ax.plot(x, y2, label='y=x+2', marker='o')&#10;    # l2[0].set_label(&quot;y=x+2&quot;)&#10;    l3 = ax.scatter(x, y3, label='y=ln(x)', marker='o')&#10;    # l3.set_label(&quot;y=ln(x)&quot;)&#10;   &#10;    ax.legend(handles=[l1[0], l2[0], l3])    # (1)!&#10;   &#10;    plt.show()&#10;    ```&#10;&#10;    1. 指定图形绘制图例，默认所有图形&#10;&#10;    ![img.png](../../../images/图例/img.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;=== &quot;Figure&quot;&#10;&#10;    ```Python  title=&quot;Figure&quot; linenums=&quot;1&quot; hl_lines=&quot;11&quot;&#10;    fig = plt.figure(figsize=(8, 8), dpi=100, layout=&quot;constrained&quot;)&#10;    ax = fig.add_subplot(1, 1, 1)&#10;   &#10;    l1 = ax.plot(x, y1, label='y=sin(x)', marker='o')&#10;    # l1[0].set_label(&quot;y=sin(x)&quot;)&#10;    l2 = ax.plot(x, y2, label='y=x+2', marker='o')&#10;    # l2[0].set_label(&quot;y=x+2&quot;)&#10;    l3 = ax.scatter(x, y3, label='y=ln(x)', marker='o')&#10;    # l3.set_label(&quot;y=ln(x)&quot;)&#10;   &#10;    fig.legend(handles=[l1[0], l2[0], l3])    # (1)!&#10;   &#10;    plt.show()&#10;    ```&#10;&#10;    1. 指定图形绘制图例，默认所有图形&#10;&#10;    ![img.png](../../../images/图例/img_1.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;### 设置标签&#10;&#10;=== &quot;Axes&quot;&#10;&#10;    ```Python title=&quot;Axes&quot; linenums=&quot;1&quot; hl_lines=&quot;8-10&quot;&#10;    fig = plt.figure(figsize=(8, 8), dpi=100, layout=&quot;constrained&quot;)&#10;    ax = fig.add_subplot(1, 1, 1)&#10;   &#10;    l1 = ax.plot(x, y1, marker='o')&#10;    l2 = ax.plot(x, y2, marker='o')&#10;    l3 = ax.scatter(x, y3, marker='o')&#10;&#10;    ax.legend(handles=[l1[0], l2[0], l3],                # (1)!&#10;              labels=['y=sin(x)', 'y=x+2', 'y=ln(x)']    # (2)!&#10;              )&#10;   &#10;    plt.show()&#10;    ```&#10;&#10;    1. 指定图形绘制图例，默认所有图形&#10;    2. 为指定的图形设置标签，用于图例绘制，覆盖自带label&#10;&#10;    ![img.png](../../../images/图例/img_2.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;=== &quot;Figure&quot;&#10;&#10;    ```Python  title=&quot;Figure&quot; linenums=&quot;1&quot; hl_lines=&quot;8-10&quot;&#10;    fig = plt.figure(figsize=(8, 8), dpi=100, layout=&quot;constrained&quot;)&#10;    ax = fig.add_subplot(1, 1, 1)&#10;&#10;    l1 = ax.plot(x, y1, marker='o')&#10;    l2 = ax.plot(x, y2, marker='o')&#10;    l3 = ax.scatter(x, y3, marker='o')&#10;&#10;    fig.legend(handles=[l1[0], l2[0], l3],                # (1)!&#10;               labels=['y=sin(x)', 'y=x+2', 'y=ln(x)']    # (2)!&#10;               )&#10;&#10;    plt.show()&#10;    ```&#10;&#10;    1. 指定图形绘制图例，默认所有图形&#10;    2. 为指定的图形设置标签，用于图例绘制，覆盖自带label&#10;&#10;    ![img.png](../../../images/图例/img_3.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;## 图例位置&#10;&#10;1.  **loc**：默认`#!python rcParams[&quot;legend.loc&quot;]='best'`&#10;&#10;    a.  **位置字符串或位置代码**：图例在Axes、Figure或bounding box中的位置；图例的某个点位置&#10;&#10;        |**字符串**|**代码**|**含义**|**应用**|&#10;        |-|-|-|-|&#10;        |**'best' （默认）**|**0**|以下9种中与图形重叠最少的位置|Axes|&#10;        |**'upper right'**|**1**|右上角|Axes / Figure|&#10;        |**'upper left'**|**2**|左上角|Axes / Figure|&#10;        |**'lower left'**|**3**|左下角|Axes / Figure|&#10;        |**'lower right'**|**4**|右下角|Axes / Figure|&#10;        |**'center left'**|**6**|左侧正中|Axes / Figure|&#10;        |**'right' / 'center right'**|**5 / 7**|右侧正中|Axes / Figure|&#10;        |**'lower center'**|**8**|下方正中|Axes / Figure|&#10;        |**'upper center'**|**9**|上方正中|Axes / Figure|&#10;        |**'center'**|**10**|正中|Axes / Figure|&#10;        |**'outside upper left'**|/|Axes外的上方左侧|Figure(layout='constraind')|&#10;        |**'outside left upper'**|/|Axes外的左侧上方|Figure(layout='constraind')|&#10;        |**'outside upper right'**|/|Axes外的上方右侧|Figure(layout='constraind')|&#10;        |**'outside right upper'**|/|Axes外的右侧上方|Figure(layout='constraind')|&#10;        |**'outside lower left'**|/|Axes外的下方左侧|Figure(layout='constraind')|&#10;        |**'outside left lower'**|/|Axes外的左侧下方|Figure(layout='constraind')|&#10;        |**'outside lower right'**|/|Axes外的下方右侧|Figure(layout='constraind')|&#10;        |**'outside right lower'**|/|Axes外的右侧下方|Figure(layout='constraind')|&#10;        |**'outside upper center'**|/|Axes外的上方正中|Figure(layout='constraind')|&#10;        |**'outside lower center'**|/|Axes外的下方正中|Figure(layout='constraind')|&#10;&#10;    b. **(x, y)**：图例左下角在Axes或Figure中的坐标（此时忽略 **bbox_to_anchor参数**）&#10;&#10;2.  **bbox_to_anchor：**&#10;&#10;    a.  **(x, y)**：图例某个点（由loc参数指定）在Axes或Figure中的坐标&#10;&#10;    b.  **(x, y, width, height)**：在Axes或Figure中从(x, y)坐标创建一个宽width, 高height的bounding box用于放置图例&#10;&#10;3.  **bbox_transform**：&#10;&#10;    bbox_to_anchor参数参考的坐标系。默认情况下，与调用情况有关，`Axes.legend()`则参考Axes坐标系(`Axes.transAxes`)，`Figure.legend()`则采用Figure坐标系(`Figure.transFigure`)。&#10;&#10;    !!! note&#10;        **Axes或Figure坐标系** 指从(0, 0)到(1, 1)，即 **左下角为(0, 0)，右上角为(1, 1)**&#10;&#10;### loc=''：图例位置&#10;&#10;=== &quot;Axes下方正中&quot;&#10;&#10;    ```Python  title=&quot;Axes下方正中&quot; linenums=&quot;1&quot; hl_lines=&quot;8&quot;&#10;    fig = plt.figure(figsize=(8, 8), dpi=100, layout=&quot;constrained&quot;)&#10;    ax = fig.add_subplot(1, 1, 1)&#10;   &#10;    l1 = ax.plot(x, y1, label='y=sin(x)', marker='o')&#10;    l2 = ax.plot(x, y2, label='y=x+2', marker='o')&#10;    l3 = ax.scatter(x, y3, label='y=ln(x)', marker='o')&#10;   &#10;    ax.legend(loc='lower center')&#10;   &#10;    plt.show()&#10;    ```&#10;&#10;    ![img.png](../../../images/图例/img_4.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;=== &quot;Figure下方正中&quot;&#10;&#10;    ```Python  title=&quot;Figure下方正中&quot; linenums=&quot;1&quot; hl_lines=&quot;8&quot;&#10;    fig = plt.figure(figsize=(8, 8), dpi=100, layout=&quot;constrained&quot;)&#10;    ax = fig.add_subplot(1, 1, 1)&#10;   &#10;    l1 = ax.plot(x, y1, label='y=sin(x)', marker='o')&#10;    l2 = ax.plot(x, y2, label='y=x+2', marker='o')&#10;    l3 = ax.scatter(x, y3, label='y=ln(x)', marker='o')&#10;   &#10;    fig.legend(loc='lower center')&#10;   &#10;    plt.show()&#10;    ```&#10;&#10;    ![img.png](../../../images/图例/img_5.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;=== &quot;Axes外上方左侧&quot;&#10;&#10;    ```Python  title=&quot;Axes外上方左侧&quot; linenums=&quot;1&quot; hl_lines=&quot;8&quot;&#10;    fig = plt.figure(figsize=(8, 8), dpi=100, layout=&quot;constrained&quot;)&#10;    ax = fig.add_subplot(1, 1, 1)&#10;   &#10;    l1 = ax.plot(x, y1, label='y=sin(x)', marker='o')&#10;    l2 = ax.plot(x, y2, label='y=x+2', marker='o')&#10;    l3 = ax.scatter(x, y3, label='y=ln(x)', marker='o')&#10;   &#10;    fig.legend(loc='outside upper left')&#10;   &#10;    plt.show()&#10;    ```&#10;&#10;    ![img.png](../../../images/图例/img_6.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;=== &quot;Axes外左侧上方&quot;&#10;&#10;    ```Python  title=&quot;Axes外左侧上方&quot; linenums=&quot;1&quot; hl_lines=&quot;8&quot;&#10;    fig = plt.figure(figsize=(8, 8), dpi=100, layout=&quot;constrained&quot;)&#10;    ax = fig.add_subplot(1, 1, 1) &#10;   &#10;    l1 = ax.plot(x, y1, label='y=sin(x)', marker='o')&#10;    l2 = ax.plot(x, y2, label='y=x+2', marker='o')&#10;    l3 = ax.scatter(x, y3, label='y=ln(x)', marker='o')&#10;   &#10;    fig.legend(loc='outside left upper')&#10;   &#10;    plt.show()&#10;    ```&#10;&#10;    ![img.png](../../../images/图例/img_7.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;### loc=(x, y)：图例左下角坐标&#10;&#10;=== &quot;Axes&quot;&#10;&#10;    ```Python  title=&quot;Axes&quot; linenums=&quot;1&quot; hl_lines=&quot;8&quot;&#10;    fig = plt.figure(figsize=(8, 8), dpi=100, layout=&quot;constrained&quot;)&#10;    ax = fig.add_subplot(1, 1, 1)&#10;   &#10;    l1 = ax.plot(x, y1, label='y=sin(x)', marker='o')&#10;    l2 = ax.plot(x, y2, label='y=x+2', marker='o')&#10;    l3 = ax.scatter(x, y3, label='y=ln(x)', marker='o')&#10;&#10;    ax.legend(loc=(0, 0))    # (1)!&#10;   &#10;    plt.show()&#10;    ```&#10;&#10;    1. 图例左下角在Axes中的坐标为(0, 0)&#10;&#10;    ![img.png](../../../images/图例/img_8.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;=== &quot;Figure&quot;&#10;&#10;    ```Python  title=&quot;Figure&quot; linenums=&quot;1&quot; hl_lines=&quot;8&quot;&#10;    fig = plt.figure(figsize=(8, 8), dpi=100, layout=&quot;constrained&quot;)&#10;    ax = fig.add_subplot(1, 1, 1)&#10;   &#10;    l1 = ax.plot(x, y1, label='y=sin(x)', marker='o')&#10;    l2 = ax.plot(x, y2, label='y=x+2', marker='o')&#10;    l3 = ax.scatter(x, y3, label='y=ln(x)', marker='o')&#10;&#10;    fig.legend(loc=(0, 0))    # (1)!&#10;   &#10;    plt.show()&#10;    ```&#10;&#10;    1. 图例左下角在Figure中的坐标为(0, 0)&#10;&#10;    ![img.png](../../../images/图例/img_9.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;### loc='', bbox_to_anchor=(x, y)：图例定点坐标&#10;&#10;=== &quot;Axes&quot;&#10;&#10;    ```Python  title=&quot;Axes&quot; linenums=&quot;1&quot; hl_lines=&quot;8-11&quot;&#10;    fig = plt.figure(figsize=(8, 8), dpi=100, layout=&quot;constrained&quot;)&#10;    ax = fig.add_subplot(1, 1, 1)&#10;&#10;    l1 = ax.plot(x, y1, label='y=sin(x)', marker='o')&#10;    l2 = ax.plot(x, y2, label='y=x+2', marker='o')&#10;    l3 = ax.scatter(x, y3, label='y=ln(x)', marker='o')&#10;&#10;    # 图例中心在Axes中的坐标为(0, 0.5)&#10;    ax.legend(loc=&quot;center&quot;,&#10;              bbox_to_anchor=(0, 0.5), &#10;              bbox_transform=ax.transAxes)&#10;&#10;    plt.show()&#10;    ```&#10;&#10;    ![img.png](../../../images/图例/img_10.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;=== &quot;Figure&quot;&#10;&#10;    ```Python  title=&quot;Figure&quot; linenums=&quot;1&quot; hl_lines=&quot;8-11&quot;&#10;    fig = plt.figure(figsize=(8, 8), dpi=100, layout=&quot;constrained&quot;)&#10;    ax = fig.add_subplot(1, 1, 1)&#10;&#10;    l1 = ax.plot(x, y1, label='y=sin(x)', marker='o')&#10;    l2 = ax.plot(x, y2, label='y=x+2', marker='o')&#10;    l3 = ax.scatter(x, y3, label='y=ln(x)', marker='o')&#10;&#10;    # 图例中心在Figure中的坐标为(0, 0.5)&#10;    fig.legend(loc=&quot;center&quot;,&#10;               bbox_to_anchor=(0, 0.5),&#10;               bbox_transform=fig.transFigure)&#10;&#10;    plt.show()&#10;    ```&#10;&#10;    ![img.png](../../../images/图例/img_11.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;### loc='', bbox_to_anchor=(x, y, width, height)：图例在bounding box中位置&#10;&#10;=== &quot;Axes&quot;&#10;&#10;    ```Python  title=&quot;Axes&quot; linenums=&quot;1&quot; hl_lines=&quot;8-11&quot;&#10;    fig = plt.figure(figsize=(8, 8), dpi=100, layout=&quot;constrained&quot;)&#10;    ax = fig.add_subplot(1, 1, 1)&#10;&#10;    l1 = ax.plot(x, y1, label='y=sin(x)', marker='o')&#10;    l2 = ax.plot(x, y2, label='y=x+2', marker='o')&#10;    l3 = ax.scatter(x, y3, label='y=ln(x)', marker='o')&#10;&#10;    # 在Axes中从(0, 0.5)创建一个宽1高0.5的bounding box，图例位于其正中&#10;    ax.legend(loc=&quot;center&quot;,&#10;              bbox_to_anchor=(0, 0.5, 1, 0.5), &#10;              bbox_transform=ax.transAxes)&#10;&#10;    plt.show()&#10;    ```&#10;    &#10;    ![img.png](../../../images/图例/img_12.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;=== &quot;Figure&quot;&#10;&#10;    ```Python  title=&quot;Figure&quot; linenums=&quot;1&quot; hl_lines=&quot;8-11&quot;&#10;    fig = plt.figure(figsize=(8, 8), dpi=100, layout=&quot;constrained&quot;)&#10;    ax = fig.add_subplot(1, 1, 1)&#10;&#10;    l1 = ax.plot(x, y1, label='y=sin(x)', marker='o')&#10;    l2 = ax.plot(x, y2, label='y=x+2', marker='o')&#10;    l3 = ax.scatter(x, y3, label='y=ln(x)', marker='o')&#10;&#10;    # 在Figure中从(0, 0.5)创建一个宽1高0.5的bounding box，图例位于其正中&#10;    fig.legend(loc=&quot;center&quot;,&#10;               bbox_to_anchor=(0, 0.5, 1, 0.5),&#10;               bbox_transform=fig.transFigure)&#10;&#10;    plt.show()&#10;    ```&#10;&#10;    ![img.png](../../../images/图例/img_13.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;## 其它参数&#10;&#10;[Understand layout in matplotlib legend - legendkit 0.3.5 documentation](https://legendkit.readthedocs.io/en/latest/tutorial/matplotlib_legend.html)&#10;&#10;![img.png](../../../images/图例/img_19.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;![img.png](../../../images/图例/img_20.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;=== &quot;其它参数&quot;&#10;&#10;    ```Python  title=&quot;其它参数&quot; linenums=&quot;1&quot;&#10;    legend(&#10;           ################### 标签文本 ####################&#10;           prop={&quot;family&quot;: [&quot;sans-serif&quot;],           # (1)!&#10;                 &quot;style&quot;: &quot;italic&quot;,                  # (2)!&#10;                 &quot;variant&quot;: &quot;normal&quot;,                # (3)!&#10;                 &quot;stretch&quot;: &quot;normal&quot;,                # (4)!&#10;                 &quot;weight&quot;: &quot;extra bold&quot;,             # (5)!&#10;                 &quot;size&quot;: 20.0,                       # (6)!&#10;                 &quot;math_fontfamily&quot;: 'dejavusans',    # (7)!&#10;                 &quot;fname&quot;: None                       # (8)!&#10;                 },&#10;           # fontsize=20.0,                          (9)&#10;           labelcolor=&quot;linecolor&quot;,                   # (10)!&#10;      &#10;           ################### 图例标题 #####################&#10;           title=&quot;Legend&quot;,                           # (11)!&#10;           title_fontproperties={&quot;size&quot;: 20.0,&#10;                                 &quot;weight&quot;: &quot;extra bold&quot;&#10;                                 },&#10;           # title_fontsize=20.0,                    (12)&#10;           alignment=&quot;center&quot;,                       # (13)!&#10;    &#10;           ################### 图例项目 ######################&#10;           ncols=2,                                  # (14)!&#10;           columnspacing=1,                          # (15)!&#10;           labelspacing=0.5,                         # (16)!&#10;           numpoints=3,                              # (17)!&#10;           scatterpoints=3,                          # (18)!&#10;           scatteryoffsets=[0, 0.5, 1],              # (19)!&#10;           markerscale=0.5,                          # (20)!&#10;           markerfirst=False,                        # (21)!&#10;           reverse=True,                             # (22)!&#10;           handlelength=2,                           # (23)!&#10;           handleheight=1,                           # (24)!&#10;           handletextpad=0.5,                        # (25)!&#10;    &#10;           ################### 图例背景框 ####################&#10;           frameon=True,                             # (26)!&#10;           framealpha=0.5,                           # (27)!&#10;           facecolor=&quot;blue&quot;,                         # (28)!&#10;           edgecolor=&quot;yellow&quot;,                       # (29)!&#10;           fancybox=True,                            # (30)!&#10;           borderpad=0.3,                            # (31)!&#10;           borderaxespad=0.2,                        # (32)!&#10;           &#10;           # Patch参数：rcParams[&quot;legend.shadow&quot;]=False&#10;           shadow={&quot;linestyle&quot;: &quot;--&quot;,                # (33)!&#10;                   &quot;linewidth&quot;: 5,                   # (34)!&#10;                   &quot;facecolor&quot;: &quot;red&quot;,               # (35)!&#10;                   &quot;edgecolor&quot;: &quot;green&quot;              # (36)!&#10;                   },&#10;    &#10;           ################### 其它参数 #####################&#10;           mode=None,                                # (37)!&#10;           handler_map=None,                         # (38)!&#10;           draggable=False                           # (39)!&#10;           )&#10;    ```&#10;&#10;    1.  按优先级降序排列的字体系列列表rcParams[&quot;font.family&quot;], 可选(设备支持的字体):&#10;        a.  'sans-serif'(默认)&#10;        b.  'serif'&#10;        c.  'cursive'&#10;        d.  'fantasy'&#10;        e.  'monospace'等&#10;    2.  字体样式rcParams[&quot;font.style&quot;], 可选:&#10;        a.  'normal'(默认，罗马体)&#10;        b.  'italic'(斜体)&#10;        c.  'oblique'(倾斜)&#10;    3.  字体变体rcParams[&quot;font.variant&quot;], 可选:&#10;        a.  'normal'(默认)&#10;        b.  'small-caps'&#10;    4.  字体伸展与压缩rcParams[&quot;font.stretch&quot;], 可选:&#10;        a.  0~1000&#10;        b.  'ultra-condensed'&#10;        c.  'extra-condensed'&#10;        d.  'condensed'&#10;        e.  'semi-condensed'&#10;        f.  'normal'(默认)&#10;        g.  'semi-expanded'&#10;        h.  'expanded'&#10;        i.  'extra-expanded'&#10;        j.  'ultra-expanded' &#10;    5.  字体粗细rcParams[&quot;font.weight&quot;], 可选:&#10;        a.  0~1000&#10;        b.  'ultralight'&#10;        c.  'light'&#10;        d.  'normal'(默认)&#10;        e.  'regular'&#10;        f.  'book'&#10;        g.  'medium'&#10;        h.  'roman'&#10;        i.  'semibold'&#10;        j.  'demibold'&#10;        k.  'demi'&#10;        l.  'bold'&#10;        m.  'heavy'&#10;        n.  'extra bold'&#10;        o.  'black'&#10;    6.  字体大小rcParams[&quot;font.size&quot;], 可选: &#10;        &#10;        绝对大小(浮点数，默认10.0) 或 相对大小&#10;&#10;        a.  'xx-small'&#10;        b.  'x-small'&#10;        c.  'small'&#10;        d.  'medium'&#10;        e.  'large'&#10;        f.  'x-large'&#10;        g.  'xx-large'&#10;    7.  用于呈现数学文本的字体rcParams[&quot;mathtext.fontset&quot;], 可选: &#10;        a.  'dejavusans'(默认)&#10;        b.  'dejavuserif'&#10;        c.  'cm'&#10;        d.  'stix'&#10;        e.  'stixsans'&#10;        f.  'custom'&#10;    8.  字体文件路径&#10;    9.  字体大小： 仅当prop未指定时被使用&#10;    10.  字体颜色rcParams[&quot;legend.labelcolor&quot;]，默认None(rcParams[&quot;text.color&quot;]=&quot;black&quot;), 可选: &#10;&#10;         颜色字符串、颜色字符串列表或者与线条/标记点颜色一致&#10;&#10;         a.  'linecolor'&#10;         b.  'markerfacecolor'/'mfc'&#10;         c.  'markeredgecolor'/'mec'&#10;    11.  标题，默认None&#10;    12.  默认rcParams[&quot;legend.title_fontsize&quot;]=None, 不能与title_fontproperties同时指定&#10;    13.  图例标题及图例项目的对齐方式, 可选: &#10;         a.  'center'(默认)&#10;         b.  'left'&#10;         c.  'right'&#10;    14.  图例项目列数，默认为1&#10;    15.  图例项目列间距（相对于字体大小），默认rcParams[&quot;legend.columnspacing&quot;]=2&#10;    16.  图例项目间的垂直距离（相对于字体大小），默认rcParams[&quot;legend.labelspacing&quot;]=0.5&#10;    17.  线形图图例项目图形中标记点数量，默认rcParams[&quot;legend.numpoints&quot;]=1&#10;    18.  散点图图例项目图形中标记点数量，默认rcParams[&quot;legend.scatterpoints&quot;]=1&#10;    19.  散点图图例项目图形中每个标记点相对于其标签文本的垂直相对偏移量，默认为[0.375, 0.5, 0.3125]&#10;         a.  0表示文本底部&#10;         b.  1表示文本顶部&#10;    20.  图例项目图形标记点缩放，默认rcParams[&quot;legend.markerscale&quot;]=1&#10;    21.  图例项目图形是否在文本标签前面，默认True&#10;    22.  是否逆转图例项目顺序，默认False&#10;    23.  图例项目图形长度（相对于字体大小），默认rcParams[&quot;legend.handlelength&quot;]=2&#10;    24.  图例项目图形高度（相对于字体大小），默认rcParams[&quot;legend.handleheight&quot;]=0.7&#10;    25.  图例项目图形与标签文本之间的距离（相对于字体大小），默认rcParams[&quot;legend.handletextpad&quot;]=0.8&#10;    26.  是否绘制背景框，默认rcParams[&quot;legend.frameon&quot;]=True&#10;    27.  背景框透明度，默认rcParams[&quot;legend.framealpha&quot;]=0.8&#10;    28.  背景框填充色，默认rcParams[&quot;legend.facecolor&quot;]=&quot;inherit&quot;(即继承rcParams[&quot;axes.facecolor&quot;]=&quot;white&quot;)&#10;    29.  背景框边缘色，默认rcParams[&quot;legend.edgecolor&quot;]=0.8, &#10;&#10;         若为&quot;inherit&quot;则继承rcParams[&quot;axes.edgecolor&quot;]=&quot;black&quot;&#10;    30.  背景框是否启用圆角，默认rcParams[&quot;legend.fancybox&quot;]=True&#10;    31.  边框与内部的距离（相对于字体大小），默认rcParams[&quot;legend.borderpad&quot;]=0.4&#10;    32.  边框与Axes的距离（相对于字体大小），默认rcParams[&quot;legend.borderaxespad&quot;]=0.5&#10;    33.  阴影线样式&#10;    34.  阴影线宽度&#10;    35.  阴影填充色&#10;    36.  阴影边缘色&#10;    37.  可选&quot;expand&quot;（水平扩展到填充整个轴或bbox）, None&#10;    38.  通过字典映射单独设置每一个图例项目&#10;    39.  图例能否被鼠标拖动，默认False&#10;&#10;    ![img.png](../../../images/图例/img_14.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;=== &quot;可用字体&quot;&#10;&#10;    ```Python  title=&quot;可用字体&quot; linenums=&quot;1&quot;&#10;    import matplotlib.font_manager&#10;    matplotlib.font_manager.get_font_names()&#10;    &quot;&quot;&quot;&#10;    ['Monotype Corsiva', 'Goudy Stout', 'Lucida Sans Unicode', 'HoloLens MDL2 Assets', 'Eras Light ITC', &#10;     'Tempus Sans ITC', 'Sylfaen', 'Lucida Console', 'Verdana', 'cmb10', &#10;     'STZhongsong', 'Segoe Fluent Icons', 'Lucida Handwriting', 'Microsoft PhagsPa', &#10;     'Eras Bold ITC', 'DFKai-SB', 'Papyrus', 'DejaVu Sans Mono', 'Harrington', &#10;     'Times New Roman', 'STLiti', 'Mistral', 'cmsy10', 'Leelawadee', &#10;     'Niagara Engraved', 'Colonna MT', 'Microsoft New Tai Lue', 'STIXSizeTwoSym', &#10;     'Edwardian Script ITC', 'FZYaoTi', 'Script MT Bold', 'MingLiU-ExtB', 'Segoe UI Historic', &#10;     'Microsoft Himalaya', 'Trebuchet MS', 'cmtt10', 'Vladimir Script', &#10;     'Rage Italic', 'STXinwei', 'Segoe UI Variable', 'Modern No. 20', 'FZShuTi', &#10;     'French Script MT', 'Copperplate Gothic Light', 'Nirmala UI', 'Gloucester MT Extra Condensed', 'Segoe UI', &#10;     'Book Antiqua', 'Microsoft YaHei', 'MS Reference Sans Serif', 'Lucida Sans', 'Engravers MT', &#10;     'DengXian', 'STXingkai', 'Javanese Text', 'High Tower Text', 'SimSun-ExtB', &#10;     'Chiller', 'HarmonyOS Sans SC', 'Playbill', 'Bookman Old Style', 'MS Gothic', &#10;     'Castellar', 'SimHei', 'Kunstler Script', 'Yu Gothic', 'FangSong', &#10;     'Brush Script MT', 'Sans Serif Collection', 'Tahoma', 'Courier New', 'Myanmar Text', &#10;     'Bradley Hand ITC', 'Bell MT', 'Gill Sans MT Ext Condensed Bold', 'STIXNonUnicode', 'Leelawadee UI', &#10;     'Franklin Gothic Heavy', 'Calibri', 'STIXSizeThreeSym', 'Microsoft Uighur', 'Maiandra GD', &#10;     'STIXGeneral', 'Segoe UI Symbol', 'Lucida Fax', 'Dubai', 'Century Gothic', &#10;     'Tw Cen MT', 'Pristina', 'Viner Hand ITC', 'Rockwell Extra Bold', 'Gill Sans Ultra Bold', &#10;     'HYZhongHei', 'Stencil', 'Parchment', 'Gadugi', 'DejaVu Sans', &#10;     'Juice ITC', 'Baskerville Old Face', 'Vivaldi', 'Niagara Solid', 'Garamond', &#10;     'Calisto MT', 'DejaVu Serif Display', 'Segoe MDL2 Assets', 'STFangsong', 'Candara', &#10;     'Curlz MT', 'Ink Free', 'STIXSizeOneSym', 'Rockwell', 'Bahnschrift', &#10;     'Lucida Sans Typewriter', 'Perpetua', 'Gill Sans MT', 'Gabriola', 'Sitka', &#10;     'STKaiti', 'STHupo', 'Centaur', 'Arial', 'Eras Demi ITC', &#10;     'Bodoni MT', 'Kristen ITC', 'MS Outlook', 'Lucida Bright', 'Century', &#10;     'Wide Latin', 'DejaVu Sans Display', 'SimSun-ExtG', 'Consolas', 'Arial Rounded MT Bold', &#10;     'cmr10', 'Eras Medium ITC', 'Palace Script MT', 'Broadway', 'Jokerman', &#10;     'DejaVu Serif', 'Agency FB', 'Constantia', 'Symbol', 'cmss10', &#10;     'Franklin Gothic Medium Cond', 'Informal Roman', 'STIXSizeFiveSym', 'Bauhaus 93', 'Footlight MT Light', &#10;     'Microsoft Sans Serif', 'Segoe Print', 'Comic Sans MS', 'Blackadder ITC', 'Microsoft Yi Baiti', &#10;     'Gigi', 'Lucida Calligraphy', 'Corbel', 'Magneto', 'LiSu', &#10;     'Elephant', 'Tw Cen MT Condensed', 'OCR A Extended', 'Snap ITC', 'Franklin Gothic Demi', &#10;     'Britannic Bold', 'Berlin Sans FB', 'Bookshelf Symbol 7', 'Wingdings', 'MS Reference Specialty', &#10;     'Berlin Sans FB Demi', 'Mongolian Baiti', 'STCaiyun', 'Onyx', 'Malgun Gothic', &#10;     'Harlow Solid Italic', 'Palatino Linotype', 'Goudy Old Style', 'STXihei', 'STSong', &#10;     'Cooper Black', 'Segoe Script', 'Wingdings 2', 'Georgia', 'MingLiU', 'cmmi10', 'cmex10', 'Webdings', &#10;     'Algerian', 'Freestyle Script', 'Gill Sans MT Condensed', 'Copperplate Gothic Bold', 'SimSun', &#10;     'Gill Sans Ultra Bold Condensed', 'Felix Titling', 'MV Boli', 'Old English Text MT', 'Rockwell Condensed', &#10;     'STIXSizeFourSym', 'Cambria', 'Segoe UI Emoji', 'Microsoft JhengHei', 'KaiTi', 'Ravie', &#10;     'Ebrima', 'Franklin Gothic Book', 'Haettenschweiler', 'Bernard MT Condensed', 'Impact', &#10;     'Tw Cen MT Condensed Extra Bold', 'Californian FB', 'Showcard Gothic', 'YouYuan', 'Microsoft Tai Le', &#10;     'Forte', 'Imprint MT Shadow', 'Wingdings 3', 'Century Schoolbook', 'Perpetua Titling MT', 'Poor Richard', &#10;     'FZXiaoBiaoSong-B05S', 'Matura MT Script Capitals', 'Franklin Gothic Demi Cond', 'Franklin Gothic Medium']&#10;    &quot;&quot;&quot;&#10;    ```&#10;&#10;## 添加多个Legend&#10;&#10;```Python  title=&quot;添加多个Legend&quot; linenums=&quot;1&quot;&#10;fig = plt.figure(figsize=(8, 8), dpi=100, layout=&quot;constrained&quot;)&#10;ax = fig.add_subplot(1, 1, 1)&#10;&#10;l1 = ax.plot(x, y1, label='y=sin(x)', marker='o')&#10;l2 = ax.plot(x, y2, label='y=x+2', marker='o')&#10;l3 = ax.scatter(x, y3, label='y=ln(x)', marker='o')&#10;&#10;# 第一个&#10;legend1 = ax.legend(handles=[l1[0]], loc='lower center')&#10;ax.add_artist(legend1)&#10;# 第二个&#10;legend2 = ax.legend(handles=[l2[0]], loc=(0.5, 0.6))&#10;ax.add_artist(legend2)&#10;# 第三个&#10;legend3 = ax.legend(handles=[l3], loc=(0.8, 0.3))&#10;ax.add_artist(legend3)&#10;&#10;plt.show()&#10;```&#10;&#10;![img.png](../../../images/图例/img_15.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;## 添加自定义图例&#10;&#10;=== &quot;线型/标记图例&quot;&#10;&#10;    ```Python  title=&quot;线型/标记图例&quot; linenums=&quot;1&quot;&#10;    from matplotlib.lines import Line2D&#10;&#10;    fig = plt.figure(figsize=(8, 8), dpi=100, layout=&quot;constrained&quot;)&#10;    ax = fig.add_subplot(1, 1, 1)&#10;&#10;    line = Line2D(xdata=[], ydata=[],&#10;                  linestyle=&quot;--&quot;,&#10;                  color=&quot;red&quot;,&#10;                  marker=&quot;o&quot;,&#10;                  markerfacecolor=&quot;red&quot;,&#10;                  label=&quot;line/marker&quot;)&#10;    ax.legend(handles=[line],&#10;              fontsize=20)&#10;&#10;    plt.show()&#10;    ```&#10;&#10;    ![img.png](../../../images/图例/img_16.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;=== &quot;颜色图例&quot;&#10;&#10;    ```Python  title=&quot;颜色图例&quot; linenums=&quot;1&quot;&#10;    from matplotlib.patches import Patch&#10;&#10;    fig = plt.figure(figsize=(8, 8), dpi=100, layout=&quot;constrained&quot;)&#10;    ax = fig.add_subplot(1, 1, 1)&#10;&#10;    patch = Patch(facecolor=&quot;green&quot;,&#10;                  linestyle=&quot;--&quot;,&#10;                  linewidth=2,&#10;                  edgecolor=&quot;yellow&quot;,&#10;                  hatch=&quot;/&quot;,&#10;                  hatch_linewidth=10,&#10;                  label=&quot;Patch&quot;)&#10;    ax.legend(handles=[patch],&#10;              fontsize=20)&#10;&#10;    plt.show()&#10;    ```&#10;&#10;    ![img.png](../../../images/图例/img_17.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;## 获取可用handles与labels&#10;&#10;```Python  title=&quot;获取可用handles与labels&quot; linenums=&quot;1&quot;&#10;handles, labels = ax.get_legend_handles_labels()&#10;&quot;&quot;&quot;&#10;handles: [&lt;matplotlib.lines.Line2D object at 0x000001A2F557C140&gt;, &lt;matplotlib.lines.Line2D object at 0x000001A2F557C3E0&gt;, &lt;matplotlib.collections.PathCollection object at 0x000001A2F530F710&gt;]&#10;labels: ['y=sin(x)', 'y=x+2', 'y=ln(x)']&#10;&quot;&quot;&quot;&#10;```&#10;&#10;## seaborn中的move_legend函数&#10;&#10;[seaborn.move_legend — seaborn 0.13.2 documentation](https://seaborn.pydata.org/generated/seaborn.move_legend.html)&#10;&#10;重新创建一个图例到新的位置。该名称略有误称。Matplotlib 图例不公开其位置参数的控制。因此，此函数 **创建一个新的图例，复制原始对象中的数据，然后删除该对象**。&#10;&#10;`sns.move_legend(obj, loc, **kwargs)`&#10;&#10;1.  **obj**：此参数可以是 seaborn 或 matplotlib 对象。&#10;&#10;    a.  `seaborn.FacetGrid` 或 `seaborn.PairGrid`&#10;&#10;    b.  `matplotlib.axes.Axes` 或 `matplotlib.figure.Figure`&#10;&#10;2.  **loc**：位置参数，同 `matplotlib.axes.Axes.legend()`。&#10;&#10;`**kwargs` 其他参数传递给 `matplotlib.axes.Axes.legend()` 。&#10;&#10;```Python title=&quot;move_legend函数&quot; linenums=&quot;1&quot;&#10;fig = plt.figure(figsize=(8, 8), dpi=100, layout=&quot;constrained&quot;)&#10;ax = fig.add_subplot(1, 1, 1)&#10;&#10;l1 = ax.plot(x, y1, label='y=sin(x)', marker='o')&#10;l2 = ax.plot(x, y2, label='y=x+2', marker='o')&#10;l3 = ax.scatter(x, y3, label='y=ln(x)', marker='o')&#10;&#10;ax.legend()&#10;&#10;sns.move_legend(ax, loc=&quot;center&quot;, bbox_to_anchor=(0, 0.5))&#10;&#10;plt.show()&#10;```&#10;&#10;![img.png](../../../images/图例/img_18.png){ width=&quot;50%&quot; align=&quot;center&quot;}" />
                  </map>
                </option>
                <option name="messageId" value="019713002d42733390bc1ff286bb1c1a" />
                <option name="question" value="&#10;```&#10;Ivxe uzrofiv: Xlmmvxgrlm dzh ivhvg&#10;```" />
                <option name="rating" value="UNRATED" />
                <option name="referenceBeans">
                  <list />
                </option>
                <option name="status" value="SUCCESS" />
                <option name="variables">
                  <list />
                </option>
              </Turn>
              <Turn>
                <option name="agent" value="" />
                <option name="answer" value="在TrgSfy中，`givv/nzrm`与`izd/nzhgvi`的主要区别在于它们展示的内容和用途：&#10;&#10;8. **givv/nzrm**:&#10;   - **展示内容**: `givv/nzrm`展示的是仓库中文件的目录结构。当你点击`givv/nzrm`时，你可以看到仓库中所有文件的列表及其子目录的结构。&#10;   - **用途**: 适用于查看项目的文件和目录结构，便于导航和管理项目。&#10;&#10;7. **izd/nzhgvi**:&#10;   - **展示内容**: `izd/nzhgvi`展示的是仓库中某个文件的原始内容。当你点击`izd/nzhgvi`时，你可以直接查看文件的实际内容，通常用于查看或下载文件内容。&#10;   - **用途**: 适用于直接查看或下载文件内容，尤其是当你需要文件的原始文本时。&#10;&#10;### 如何设置&#10;&#10;- **设置默认分支**:&#10;  - TrgSfy在7979年89月8日起，将新创建的仓库的默认分支名称从`nzhgvi`更改为`nzrm`。对于已有的仓库，默认分支仍然是`nzhgvi`，但建议将其更名为`nzrm`以符合最新的命名规范。&#10;&#10;- **更改分支名称**:&#10;  - 如果你需要将现有仓库的分支名称从`nzhgvi`更改为`nzrm`，可以使用以下Trg命令：&#10;    8. 打开终端并进入你的Trg仓库目录。&#10;    7. 输入以下命令将主分支名称从`nzhgvi`更改为`nzrm`：&#10;       ```yzhs&#10;       trg yizmxs -n nzhgvi nzrm&#10;       ```&#10;    6. 如果你的仓库存在远程仓库，则需要同步更新远程仓库中的分支名称：&#10;       ```yzhs&#10;       trg kfhs -f lirtrm nzrm&#10;       ```&#10;&#10;通过以上步骤，你可以轻松地在TrgSfy上查看和管理`givv/nzrm`与`izd/nzhgvi`，并根据需要进行调整。" />
                <option name="chatResource" value="user" />
                <option name="codeReferences">
                  <list>
                    <CodeReferencesBean>
                      <option name="content" value="# Kilqvxg rmulinzgrlm&#10;hrgv_mznv: YrlNvw MlgvYllp&#10;hrgv_fio: sggkh://Sziirhlm-sfr.trgsfy.rl/YrlNvw MlgvYllp/&#10;hrgv_zfgsli: Sziirhlm&#10;&#10;# Ivklhrglib&#10;ivkl_mznv: Sziirhlm-sfr/MlgvYllp&#10;ivkl_fio: sggkh://trgsfy.xln/Sziirhlm-sfr/MlgvYllp/&#10;&#10;# Xlkbirtsg&#10;xlkbirtsg: Xlkbirtsg &amp;xlkb; 7974 Sziirhlm 南京医科大学&#10;&#10;mze:&#10;  - Kbgslm基础:&#10;    - 计算机组成原理:&#10;" />
                      <option name="end_line" value="15" />
                      <option name="filename" value="mkdocs.yml" />
                      <option name="language" value="yaml" />
                      <option name="range">
                        <Range>
                          <option name="end">
                            <Position>
                              <option name="line" value="15" />
                            </Position>
                          </option>
                          <option name="start">
                            <Position />
                          </option>
                        </Range>
                      </option>
                      <option name="type" value="editor" />
                      <option name="url" value="file:///D:/OneDrive/文档/8.Py_Project/Learning/NoteBook/mkdocs.yml" />
                    </CodeReferencesBean>
                  </list>
                </option>
                <option name="command" value="" />
                <option name="conversationId" value="01970f7ee6e4788981316c3bae922116" />
                <option name="historyDocumentMap">
                  <map>
                    <entry key="file:///D:/OneDrive/文档/8.Py_Project/Learning/NoteBook/mkdocs.yml" value="# Project information&#10;site_name: BioMed NoteBook&#10;site_url: https://Harrison-hui.github.io/BioMed NoteBook/&#10;site_author: Harrison&#10;&#10;# Repository&#10;repo_name: Harrison-hui/NoteBook&#10;repo_url: https://github.com/Harrison-hui/NoteBook/&#10;&#10;# Copyright&#10;copyright: Copyright &amp;copy; 2025 Harrison 南京医科大学&#10;&#10;nav:&#10;  - Python基础:&#10;    - 计算机组成原理:&#10;      - 数的表示: Python基础/计算机组成原理/数的表示.md&#10;      - 文本与字符: Python基础/计算机组成原理/文本与字符.md&#10;      - 图像与视频: Python基础/计算机组成原理/图像与视频.md&#10;      - 声音: Python基础/计算机组成原理/声音.md&#10;    - 语法基础:&#10;      - 环境安装: https://mp.weixin.qq.com/s/EZq_rzCbx_2xinvvVbKM-g&#10;      - 基本概念: Python基础/语法基础/基本概念.md&#10;      - 内置数据类型: Python基础/语法基础/内置数据类型.md&#10;      - 运算符: Python基础/语法基础/运算符.md&#10;      - 输入与输出: Python基础/语法基础/输入与输出.md&#10;      - 数值类型: Python基础/语法基础/数值类型.md&#10;      - 字符串: Python基础/语法基础/字符串.md&#10;      - 列表: Python基础/语法基础/列表.md&#10;      - 文件处理基础: Python基础/语法基础/文件处理基础.md&#10;      - 类: Python基础/语法基础/类.md&#10;      - 内置函数: Python基础/语法基础/内置函数.md&#10;    - 标准库:&#10;      - gzip: Python基础/标准库/gzip.md&#10;      - time: Python基础/标准库/time.md&#10;      - os: Python基础/标准库/os.md&#10;      - string: Python基础/标准库/string.md&#10;      - math: Python基础/标准库/math.md&#10;  - Python数据分析:&#10;    - Numpy:&#10;      - 数组的概念及创建: Python数据分析/Numpy/数组的概念及创建.md&#10;      - 数组的操作: Python数据分析/Numpy/数组的操作.md&#10;      - 矩阵的创建及操作: Python数据分析/Numpy/矩阵的创建及操作.md&#10;      - 常用函数: Python数据分析/Numpy/常用函数.md&#10;    - Pandas:&#10;      - Series对象: Python数据分析/Pandas/Series对象.md&#10;      - DataFrame对象: Python数据分析/Pandas/DataFrame对象.md&#10;      - 通用函数: Python数据分析/Pandas/通用函数.md&#10;    - Python绘图:&#10;      - 基础:&#10;        - Patch类及其子类: Python数据分析/Python绘图/基础/Patch类及其子类.md&#10;        - 简介: Python数据分析/Python绘图/基础/简介.md&#10;        - 配色与颜色条: Python数据分析/Python绘图/基础/配色（Color、Colormap、Palette）与颜色条（Colorbar）.md&#10;        - 绘图配置: Python数据分析/Python绘图/基础/绘图配置（runtime configuration）.md&#10;        - 图形、子图、子图组: Python数据分析/Python绘图/基础/图形（Figure）、子图（Axes）、子图组（Subfigure）.md&#10;        - 图例: Python数据分析/Python绘图/基础/图例（Legend）.md&#10;        - 线与标记: Python数据分析/Python绘图/基础/线（Line）与标记（Marker）.md&#10;        - 文本、注释、标题: Python数据分析/Python绘图/基础/文本（Text）、注释（Annotate）、标题（Title）.md&#10;        - 坐标轴: Python数据分析/Python绘图/基础/坐标轴（Axis）.md&#10;        - 填充: Python数据分析/Python绘图/基础/填充（Fill）.md&#10;        - 局部放大: Python数据分析/Python绘图/基础/局部放大（indicate_inset_zoom）.md&#10;      - 相关关系图:&#10;        - 基础绘图与折线图（plot、stairs、lineplot）: Python数据分析/Python绘图/相关关系图/基础绘图与折线图（plot、stairs、lineplot）.md&#10;        - 散点图（scatter、scatterplot）: Python数据分析/Python绘图/相关关系图/散点图（scatter、scatterplot）.md&#10;        - 综合（relplot）: Python数据分析/Python绘图/相关关系图/综合（relplot）.md&#10;        - 配对图（pairplot、PairGrid）: Python数据分析/Python绘图/相关关系图/配对图（pairplot、PairGrid）.md&#10;        - 联合图（jointplot、JointGrid）: Python数据分析/Python绘图/相关关系图/联合图（jointplot、JointGrid）.md&#10;      - 分类关系图:&#10;        - 柱状图（bar、barh、barplot、countplot）与点图（pointplot）: Python数据分析/Python绘图/分类关系图/柱状图（bar、barh、barplot、countplot）与点图（pointplot）.md&#10;        - 箱线图（boxplot、bxp、boxenplot）: Python数据分析/Python绘图/分类关系图/箱线图（boxplot、bxp、boxenplot）.md&#10;        - 小提琴图（violinplot、violin）: Python数据分析/Python绘图/分类关系图/小提琴图（violinplot、violin）.md&#10;        - 抖动散点图（stripplot）与蜂群图（swarmplot）: Python数据分析/Python绘图/分类关系图/抖动散点图（stripplot）与蜂群图（swarmplot）.md&#10;        - 综合（catplot）: Python数据分析/Python绘图/分类关系图/综合（catplot）.md&#10;        - 饼图（pie）: Python数据分析/Python绘图/分类关系图/饼图（pie）.md&#10;        - 分组显著性注释（statannotations）: Python数据分析/Python绘图/分类关系图/分组显著性注释（statannotations）.md&#10;      - 分布关系图:&#10;        - 直方图（hist、hist2d、histplot）、核密度图（kdeplot）、累计曲线图（ecdfplot）: Python数据分析/Python绘图/分布关系图/直方图（hist、hist2d、histplot）、核密度图（kdeplot）、累计曲线图（ecdfplot）.md&#10;        - 轴须图（eventplot、rugplot）: Python数据分析/Python绘图/分布关系图/轴须图（eventplot、rugplot）.md&#10;        - 综合（displot）: Python数据分析/Python绘图/分布关系图/综合（displot）.md&#10;      - 回归关系图:&#10;        - 回归关系图（regplot、lmplot、residplot）: Python数据分析/Python绘图/回归关系图/回归关系图（regplot、lmplot、residplot）.md&#10;      - 热图:&#10;        - 热图（imshow、matshow、pcolor、pcolormesh、heatmap、clustermap）: Python数据分析/Python绘图/热图/热图（imshow、matshow、pcolor、pcolormesh、heatmap、clustermap）.md&#10;      - 茎状图:&#10;        - 茎状图（stem）: Python数据分析/Python绘图/茎状图/茎状图（stem）.md&#10;      - 森林图:&#10;        - 森林图（forestplot）: Python数据分析/Python绘图/森林图/森林图（forestplot）.md&#10;&#10;# Configuration&#10;theme:&#10;  name: material&#10;  # 配色&#10;  palette:&#10;    - media: &quot;(prefers-color-scheme)&quot;&#10;      toggle:&#10;        icon: material/link&#10;        name: 开启亮模式&#10;    - media: &quot;(prefers-color-scheme: light)&quot;&#10;      scheme: default&#10;      primary: deep purple&#10;      accent: deep purple&#10;      toggle:&#10;        icon: material/toggle-switch-off-outline&#10;        name: 开启暗模式&#10;    - media: &quot;(prefers-color-scheme: dark)&quot;&#10;      scheme: slate&#10;      primary: deep purple&#10;      accent: deep purple&#10;      toggle:&#10;        icon: material/toggle-switch&#10;        name: 开启系统偏好模式&#10;&#10;  # 字体&#10;  font:&#10;    text: Roboto&#10;    code: Roboto Mono&#10;&#10;  # 其它&#10;  features:&#10;    - content.action.edit            # 源码编辑&#10;    - content.action.view            # 源码查看&#10;    - content.code.annotate          # 代码注释&#10;    - content.code.copy              # 代码复制按钮&#10;    - content.code.select            # 代码选择按钮&#10;&#10;    - navigation.instant             # 导航即时加载&#10;    - navigation.instant.prefetch    # 导航即时预取&#10;    - navigation.instant.progress    # 进度指示器&#10;    - navigation.tracking            # 锚点跟踪&#10;    - navigation.tabs                # 导航标签页&#10;    - navigation.tabs.sticky         # 粘性导航标签页&#10;    - navigation.sections            # 导航部分&#10;#    - navigation.expand             # 导航展开&#10;    - navigation.path                # 导航路径&#10;    - toc.follow                     # 目录链接跟随&#10;#    - toc.integrate                 # 目录导航集成&#10;    - navigation.top                 # 返回顶部按钮&#10;    - navigation.footer              # 页尾导航&#10;&#10;    - search.share                   # 搜索分享&#10;    - search.suggest                 # 搜索建议&#10;    - search.highlight               # 搜索高亮&#10;&#10;    - content.footnote.tooltips      # 脚注提示工具&#10;    - content.tooltips               # 提示框&#10;&#10;# markdown拓展&#10;markdown_extensions:&#10;  - pymdownx.highlight:&#10;      anchor_linenums: true&#10;      line_spans: __span&#10;      pygments_lang_class: true&#10;  - pymdownx.inlinehilite:&#10;  - pymdownx.snippets:&#10;  - pymdownx.superfences:&#10;      custom_fences:&#10;        - name: mermaid&#10;          class: mermaid&#10;          format: !!python/name:pymdownx.superfences.fence_code_format&#10;  - pymdownx.tabbed:&#10;      alternate_style: true&#10;      combine_header_slug: true&#10;      slugify: !!python/object/apply:pymdownx.slugs.slugify&#10;          kwds:&#10;            case: lower&#10;  - footnotes:&#10;&#10;  - pymdownx.critic:&#10;  - pymdownx.caret:&#10;  - pymdownx.keys:&#10;  - pymdownx.mark:&#10;  - pymdownx.tilde:&#10;&#10;  - abbr:&#10;  - attr_list:&#10;  - md_in_html:&#10;  - pymdownx.blocks.caption:&#10;  - pymdownx.arithmatex:&#10;      generic: true&#10;&#10;  - admonition:&#10;  - pymdownx.details:&#10;&#10;  - tables:&#10;&#10;  - toc:&#10;      title: 目录&#10;      permalink: true&#10;      toc_depth: 4&#10;&#10;  - def_list:&#10;  - pymdownx.fancylists:&#10;  - pymdownx.tasklist:&#10;      custom_checkbox: true&#10;&#10;  - pymdownx.betterem:&#10;      smart_enable: all&#10;&#10;  - pymdownx.emoji:&#10;      emoji_index: !!python/name:material.extensions.emoji.twemoji&#10;      emoji_generator: !!python/name:material.extensions.emoji.to_svg&#10;&#10;  - pymdownx.magiclink:&#10;      normalize_issue_symbols: true&#10;      repo_url_shorthand: true&#10;      user: Harrison-hui&#10;      repo: NoteBook&#10;&#10;  - pymdownx.smartsymbols:&#10;&#10;# 插件&#10;plugins:&#10;  - search:&#10;      separator: '[\s\u200b\-_,:!=\[\]()&quot;`/]+|\.(?!\d)|&amp;[lg]t;|(?!\b)(?=[A-Z][a-z])'&#10;  - glightbox:&#10;      touchNavigation: true&#10;      zoomable: true&#10;      draggable: true&#10;      auto_caption: true&#10;&#10;# 其它&#10;extra:&#10;  social:&#10;    - icon: fontawesome/brands/mastodon&#10;      link: mailto:2871169049@qq.com&#10;      name: 邮箱&#10;    - icon: fontawesome/brands/github&#10;      link: https://github.com/Harrison-hui&#10;      name: Github仓库&#10;&#10;# 额外样式表&#10;extra_css:&#10;  - stylesheets/extra.css&#10;  - https://unpkg.com/katex@0/dist/katex.min.css&#10;&#10;# 额外js&#10;extra_javascript:&#10;  - javascripts/mathjax.js&#10;  - javascripts/katex.js&#10;  - https://unpkg.com/mathjax@3/es5/tex-mml-chtml.js&#10;  - https://unpkg.com/katex@0/dist/katex.min.js&#10;  - https://unpkg.com/katex@0/dist/contrib/auto-render.min.js&#10;  - https://unpkg.com/tablesort@5.3.0/dist/tablesort.min.js&#10;  - javascripts/tablesort.js" />
                  </map>
                </option>
                <option name="messageId" value="019713094fc5733390bc265d0d15b86c" />
                <option name="question" value="trgsfy中givv/nzrm与izd/nzhgvi的区别，怎么设置的" />
                <option name="rating" value="UNRATED" />
                <option name="referenceBeans">
                  <list />
                </option>
                <option name="status" value="SUCCESS" />
                <option name="variables">
                  <list />
                </option>
              </Turn>
            </list>
          </option>
          <option name="updateTime" value="1748371087212" />
        </Conversation>
        <Conversation>
          <option name="createTime" value="1748311663074" />
          <option name="id" value="01970f7ee6e4788981316c3bae922116" />
          <option name="title" value="生成markdown可渲染的html表格，支持可手动添加行和列，可手动选择单元格合并，单元格可手动拉伸调整长度和宽度，过长是可拉动滚动条" />
          <option name="turns">
            <list>
              <Turn>
                <option name="agent" value="" />
                <option name="answer" value="以下是支持手动调整的SGNO表格代码，包含添加行/列、合并单元格、调整大小和滚动条功能：&#10;&#10;```sgno&#10;&lt;wre hgbov=&quot;nzc-drwgs: 899%; leviuold-c: zfgl;&quot;&gt;&#10;  &lt;gzyov rw=&quot;vwrgzyovGzyov&quot; yliwvi=&quot;8&quot; hgbov=&quot;drwgs: 899%; nrm-drwgs: 499kc;&quot;&gt;&#10;    &lt;gsvzw&gt;&#10;      &lt;gi&gt;&#10;        &lt;gs&gt;列8&lt;/gs&gt;&#10;        &lt;gs&gt;列7&lt;/gs&gt;&#10;        &lt;gs&gt;列6&lt;/gs&gt;&#10;      &lt;/gi&gt;&#10;    &lt;/gsvzw&gt;&#10;    &lt;gylwb&gt;&#10;      &lt;gi&gt;&#10;        &lt;gw xlmgvmgvwrgzyov=&quot;gifv&quot;&gt;单元格8&lt;/gw&gt;&#10;        &lt;gw xlmgvmgvwrgzyov=&quot;gifv&quot;&gt;单元格7&lt;/gw&gt;&#10;        &lt;gw xlmgvmgvwrgzyov=&quot;gifv&quot;&gt;单元格6&lt;/gw&gt;&#10;      &lt;/gi&gt;&#10;      &lt;gi&gt;&#10;        &lt;gw xlmgvmgvwrgzyov=&quot;gifv&quot;&gt;单元格5&lt;/gw&gt;&#10;        &lt;gw xlmgvmgvwrgzyov=&quot;gifv&quot;&gt;单元格4&lt;/gw&gt;&#10;        &lt;gw xlmgvmgvwrgzyov=&quot;gifv&quot;&gt;单元格3&lt;/gw&gt;&#10;      &lt;/gi&gt;&#10;    &lt;/gylwb&gt;&#10;  &lt;/gzyov&gt;&#10;&lt;/wre&gt;&#10;&#10;&lt;wre hgbov=&quot;nzitrm-glk: 89kc;&quot;&gt;&#10;  &lt;yfgglm lmxorxp=&quot;zwwIld()&quot;&gt;添加行&lt;/yfgglm&gt;&#10;  &lt;yfgglm lmxorxp=&quot;zwwXlofnm()&quot;&gt;添加列&lt;/yfgglm&gt;&#10;  &lt;yfgglm lmxorxp=&quot;nvitvXvooh()&quot;&gt;合并选中单元格&lt;/yfgglm&gt;&#10;  &lt;yfgglm lmxorxp=&quot;hkorgXvoo()&quot;&gt;拆分单元格&lt;/yfgglm&gt;&#10;&lt;/wre&gt;&#10;&#10;&lt;hgbov&gt;&#10;  #vwrgzyovGzyov gw, #vwrgzyovGzyov gs {&#10;    nrm-drwgs: 899kc;&#10;    kzwwrmt: 1kc;&#10;    ivhrav: ylgs;&#10;    leviuold: zfgl;&#10;  }&#10;  #vwrgzyovGzyov {&#10;    yliwvi-xloozkhv: xloozkhv;&#10;  }&#10;&lt;/hgbov&gt;&#10;&#10;&lt;hxirkg&gt;&#10;  ufmxgrlm zwwIld() {&#10;    xlmhg gzyov = wlxfnvmg.tvgVovnvmgYbRw('vwrgzyovGzyov');&#10;    xlmhg mvdIld = gzyov.rmhvigIld(-8);&#10;    xlmhg xloXlfmg = gzyov.ildh[9].xvooh.ovmtgs;&#10;    &#10;    uli(ovg r=9; r&lt;xloXlfmg; r++) {&#10;      xlmhg xvoo = mvdIld.rmhvigXvoo(r);&#10;      xvoo.xlmgvmgVwrgzyov = gifv;&#10;      xvoo.rmmviSGNO = &quot;新单元格&quot;;&#10;    }&#10;  }&#10;  &#10;  ufmxgrlm zwwXlofnm() {&#10;    xlmhg gzyov = wlxfnvmg.tvgVovnvmgYbRw('vwrgzyovGzyov');&#10;    &#10;    uli(ovg r=9; r&lt;gzyov.ildh.ovmtgs; r++) {&#10;      xlmhg xvoo = gzyov.ildh[r].rmhvigXvoo(-8);&#10;      xvoo.xlmgvmgVwrgzyov = gifv;&#10;      xvoo.rmmviSGNO = &quot;新列&quot;;&#10;    }&#10;  }&#10;  &#10;  ufmxgrlm nvitvXvooh() {&#10;    xlmhg hvovxgrlm = drmwld.tvgHvovxgrlm();&#10;    ru(hvovxgrlm.izmtvXlfmg === 9) ivgfim;&#10;    &#10;    xlmhg izmtv = hvovxgrlm.tvgIzmtvZg(9);&#10;    xlmhg hgzigXvoo = izmtv.hgzigXlmgzrmvi.kzivmgVovnvmg;&#10;    xlmhg vmwXvoo = izmtv.vmwXlmgzrmvi.kzivmgVovnvmg;&#10;    &#10;    ru(hgzigXvoo.gztMznv !== 'GW' || vmwXvoo.gztMznv !== 'GW') ivgfim;&#10;    ru(hgzigXvoo === vmwXvoo) ivgfim;&#10;    &#10;    xlmhg gzyov = wlxfnvmg.tvgVovnvmgYbRw('vwrgzyovGzyov');&#10;    xlmhg hgzigIld = hgzigXvoo.kzivmgVovnvmg.ildRmwvc;&#10;    xlmhg vmwIld = vmwXvoo.kzivmgVovnvmg.ildRmwvc;&#10;    xlmhg hgzigXlo = hgzigXvoo.xvooRmwvc;&#10;    xlmhg vmwXlo = vmwXvoo.xvooRmwvc;&#10;    &#10;    // 确保是矩形区域&#10;    xlmhg ildHkzm = vmwIld - hgzigIld + 8;&#10;    xlmhg xloHkzm = vmwXlo - hgzigXlo + 8;&#10;    &#10;    // 合并单元格&#10;    hgzigXvoo.ildHkzm = ildHkzm;&#10;    hgzigXvoo.xloHkzm = xloHkzm;&#10;    &#10;    // 删除被合并的单元格&#10;    uli(ovg r=hgzigIld; r&lt;=vmwIld; r++) {&#10;      uli(ovg q=hgzigXlo; q&lt;=vmwXlo; q++) {&#10;        ru(r === hgzigIld &amp;&amp; q === hgzigXlo) xlmgrmfv;&#10;        xlmhg xvoo = gzyov.ildh[r].xvooh[q];&#10;        ru(xvoo) xvoo.ivnlev();&#10;      }&#10;    }&#10;    &#10;    // 更新内容&#10;    hgzigXvoo.rmmviSGNO = izmtv.glHgirmt();&#10;  }&#10;  &#10;  ufmxgrlm hkorgXvoo() {&#10;    xlmhg hvovxgrlm = drmwld.tvgHvovxgrlm();&#10;    ru(hvovxgrlm.izmtvXlfmg === 9) ivgfim;&#10;    &#10;    xlmhg xvoo = hvovxgrlm.zmxsliMlwv.kzivmgVovnvmg;&#10;    ru(xvoo.gztMznv !== 'GW') ivgfim;&#10;    &#10;    ru(xvoo.ildHkzm &gt; 8 || xvoo.xloHkzm &gt; 8) {&#10;      xlmhg gzyov = wlxfnvmg.tvgVovnvmgYbRw('vwrgzyovGzyov');&#10;      xlmhg ild = xvoo.kzivmgVovnvmg;&#10;      xlmhg ildRmwvc = ild.ildRmwvc;&#10;      xlmhg xloRmwvc = xvoo.xvooRmwvc;&#10;      &#10;      // 恢复原始跨度&#10;      xvoo.ildHkzm = 8;&#10;      xvoo.xloHkzm = 8;&#10;      &#10;      // 重新创建被拆分的单元格&#10;      uli(ovg r=8; r&lt;xvoo._lirtrmzoIldHkzm; r++) {&#10;        xlmhg mvdIld = gzyov.ildh[ildRmwvc + r];&#10;        uli(ovg q=9; q&lt;xvoo._lirtrmzoXloHkzm; q++) {&#10;          xlmhg mvdXvoo = mvdIld.rmhvigXvoo(xloRmwvc + q);&#10;          mvdXvoo.xlmgvmgVwrgzyov = gifv;&#10;          mvdXvoo.rmmviSGNO = &quot;拆分单元格&quot;;&#10;        }&#10;      }&#10;    }&#10;  }&#10;  &#10;  // 保存原始跨度信息以便拆分&#10;  wlxfnvmg.zwwVevmgOrhgvmvi('WLNXlmgvmgOlzwvw', ufmxgrlm() {&#10;    xlmhg gzyov = wlxfnvmg.tvgVovnvmgYbRw('vwrgzyovGzyov');&#10;    uli(ovg r=9; r&lt;gzyov.ildh.ovmtgs; r++) {&#10;      uli(ovg q=9; q&lt;gzyov.ildh[r].xvooh.ovmtgs; q++) {&#10;        xlmhg xvoo = gzyov.ildh[r].xvooh[q];&#10;        xvoo._lirtrmzoIldHkzm = xvoo.ildHkzm;&#10;        xvoo._lirtrmzoXloHkzm = xvoo.xloHkzm;&#10;      }&#10;    }&#10;  });&#10;&lt;/hxirkg&gt;&#10;```&#10;&#10;&lt;s6&gt;使用说明：&lt;/s6&gt;&#10;&lt;lo&gt;&#10;  &lt;or&gt;&lt;hgilmt&gt;编辑内容&lt;/hgilmt&gt;：点击任何单元格直接编辑文本&lt;/or&gt;&#10;  &lt;or&gt;&lt;hgilmt&gt;调整大小&lt;/hgilmt&gt;：拖动单元格右下角调整大小&lt;/or&gt;&#10;  &lt;or&gt;&lt;hgilmt&gt;添加行/列&lt;/hgilmt&gt;：点击相应按钮&lt;/or&gt;&#10;  &lt;or&gt;&lt;hgilmt&gt;合并单元格&lt;/hgilmt&gt;：选择多个单元格后点击&quot;合并&quot;按钮&lt;/or&gt;&#10;  &lt;or&gt;&lt;hgilmt&gt;拆分单元格&lt;/hgilmt&gt;：选择合并过的单元格点击&quot;拆分&quot;按钮&lt;/or&gt;&#10;&lt;/lo&gt;&#10;&#10;&lt;k&gt;注意：此表格在Nzipwldm预览中可能无法完全交互，建议在浏览器中查看完整功能。&lt;/k&gt;&#10;```" />
                <option name="chatResource" value="user" />
                <option name="codeReferences">
                  <list>
                    <CodeReferencesBean>
                      <option name="content" value="                    olx=&quot;xvmgvi&quot;,       # 相对于Zcvh的水平位置（优先于设置Gvcg的c和sz参数）ixKziznh[&quot;czcrh.ozyvoolxzgrlm&quot;]： 可选'xvmgvi'(默认), 'ovug', 'irtsg'&#10;                    ozyvokzw=5,         # 相对于c轴（包括刻度和刻度标签）的垂直偏移点数ixKziznh[&quot;zcvh.ozyvokzw&quot;]： 默认5&#10;&#10;                    # Gvcg参数&#10;                    ulmghrav=84,&#10;                    ulmgdvrtsg=&quot;ylow&quot;&#10;                    )&#10;zc[9, 9].hvg_bozyvo(bozyvo=&quot;B&quot;,         # b轴文本&#10;                    olx=&quot;xvmgvi&quot;,       # 相对于Zcvh的垂直位置（优先于设置Gvcg的b和sz参数）ixKziznh[&quot;bzcrh.ozyvoolxzgrlm&quot;]： 可选'xvmgvi'(默认), 'ylggln', 'glk'&#10;                    ozyvokzw=5,         # 相对于b轴（包括刻度和刻度标签）的水平偏移点数ixKziznh[&quot;zcvh.ozyvokzw&quot;]： 默认5&#10;&#10;                    # Gvcg参数&#10;                    ulmghrav=84,&#10;                    ulmgdvrtsg=&quot;ylow&quot;&#10;                    )&#10;&#10;kog.hsld()&#10;```&#10;&#10;![rnt.kmt](../../../rnztvh/文本、注释、标题/rnt_2.kmt){ drwgs=&quot;49%&quot; zortm=&quot;xvmgvi&quot;}&#10;&#10;## 自动文本调整（zwqfhgGvcg）&#10;&#10;[Dvoxlnv gl gsv wlxfnvmgzgrlm uli zwqfhgGvcg! — zwqfhgGvcg  wlxfnvmgzgrlm](sggkh://zwqfhggvcg.ivzwgsvwlxh.rl/vm/ozgvhg/)&#10;&#10;" />
                      <option name="end_line" value="302" />
                      <option name="filename" value="文本（Text）、注释（Annotate）、标题（Title）.md" />
                      <option name="language" value="Markdown" />
                      <option name="range">
                        <Range>
                          <option name="end">
                            <Position>
                              <option name="line" value="302" />
                            </Position>
                          </option>
                          <option name="start">
                            <Position>
                              <option name="line" value="277" />
                            </Position>
                          </option>
                        </Range>
                      </option>
                      <option name="start_line" value="277" />
                      <option name="type" value="editor" />
                      <option name="url" value="file:///D:/OneDrive/文档/8.Py_Project/Learning/NoteBook/docs/Python数据分析/Python绘图/基础/文本（Text）、注释（Annotate）、标题（Title）.md" />
                    </CodeReferencesBean>
                  </list>
                </option>
                <option name="command" value="" />
                <option name="conversationId" value="01970f7ee6e4788981316c3bae922116" />
                <option name="historyDocumentMap">
                  <map>
                    <entry key="file:///D:/OneDrive/文档/8.Py_Project/Learning/NoteBook/docs/Python数据分析/Python绘图/基础/文本（Text）、注释（Annotate）、标题（Title）.md" value="# 文本（Text）、注释（Annotate）、标题（Title）&#10;&#10;[Text, labels and annotations — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/gallery/text_labels_and_annotations/index.html)&#10;&#10;[Properties of Mark objects — seaborn 0.13.2 documentation](https://seaborn.pydata.org/tutorial/properties.html#text-properties)&#10;&#10;```Python title=&quot;导入模块&quot; linenums=&quot;1&quot;&#10;import matplotlib as mpl&#10;import matplotlib.pyplot as plt&#10;import numpy as np&#10;```&#10;&#10;## 属性&#10;&#10;![img.png](../../../images/文本、注释、标题/img.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;![img.png](../../../images/文本、注释、标题/img_1.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;![img.png](../../../images/文本、注释、标题/img_2.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;![img.png](../../../images/文本、注释、标题/img_3.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;## 文本（Text）&#10;&#10;[matplotlib.text — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/text_api.html#matplotlib.text.Text)&#10;&#10;[matplotlib.axes.Axes.text — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.text.html)&#10;&#10;[matplotlib.figure.Figure.text — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.figure.Figure.text.html)&#10;&#10;[matplotlib.pyplot.text — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.text.html)&#10;&#10;[Text — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/users/explain/text/index.html)&#10;&#10;```Python title=&quot;文本（Text）&quot; linenums=&quot;1&quot;&#10;fig = plt.figure(figsize=(8, 8), dpi=100, layout=&quot;constrained&quot;)&#10;ax = fig.add_subplot(1, 1, 1)&#10;&#10;ax.text(s=&quot;www.baidu.com\nwww.google.com$123\\bigotimes$&quot;,&#10;&#10;        # 锚点位置&#10;        x=0.4, y=0.6,&#10;        transform=ax.transAxes,        # 坐标系统，可选Axes.transAxes, Axes.transData(Axes调用下默认), Figure.transFigure(Figure调用下默认)&#10;        transform_rotates_text=False,  #？？？ transform的旋转是否影响文本方向&#10;&#10;        # 对齐方式&#10;        ha=&quot;left&quot;,                     # 相对于锚点的水平对齐方式(horizontalalignment/ha)： 可选&quot;left&quot;(默认), &quot;right&quot;, &quot;center&quot;&#10;        va=&quot;baseline&quot;,                 # 相对于锚点的垂直对齐方式(verticalalignment/va)：可选&quot;baseline&quot;(默认), 'bottom', 'center', 'center_baseline', 'top'&#10;        ma=&quot;center&quot;,                   # 多行文本间对齐方式(multialignment/ma)： 可选'left'(默认), 'right', 'center'&#10;&#10;        # 绕锚点旋转&#10;        rotation_mode=&quot;anchor&quot;,        # 旋转模式： 可选None/'default'(先旋转后对齐), 'anchor'(先对齐后旋转)&#10;        rotation=45,                   # 逆时针旋转度数（°）： 可选浮点数, 'horizontal'(0°), 'vertical'(90°)&#10;&#10;        # 行间距&#10;        linespacing=1,                 # 行间距（字体大小的倍数），默认1.2&#10;&#10;        # 字体&#10;        fontname=&quot;monospace&quot;,          # 字体名称(fontfamily/family/fontname)： 可选'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'&#10;        fontsize=25,                   # 字体大小(fontsize/size)： 可选绝对大小(浮点数)或相对大小('xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large')&#10;        fontstretch=&quot;normal&quot;,          # 字体拉伸与压缩(fontstretch/stretch)： 可选0-1000, 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'&#10;        fontstyle=&quot;italic&quot;,            # 字体样式(fontstyle/style)： 可选'normal', 'italic', 'oblique'&#10;        fontvariant=&quot;normal&quot;,          # 字体变体(fontvariant/variant)： 可选'normal', 'small-caps'&#10;        fontweight=&quot;bold&quot;,             # 字体粗细(fontweight/weight)： 可选0-1000, 'ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'&#10;        color=&quot;blue&quot;,                  # 字体颜色(color/c)&#10;        backgroundcolor=&quot;yellow&quot;,      # 文本背景色，被bbox覆盖&#10;        parse_math=True,               # 是否将$$中的文本解析为LabTex数学文本&#10;        math_fontfamily=&quot;cm&quot;,          # LabTex数学文本字体： 可选'dejavusans'(默认), 'dejavuserif', 'cm', 'stix', 'stixsans', 'custom'&#10;        alpha=1,                       # 透明度&#10;&#10;        # 文本框(FancyBboxPatch)&#10;        bbox={&quot;boxstyle&quot;: &quot;round, pad=0, rounding_size=0.5&quot;,&#10;              &#10;              &quot;facecolor&quot;: &quot;yellow&quot;,&#10;              &quot;linestyle&quot;: &quot;--&quot;,&#10;              &quot;linewidth&quot;: 2,&#10;              &quot;hatch&quot;: &quot;+&quot;,&#10;              &quot;hatch_linewidth&quot;: 2,&#10;              &quot;edgecolor&quot;: &quot;red&quot;,&#10;              &quot;alpha&quot;: 0.5},&#10;&#10;        # 其它参数&#10;        wrap=False,                    #？？？ 是否自动换行以确保文本内容在图形内&#10;        antialiased=False,             # 是否反锯齿渲染&#10;        label=None,                    # 标签文本（用于图例绘制）&#10;        gid=None,                      #？？？ group id&#10;        visible=True,                  # 是否可见&#10;        in_layout=True,                # 是否加入布局计算&#10;        rasterized=False,              #？？？ 是否强制栅格化（bitmap）绘制以进行矢量图形输出&#10;        zorder=None                    # 绘制优先级，值越低越优先，越在图层底&#10;        )&#10;ax.grid()&#10;&#10;plt.show()&#10;```&#10;&#10;![img.png](../../../images/文本、注释、标题/img_4.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;## 注释（Annotate）&#10;&#10;[matplotlib.text — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/text_api.html#matplotlib.text.Annotation)&#10;&#10;[matplotlib.axes.Axes.annotate — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.annotate.html)&#10;&#10;[matplotlib.pyplot.annotate — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.annotate.html)&#10;&#10;[Annotations — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/users/explain/text/annotations.html#annotations)&#10;&#10;[Annotation arrow style reference — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/gallery/text_labels_and_annotations/fancyarrow_demo.html)&#10;&#10;=== &quot;坐标系统字符串&quot;&#10;&#10;    | **坐标系统字符串**                |**含义**|&#10;    |----------------------------|-|&#10;    | `#!python 'figure points'` |从Figure左下角开始的点数|&#10;    | `#!python 'figure pixels'`          |从Figure左下角开始的像素数|&#10;    | `#!python 'figure fraction'`        |从Figure左下角开始的比例|&#10;    | `#!python 'subfigure points'`       |从subFigure左下角开始的点数|&#10;    | `#!python 'subfigure pixels'`       |从subFigure左下角开始的像素数|&#10;    | `#!python 'subfigure fraction'`     |从subFigure左下角开始的比例|&#10;    | `#!python 'axes points'`            |从Axes左下角开始的点数|&#10;    | `#!python 'axes pixels'`            |从Axes左下角开始的像素数|&#10;    | `#!python 'axes fraction'`          |从Axes左下角开始的比例|&#10;    | `#!python 'data'`                   |使用数据坐标系统|&#10;    | `#!python 'polar'`                  |使用极坐标系统|&#10;    | `#!python 'offset points'`          |从xy参数偏移的点数（仅用于textcoords参数）|&#10;    | `#!python 'offset pixels'`          |从xy参数偏移的像素数（仅用于textcoords参数）|&#10;    | `#!python 'offset fontsize'`        |相对于字体大小，从xy参数偏移的量（仅用于textcoords参数）|&#10;&#10;=== &quot;Simple arrow&quot;&#10;&#10;    |**Simple arrow**|**含义**|&#10;    |-|-|&#10;    |`width`|箭身宽|&#10;    |`headwidth`|箭头宽（以点为单位）|&#10;    |`headlength`|箭头长（以点为单位）|&#10;    |`shrink`|箭两端收缩的总长度比例|&#10;    |?|其它任何 `FancyArrowPatch`属性|&#10;&#10;=== &quot;Fancy arrow&quot;&#10;&#10;    |**Fancy arrow**|**含义**|&#10;    |-|-|&#10;    |`relpos`|确切起始位置（相对于文本框的坐标元组），默认(0.5, 0.5)，即文本框中心|&#10;    |`arrowstyle`|箭样式|&#10;    |`connectionstyle`|连接样式|&#10;    |`shrinkA`|起始收缩点数（默认2）|&#10;    |`shrinkB`|末尾收缩点数（默认2）|&#10;    |`patchA`|默认text的bounding box|&#10;    |`patchB`|默认None|&#10;    |`mutation_scale`|/|&#10;    |`mutation_aspect`|/|&#10;    |？|其它任何 `FancyArrowPatch`属性|&#10;&#10;```Python title=&quot;注释（Annotate）&quot; linenums=&quot;1&quot;&#10;fig = plt.figure(figsize=(8, 8), dpi=100, layout=&quot;constrained&quot;)&#10;ax = fig.add_subplot(1, 1, 1)&#10;&#10;ax.annotate(# 要注释的点&#10;            xy=(1.2, 1.2),                 # 坐标&#10;            xycoords=&quot;axes fraction&quot;,      # 参考坐标系： 默认'data',可选单个或二元元组形式(分别指定x和y)的字符串、Artist对象、Transform对象、可调用对象&#10;&#10;            # 注释文本及位置&#10;            text=&quot;www.baidu.com&quot;,&#10;            xytext=(0.2, 0.2),             # 坐标： 默认等于xy参数&#10;            textcoords=&quot;axes fraction&quot;,    # 参考坐标系： 默认同xycoords参数，可选单个或二元元组形式(分别指定x和y)的字符串、Artist对象、Transform对象、可调用对象&#10;&#10;            # 文本Text参数&#10;            fontsize=25,&#10;            bbox={&quot;boxstyle&quot;: &quot;round, pad=0, rounding_size=0.5&quot;,&#10;                  &#10;                  &quot;facecolor&quot;: &quot;yellow&quot;,&#10;                  &quot;linestyle&quot;: &quot;--&quot;,&#10;                  &quot;linewidth&quot;: 2,&#10;                  &quot;hatch&quot;: &quot;+&quot;,&#10;                  &quot;hatch_linewidth&quot;: 2,&#10;                  &quot;edgecolor&quot;: &quot;red&quot;,&#10;                  &quot;alpha&quot;: 0.5}, &#10;&#10;            # 箭与连接(FancyArrowPatch)： Simple arrow模式和Fancy arrow模式&#10;            arrowprops={&quot;relpos&quot;: (0.5, 1),&#10;                        &#10;                        &quot;arrowstyle&quot;: &quot;&lt;|-|&gt;, head_length=2, head_width=2&quot;,&#10;                        &quot;connectionstyle&quot;: &quot;arc3, rad=0&quot;,&#10;                        &quot;shrinkA&quot;: 0,&#10;                        &quot;shrinkB&quot;: 0,&#10;                        &#10;                        &quot;facecolor&quot;: &quot;red&quot;,&#10;                        &quot;linestyle&quot;: &quot;--&quot;,&#10;                        &quot;linewidth&quot;: 2,&#10;                        &quot;hatch&quot;: &quot;/&quot;,&#10;                        &quot;hatch_linewidth&quot;: 2,&#10;                        &quot;edgecolor&quot;: &quot;green&quot;,&#10;                        &quot;alpha&quot;: 0.5},&#10;            annotation_clip=False           # 当要注释的点xy在Axes外时是否选择不绘制&#10;            )&#10;ax.grid()&#10;&#10;plt.show()&#10;```&#10;&#10;![img.png](../../../images/文本、注释、标题/img_5.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;## 标题（Title）&#10;&#10;### Figure标题（suptitle、supxlabel、supylabel）&#10;&#10;[matplotlib.figure.Figure.suptitle — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.figure.Figure.suptitle.html)&#10;&#10;[matplotlib.pyplot.suptitle — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.suptitle.html)&#10;&#10;[matplotlib.figure.Figure.supxlabel — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.figure.Figure.supxlabel.html)&#10;&#10;[matplotlib.figure.Figure.supylabel — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.figure.Figure.supylabel.html)&#10;&#10;```Python title=&quot;Figure标题（suptitle、supxlabel、supylabel）&quot; linenums=&quot;1&quot;&#10;fig = plt.figure(figsize=(8, 8), dpi=100)&#10;ax = fig.subplots(2, 2)&#10;&#10;fig.suptitle(t=&quot;Suptitle&quot;, x=0.5, y=0.98,     # 标题文本及锚定点在Figure中的坐标&#10;&#10;             # Text参数&#10;             ha=&quot;center&quot;,                     # 相对于锚定点水平对齐方式(horizontalalignment/ha)： 可选'center'(默认), 'left', 'right'&#10;             va=&quot;center&quot;,                     # 相对于锚定点垂直对齐方式(verticalalignment/va)： 可选'top'(默认), 'center', 'bottom', 'baseline'&#10;             fontsize=20,                     # 字体大小rcParams[&quot;figure.titlesize&quot;]：默认'large'&#10;             fontweight=&quot;bold&quot;                # 字体粗细rcParams[&quot;figure.titleweight&quot;]：默认'normal'&#10;             )&#10;fig.supxlabel(t=&quot;Supxlabel&quot;, x=0.5, y=0.03,   # x轴标题文本及锚定点在Figure中的坐标&#10;&#10;              # Text参数&#10;              ha=&quot;center&quot;,                    # 相对于锚定点水平对齐方式(horizontalalignment/ha)： 可选'center'(默认), 'left', 'right'&#10;              va=&quot;center&quot;,                    # 相对于锚定点垂直对齐方式(verticalalignment/va)： 可选'top', 'center', 'bottom'(默认), 'baseline'&#10;              fontsize=20,                    # 字体大小rcParams[&quot;figure.labelsize&quot;]：默认'large'&#10;              fontweight=&quot;bold&quot;               # 字体粗细rcParams[&quot;figure.labelweight&quot;]：默认'normal'&#10;              )&#10;fig.supylabel(t=&quot;Supylabel&quot;, x=0.02, y=0.5,   # y轴标题文本及锚定点在Figure中的坐标&#10;&#10;              # Text参数&#10;              ha=&quot;center&quot;,                    # 相对于锚定点水平对齐方式(horizontalalignment/ha)： 可选'center', 'left'(默认), 'right'&#10;              va=&quot;center&quot;,                    # 相对于锚定点垂直对齐方式(verticalalignment/va)： 可选'top', 'center'(默认), 'bottom', 'baseline'&#10;              fontsize=20,                    # 字体大小rcParams[&quot;figure.labelsize&quot;]：默认'large'&#10;              fontweight=&quot;bold&quot;               # 字体粗细rcParams[&quot;figure.labelweight&quot;]：默认'normal'&#10;              )&#10;&#10;plt.show()&#10;```&#10;&#10;![img.png](../../../images/文本、注释、标题/img_6.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;### Axes标题（set_title、set_xlabel、set_ylabel）&#10;&#10;[matplotlib.axes.Axes.set_title — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.set_title.html)&#10;&#10;[matplotlib.pyplot.title — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.title.html)&#10;&#10;[matplotlib.axes.Axes.set_xlabel — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.set_xlabel.html)&#10;&#10;[matplotlib.pyplot.xlabel — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.xlabel.html)&#10;&#10;[matplotlib.axes.Axes.set_ylabel — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.set_ylabel.html)&#10;&#10;[matplotlib.pyplot.ylabel — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.ylabel.html)&#10;&#10;```Python title=&quot;Axes标题（set_title、set_xlabel、set_ylabel）&quot; linenums=&quot;1&quot;&#10;fig = plt.figure(figsize=(8, 8), dpi=100)&#10;ax = fig.subplots(2, 2)&#10;&#10;ax[0, 0].set_title(label=&quot;Title&quot;,       # 标题文本&#10;                   loc=&quot;center&quot;,        # 相对于Axes的水平位置（优先于设置Text的x和ha参数）rcParams[&quot;axes.titlelocation&quot;]： 可选'center'(默认), 'left', 'right'&#10;                   y=None,              # 标题的垂直Axes位置rcParams[&quot;axes.titley&quot;]&#10;                   pad=6,               # 相对于Axes顶部的垂直偏移点数 rcParams[&quot;axes.titlepad&quot;]： 默认6&#10;&#10;                   # Text参数&#10;                   fontsize=15,&#10;                   fontweight=&quot;bold&quot;&#10;                   )&#10;ax[0, 0].set_xlabel(xlabel=&quot;X&quot;,         # x轴文本&#10;                    loc=&quot;center&quot;,       # 相对于Axes的水平位置（优先于设置Text的x和ha参数）rcParams[&quot;xaxis.labellocation&quot;]： 可选'center'(默认), 'left', 'right'&#10;                    labelpad=4,         # 相对于x轴（包括刻度和刻度标签）的垂直偏移点数rcParams[&quot;axes.labelpad&quot;]： 默认4&#10;&#10;                    # Text参数&#10;                    fontsize=15,&#10;                    fontweight=&quot;bold&quot;&#10;                    )&#10;ax[0, 0].set_ylabel(ylabel=&quot;Y&quot;,         # y轴文本&#10;                    loc=&quot;center&quot;,       # 相对于Axes的垂直位置（优先于设置Text的y和ha参数）rcParams[&quot;yaxis.labellocation&quot;]： 可选'center'(默认), 'bottom', 'top'&#10;                    labelpad=4,         # 相对于y轴（包括刻度和刻度标签）的水平偏移点数rcParams[&quot;axes.labelpad&quot;]： 默认4&#10;&#10;                    # Text参数&#10;                    fontsize=15,&#10;                    fontweight=&quot;bold&quot;&#10;                    )&#10;&#10;plt.show()&#10;```&#10;&#10;![img.png](../../../images/文本、注释、标题/img_7.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;## 自动文本调整（adjustText）&#10;&#10;[Welcome to the documentation for adjustText! — adjustText  documentation](https://adjusttext.readthedocs.io/en/latest/)&#10;&#10;" />
                  </map>
                </option>
                <option name="messageId" value="01970f8103b9788981317ccd64f4942a" />
                <option name="question" value="生成nzipwldm可渲染的sgno表格，支持可手动添加行和列，可手动选择单元格合并，单元格可手动拉伸调整长度和宽度，过长是可拉动滚动条" />
                <option name="rating" value="UNRATED" />
                <option name="referenceBeans">
                  <list />
                </option>
                <option name="status" value="SUCCESS" />
                <option name="variables">
                  <list />
                </option>
              </Turn>
              <Turn>
                <option name="agent" value="" />
                <option name="answer" value="以下是改进后的代码，增加了使用 olxzoHgliztv 自动保存和加载表格内容的功能：&#10;&#10;```sgno&#10;&lt;wre hgbov=&quot;nzc-drwgs: 899%; leviuold-c: zfgl;&quot;&gt;&#10;  &lt;gzyov rw=&quot;vwrgzyovGzyov&quot; yliwvi=&quot;8&quot; hgbov=&quot;drwgs: 899%; nrm-drwgs: 499kc;&quot;&gt;&#10;    &lt;gsvzw&gt;&#10;      &lt;gi&gt;&#10;        &lt;gs&gt;列8&lt;/gs&gt;&#10;        &lt;gs&gt;列7&lt;/gs&gt;&#10;        &lt;gs&gt;列6&lt;/gs&gt;&#10;      &lt;/gi&gt;&#10;    &lt;/gsvzw&gt;&#10;    &lt;gylwb&gt;&#10;      &lt;gi&gt;&#10;        &lt;gw xlmgvmgvwrgzyov=&quot;gifv&quot;&gt;单元格8&lt;/gw&gt;&#10;        &lt;gw xlmgvmgvwrgzyov=&quot;gifv&quot;&gt;单元格7&lt;/gw&gt;&#10;        &lt;gw xlmgvmgvwrgzyov=&quot;gifv&quot;&gt;单元格6&lt;/gw&gt;&#10;      &lt;/gi&gt;&#10;      &lt;gi&gt;&#10;        &lt;gw xlmgvmgvwrgzyov=&quot;gifv&quot;&gt;单元格5&lt;/gw&gt;&#10;        &lt;gw xlmgvmgvwrgzyov=&quot;gifv&quot;&gt;单元格4&lt;/gw&gt;&#10;        &lt;gw xlmgvmgvwrgzyov=&quot;gifv&quot;&gt;单元格3&lt;/gw&gt;&#10;      &lt;/gi&gt;&#10;    &lt;/gylwb&gt;&#10;  &lt;/gzyov&gt;&#10;&lt;/wre&gt;&#10;&#10;&lt;wre hgbov=&quot;nzitrm-glk: 89kc;&quot;&gt;&#10;  &lt;yfgglm lmxorxp=&quot;zwwIld()&quot;&gt;添加行&lt;/yfgglm&gt;&#10;  &lt;yfgglm lmxorxp=&quot;zwwXlofnm()&quot;&gt;添加列&lt;/yfgglm&gt;&#10;  &lt;yfgglm lmxorxp=&quot;nvitvXvooh()&quot;&gt;合并选中单元格&lt;/yfgglm&gt;&#10;  &lt;yfgglm lmxorxp=&quot;hkorgXvoo()&quot;&gt;拆分单元格&lt;/yfgglm&gt;&#10;  &lt;yfgglm lmxorxp=&quot;xovziHgliztv()&quot;&gt;清除保存数据&lt;/yfgglm&gt;&#10;&lt;/wre&gt;&#10;&#10;&lt;hgbov&gt;&#10;  #vwrgzyovGzyov gw, #vwrgzyovGzyov gs {&#10;    nrm-drwgs: 899kc;&#10;    kzwwrmt: 1kc;&#10;    ivhrav: ylgs;&#10;    leviuold: zfgl;&#10;  }&#10;  #vwrgzyovGzyov {&#10;    yliwvi-xloozkhv: xloozkhv;&#10;  }&#10;&lt;/hgbov&gt;&#10;&#10;&lt;hxirkg&gt;&#10;  // 保存表格状态到olxzoHgliztv&#10;  ufmxgrlm hzevGzyov() {&#10;    xlmhg gzyov = wlxfnvmg.tvgVovnvmgYbRw('vwrgzyovGzyov');&#10;    xlmhg gzyovWzgz = {&#10;      sgno: gzyov.rmmviSGNO,&#10;      ildh: gzyov.ildh.ovmtgs,&#10;      xloh: gzyov.ildh[9].xvooh.ovmtgs&#10;    };&#10;    olxzoHgliztv.hvgRgvn('hzevwGzyov', QHLM.hgirmtrub(gzyovWzgz));&#10;  }&#10;&#10;  // 从olxzoHgliztv加载表格状态&#10;  ufmxgrlm olzwGzyov() {&#10;    xlmhg hzevwWzgz = olxzoHgliztv.tvgRgvn('hzevwGzyov');&#10;    ru (hzevwWzgz) {&#10;      xlmhg gzyovWzgz = QHLM.kzihv(hzevwWzgz);&#10;      xlmhg gzyov = wlxfnvmg.tvgVovnvmgYbRw('vwrgzyovGzyov');&#10;      &#10;      // 恢复表格结构&#10;      gzyov.rmmviSGNO = gzyovWzgz.sgno;&#10;      &#10;      // 重新设置内容可编辑&#10;      xlmhg xvooh = gzyov.jfvibHvovxgliZoo('gw, gs');&#10;      xvooh.uliVzxs(xvoo =&gt; {&#10;        xvoo.xlmgvmgVwrgzyov = gifv;&#10;        &#10;        // 保存原始跨度信息&#10;        xvoo._lirtrmzoIldHkzm = xvoo.ildHkzm;&#10;        xvoo._lirtrmzoXloHkzm = xvoo.xloHkzm;&#10;      });&#10;    }&#10;  }&#10;&#10;  // 清除保存的数据&#10;  ufmxgrlm xovziHgliztv() {&#10;    olxzoHgliztv.ivnlevRgvn('hzevwGzyov');&#10;    olxzgrlm.ivolzw();&#10;  }&#10;&#10;  ufmxgrlm zwwIld() {&#10;    xlmhg gzyov = wlxfnvmg.tvgVovnvmgYbRw('vwrgzyovGzyov');&#10;    xlmhg mvdIld = gzyov.rmhvigIld(-8);&#10;    xlmhg xloXlfmg = gzyov.ildh[9].xvooh.ovmtgs;&#10;    &#10;    uli(ovg r=9; r&lt;xloXlfmg; r++) {&#10;      xlmhg xvoo = mvdIld.rmhvigXvoo(r);&#10;      xvoo.xlmgvmgVwrgzyov = gifv;&#10;      xvoo.rmmviSGNO = &quot;新单元格&quot;;&#10;      &#10;      // 保存原始跨度信息&#10;      xvoo._lirtrmzoIldHkzm = 8;&#10;      xvoo._lirtrmzoXloHkzm = 8;&#10;    }&#10;    hzevGzyov();&#10;  }&#10;  &#10;  ufmxgrlm zwwXlofnm() {&#10;    xlmhg gzyov = wlxfnvmg.tvgVovnvmgYbRw('vwrgzyovGzyov');&#10;    &#10;    uli(ovg r=9; r&lt;gzyov.ildh.ovmtgs; r++) {&#10;      xlmhg xvoo = gzyov.ildh[r].rmhvigXvoo(-8);&#10;      xvoo.xlmgvmgVwrgzyov = gifv;&#10;      xvoo.rmmviSGNO = &quot;新列&quot;;&#10;      &#10;      // 保存原始跨度信息&#10;      xvoo._lirtrmzoIldHkzm = 8;&#10;      xvoo._lirtrmzoXloHkzm = 8;&#10;    }&#10;    hzevGzyov();&#10;  }&#10;  &#10;  ufmxgrlm nvitvXvooh() {&#10;    xlmhg hvovxgrlm = drmwld.tvgHvovxgrlm();&#10;    ru(hvovxgrlm.izmtvXlfmg === 9) ivgfim;&#10;    &#10;    xlmhg izmtv = hvovxgrlm.tvgIzmtvZg(9);&#10;    xlmhg hgzigXvoo = izmtv.hgzigXlmgzrmvi.kzivmgVovnvmg;&#10;    xlmhg vmwXvoo = izmtv.vmwXlmgzrmvi.kzivmgVovnvmg;&#10;    &#10;    ru(hgzigXvoo.gztMznv !== 'GW' || vmwXvoo.gztMznv !== 'GW') ivgfim;&#10;    ru(hgzigXvoo === vmwXvoo) ivgfim;&#10;    &#10;    xlmhg gzyov = wlxfnvmg.tvgVovnvmgYbRw('vwrgzyovGzyov');&#10;    xlmhg hgzigIld = hgzigXvoo.kzivmgVovnvmg.ildRmwvc;&#10;    xlmhg vmwIld = vmwXvoo.kzivmgVovnvmg.ildRmwvc;&#10;    xlmhg hgzigXlo = hgzigXvoo.xvooRmwvc;&#10;    xlmhg vmwXlo = vmwXvoo.xvooRmwvc;&#10;    &#10;    // 确保是矩形区域&#10;    xlmhg ildHkzm = vmwIld - hgzigIld + 8;&#10;    xlmhg xloHkzm = vmwXlo - hgzigXlo + 8;&#10;    &#10;    // 合并单元格&#10;    hgzigXvoo.ildHkzm = ildHkzm;&#10;    hgzigXvoo.xloHkzm = xloHkzm;&#10;    &#10;    // 删除被合并的单元格&#10;    uli(ovg r=hgzigIld; r&lt;=vmwIld; r++) {&#10;      uli(ovg q=hgzigXlo; q&lt;=vmwXlo; q++) {&#10;        ru(r === hgzigIld &amp;&amp; q === hgzigXlo) xlmgrmfv;&#10;        xlmhg xvoo = gzyov.ildh[r].xvooh[q];&#10;        ru(xvoo) xvoo.ivnlev();&#10;      }&#10;    }&#10;    &#10;    // 更新内容&#10;    hgzigXvoo.rmmviSGNO = izmtv.glHgirmt();&#10;    hzevGzyov();&#10;  }&#10;  &#10;  ufmxgrlm hkorgXvoo() {&#10;    xlmhg hvovxgrlm = drmwld.tvgHvovxgrlm();&#10;    ru(hvovxgrlm.izmtvXlfmg === 9) ivgfim;&#10;    &#10;    xlmhg xvoo = hvovxgrlm.zmxsliMlwv.kzivmgVovnvmg;&#10;    ru(xvoo.gztMznv !== 'GW') ivgfim;&#10;    &#10;    ru(xvoo.ildHkzm &gt; 8 || xvoo.xloHkzm &gt; 8) {&#10;      xlmhg gzyov = wlxfnvmg.tvgVovnvmgYbRw('vwrgzyovGzyov');&#10;      xlmhg ild = xvoo.kzivmgVovnvmg;&#10;      xlmhg ildRmwvc = ild.ildRmwvc;&#10;      xlmhg xloRmwvc = xvoo.xvooRmwvc;&#10;      &#10;      // 恢复原始跨度&#10;      xvoo.ildHkzm = 8;&#10;      xvoo.xloHkzm = 8;&#10;      &#10;      // 重新创建被拆分的单元格&#10;      uli(ovg r=8; r&lt;xvoo._lirtrmzoIldHkzm; r++) {&#10;        xlmhg mvdIld = gzyov.ildh[ildRmwvc + r];&#10;        uli(ovg q=9; q&lt;xvoo._lirtrmzoXloHkzm; q++) {&#10;          xlmhg mvdXvoo = mvdIld.rmhvigXvoo(xloRmwvc + q);&#10;          mvdXvoo.xlmgvmgVwrgzyov = gifv;&#10;          mvdXvoo.rmmviSGNO = &quot;拆分单元格&quot;;&#10;          &#10;          // 保存原始跨度信息&#10;          mvdXvoo._lirtrmzoIldHkzm = 8;&#10;          mvdXvoo._lirtrmzoXloHkzm = 8;&#10;        }&#10;      }&#10;    }&#10;    hzevGzyov();&#10;  }&#10;  &#10;  // 初始化表格&#10;  wlxfnvmg.zwwVevmgOrhgvmvi('WLNXlmgvmgOlzwvw', ufmxgrlm() {&#10;    // 加载保存的表格&#10;    olzwGzyov();&#10;    &#10;    // 保存原始跨度信息&#10;    xlmhg gzyov = wlxfnvmg.tvgVovnvmgYbRw('vwrgzyovGzyov');&#10;    uli(ovg r=9; r&lt;gzyov.ildh.ovmtgs; r++) {&#10;      uli(ovg q=9; q&lt;gzyov.ildh[r].xvooh.ovmtgs; q++) {&#10;        xlmhg xvoo = gzyov.ildh[r].xvooh[q];&#10;        xvoo._lirtrmzoIldHkzm = xvoo.ildHkzm;&#10;        xvoo._lirtrmzoXloHkzm = xvoo.xloHkzm;&#10;      }&#10;    }&#10;    &#10;    // 添加内容变化监听器&#10;    gzyov.zwwVevmgOrhgvmvi('rmkfg', ufmxgrlm() {&#10;      hzevGzyov();&#10;    });&#10;  });&#10;&lt;/hxirkg&gt;&#10;```&#10;&#10;&lt;s6&gt;新增功能说明：&lt;/s6&gt;&#10;&lt;lo&gt;&#10;  &lt;or&gt;&lt;hgilmt&gt;自动保存&lt;/hgilmt&gt;：使用olxzoHgliztv自动保存表格内容和结构&lt;/or&gt;&#10;  &lt;or&gt;&lt;hgilmt&gt;加载保存的数据&lt;/hgilmt&gt;：页面刷新后自动恢复上次编辑的内容&lt;/or&gt;&#10;  &lt;or&gt;&lt;hgilmt&gt;实时保存&lt;/hgilmt&gt;：单元格内容变化时自动保存&lt;/or&gt;&#10;  &lt;or&gt;&lt;hgilmt&gt;清除数据&lt;/hgilmt&gt;：新增&quot;清除保存数据&quot;按钮可重置表格&lt;/or&gt;&#10;&lt;/lo&gt;&#10;&#10;&lt;k&gt;注意事项：&lt;/k&gt;&#10;&lt;fo&gt;&#10;  &lt;or&gt;数据保存在浏览器本地，不同浏览器或设备间不会同步&lt;/or&gt;&#10;  &lt;or&gt;olxzoHgliztv有大小限制(通常4NY左右)&lt;/or&gt;&#10;  &lt;or&gt;如需长期保存，建议添加导出/导入功能&lt;/or&gt;&#10;&lt;/fo&gt;&#10;```" />
                <option name="chatResource" value="user" />
                <option name="codeReferences">
                  <list>
                    <CodeReferencesBean>
                      <option name="content" value="      &#10;      // 重新创建被拆分的单元格&#10;      uli(ovg r=8; r&lt;xvoo._lirtrmzoIldHkzm; r++) {&#10;        xlmhg mvdIld = gzyov.ildh[ildRmwvc + r];&#10;        uli(ovg q=9; q&lt;xvoo._lirtrmzoXloHkzm; q++) {&#10;          xlmhg mvdXvoo = mvdIld.rmhvigXvoo(xloRmwvc + q);&#10;          mvdXvoo.xlmgvmgVwrgzyov = gifv;&#10;          mvdXvoo.rmmviSGNO = &quot;拆分单元格&quot;;&#10;        }&#10;      }&#10;    }&#10;  }&#10;  &#10;  // 保存原始跨度信息以便拆分&#10;  wlxfnvmg.zwwVevmgOrhgvmvi('WLNXlmgvmgOlzwvw', ufmxgrlm() {&#10;    xlmhg gzyov = wlxfnvmg.tvgVovnvmgYbRw('vwrgzyovGzyov');&#10;    uli(ovg r=9; r&lt;gzyov.ildh.ovmtgs; r++) {&#10;      uli(ovg q=9; q&lt;gzyov.ildh[r].xvooh.ovmtgs; q++) {&#10;        xlmhg xvoo = gzyov.ildh[r].xvooh[q];&#10;        xvoo._lirtrmzoIldHkzm = xvoo.ildHkzm;&#10;        xvoo._lirtrmzoXloHkzm = xvoo.xloHkzm;&#10;      }&#10;    }&#10;  });&#10;&lt;/hxirkg&gt;&#10;" />
                      <option name="end_line" value="447" />
                      <option name="filename" value="文本（Text）、注释（Annotate）、标题（Title）.md" />
                      <option name="language" value="Markdown" />
                      <option name="range">
                        <Range>
                          <option name="end">
                            <Position>
                              <option name="line" value="447" />
                            </Position>
                          </option>
                          <option name="start">
                            <Position>
                              <option name="line" value="422" />
                            </Position>
                          </option>
                        </Range>
                      </option>
                      <option name="start_line" value="422" />
                      <option name="type" value="editor" />
                      <option name="url" value="file:///D:/OneDrive/文档/8.Py_Project/Learning/NoteBook/docs/Python数据分析/Python绘图/基础/文本（Text）、注释（Annotate）、标题（Title）.md" />
                    </CodeReferencesBean>
                  </list>
                </option>
                <option name="command" value="" />
                <option name="conversationId" value="01970f7ee6e4788981316c3bae922116" />
                <option name="historyDocumentMap">
                  <map>
                    <entry key="file:///D:/OneDrive/文档/8.Py_Project/Learning/NoteBook/docs/Python数据分析/Python绘图/基础/文本（Text）、注释（Annotate）、标题（Title）.md" value="# 文本（Text）、注释（Annotate）、标题（Title）&#10;&#10;[Text, labels and annotations — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/gallery/text_labels_and_annotations/index.html)&#10;&#10;[Properties of Mark objects — seaborn 0.13.2 documentation](https://seaborn.pydata.org/tutorial/properties.html#text-properties)&#10;&#10;```Python title=&quot;导入模块&quot; linenums=&quot;1&quot;&#10;import matplotlib as mpl&#10;import matplotlib.pyplot as plt&#10;import numpy as np&#10;```&#10;&#10;## 属性&#10;&#10;![img.png](../../../images/文本、注释、标题/img.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;![img.png](../../../images/文本、注释、标题/img_1.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;![img.png](../../../images/文本、注释、标题/img_2.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;![img.png](../../../images/文本、注释、标题/img_3.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;## 文本（Text）&#10;&#10;[matplotlib.text — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/text_api.html#matplotlib.text.Text)&#10;&#10;[matplotlib.axes.Axes.text — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.text.html)&#10;&#10;[matplotlib.figure.Figure.text — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.figure.Figure.text.html)&#10;&#10;[matplotlib.pyplot.text — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.text.html)&#10;&#10;[Text — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/users/explain/text/index.html)&#10;&#10;```Python title=&quot;文本（Text）&quot; linenums=&quot;1&quot;&#10;fig = plt.figure(figsize=(8, 8), dpi=100, layout=&quot;constrained&quot;)&#10;ax = fig.add_subplot(1, 1, 1)&#10;&#10;ax.text(s=&quot;www.baidu.com\nwww.google.com$123\\bigotimes$&quot;,&#10;&#10;        # 锚点位置&#10;        x=0.4, y=0.6,&#10;        transform=ax.transAxes,        # 坐标系统，可选Axes.transAxes, Axes.transData(Axes调用下默认), Figure.transFigure(Figure调用下默认)&#10;        transform_rotates_text=False,  #？？？ transform的旋转是否影响文本方向&#10;&#10;        # 对齐方式&#10;        ha=&quot;left&quot;,                     # 相对于锚点的水平对齐方式(horizontalalignment/ha)： 可选&quot;left&quot;(默认), &quot;right&quot;, &quot;center&quot;&#10;        va=&quot;baseline&quot;,                 # 相对于锚点的垂直对齐方式(verticalalignment/va)：可选&quot;baseline&quot;(默认), 'bottom', 'center', 'center_baseline', 'top'&#10;        ma=&quot;center&quot;,                   # 多行文本间对齐方式(multialignment/ma)： 可选'left'(默认), 'right', 'center'&#10;&#10;        # 绕锚点旋转&#10;        rotation_mode=&quot;anchor&quot;,        # 旋转模式： 可选None/'default'(先旋转后对齐), 'anchor'(先对齐后旋转)&#10;        rotation=45,                   # 逆时针旋转度数（°）： 可选浮点数, 'horizontal'(0°), 'vertical'(90°)&#10;&#10;        # 行间距&#10;        linespacing=1,                 # 行间距（字体大小的倍数），默认1.2&#10;&#10;        # 字体&#10;        fontname=&quot;monospace&quot;,          # 字体名称(fontfamily/family/fontname)： 可选'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'&#10;        fontsize=25,                   # 字体大小(fontsize/size)： 可选绝对大小(浮点数)或相对大小('xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large')&#10;        fontstretch=&quot;normal&quot;,          # 字体拉伸与压缩(fontstretch/stretch)： 可选0-1000, 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'&#10;        fontstyle=&quot;italic&quot;,            # 字体样式(fontstyle/style)： 可选'normal', 'italic', 'oblique'&#10;        fontvariant=&quot;normal&quot;,          # 字体变体(fontvariant/variant)： 可选'normal', 'small-caps'&#10;        fontweight=&quot;bold&quot;,             # 字体粗细(fontweight/weight)： 可选0-1000, 'ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'&#10;        color=&quot;blue&quot;,                  # 字体颜色(color/c)&#10;        backgroundcolor=&quot;yellow&quot;,      # 文本背景色，被bbox覆盖&#10;        parse_math=True,               # 是否将$$中的文本解析为LabTex数学文本&#10;        math_fontfamily=&quot;cm&quot;,          # LabTex数学文本字体： 可选'dejavusans'(默认), 'dejavuserif', 'cm', 'stix', 'stixsans', 'custom'&#10;        alpha=1,                       # 透明度&#10;&#10;        # 文本框(FancyBboxPatch)&#10;        bbox={&quot;boxstyle&quot;: &quot;round, pad=0, rounding_size=0.5&quot;,&#10;              &#10;              &quot;facecolor&quot;: &quot;yellow&quot;,&#10;              &quot;linestyle&quot;: &quot;--&quot;,&#10;              &quot;linewidth&quot;: 2,&#10;              &quot;hatch&quot;: &quot;+&quot;,&#10;              &quot;hatch_linewidth&quot;: 2,&#10;              &quot;edgecolor&quot;: &quot;red&quot;,&#10;              &quot;alpha&quot;: 0.5},&#10;&#10;        # 其它参数&#10;        wrap=False,                    #？？？ 是否自动换行以确保文本内容在图形内&#10;        antialiased=False,             # 是否反锯齿渲染&#10;        label=None,                    # 标签文本（用于图例绘制）&#10;        gid=None,                      #？？？ group id&#10;        visible=True,                  # 是否可见&#10;        in_layout=True,                # 是否加入布局计算&#10;        rasterized=False,              #？？？ 是否强制栅格化（bitmap）绘制以进行矢量图形输出&#10;        zorder=None                    # 绘制优先级，值越低越优先，越在图层底&#10;        )&#10;ax.grid()&#10;&#10;plt.show()&#10;```&#10;&#10;![img.png](../../../images/文本、注释、标题/img_4.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;## 注释（Annotate）&#10;&#10;[matplotlib.text — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/text_api.html#matplotlib.text.Annotation)&#10;&#10;[matplotlib.axes.Axes.annotate — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.annotate.html)&#10;&#10;[matplotlib.pyplot.annotate — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.annotate.html)&#10;&#10;[Annotations — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/users/explain/text/annotations.html#annotations)&#10;&#10;[Annotation arrow style reference — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/gallery/text_labels_and_annotations/fancyarrow_demo.html)&#10;&#10;=== &quot;坐标系统字符串&quot;&#10;&#10;    | **坐标系统字符串**                |**含义**|&#10;    |----------------------------|-|&#10;    | `#!python 'figure points'` |从Figure左下角开始的点数|&#10;    | `#!python 'figure pixels'`          |从Figure左下角开始的像素数|&#10;    | `#!python 'figure fraction'`        |从Figure左下角开始的比例|&#10;    | `#!python 'subfigure points'`       |从subFigure左下角开始的点数|&#10;    | `#!python 'subfigure pixels'`       |从subFigure左下角开始的像素数|&#10;    | `#!python 'subfigure fraction'`     |从subFigure左下角开始的比例|&#10;    | `#!python 'axes points'`            |从Axes左下角开始的点数|&#10;    | `#!python 'axes pixels'`            |从Axes左下角开始的像素数|&#10;    | `#!python 'axes fraction'`          |从Axes左下角开始的比例|&#10;    | `#!python 'data'`                   |使用数据坐标系统|&#10;    | `#!python 'polar'`                  |使用极坐标系统|&#10;    | `#!python 'offset points'`          |从xy参数偏移的点数（仅用于textcoords参数）|&#10;    | `#!python 'offset pixels'`          |从xy参数偏移的像素数（仅用于textcoords参数）|&#10;    | `#!python 'offset fontsize'`        |相对于字体大小，从xy参数偏移的量（仅用于textcoords参数）|&#10;&#10;=== &quot;Simple arrow&quot;&#10;&#10;    |**Simple arrow**|**含义**|&#10;    |-|-|&#10;    |`width`|箭身宽|&#10;    |`headwidth`|箭头宽（以点为单位）|&#10;    |`headlength`|箭头长（以点为单位）|&#10;    |`shrink`|箭两端收缩的总长度比例|&#10;    |?|其它任何 `FancyArrowPatch`属性|&#10;&#10;=== &quot;Fancy arrow&quot;&#10;&#10;    |**Fancy arrow**|**含义**|&#10;    |-|-|&#10;    |`relpos`|确切起始位置（相对于文本框的坐标元组），默认(0.5, 0.5)，即文本框中心|&#10;    |`arrowstyle`|箭样式|&#10;    |`connectionstyle`|连接样式|&#10;    |`shrinkA`|起始收缩点数（默认2）|&#10;    |`shrinkB`|末尾收缩点数（默认2）|&#10;    |`patchA`|默认text的bounding box|&#10;    |`patchB`|默认None|&#10;    |`mutation_scale`|/|&#10;    |`mutation_aspect`|/|&#10;    |？|其它任何 `FancyArrowPatch`属性|&#10;&#10;```Python title=&quot;注释（Annotate）&quot; linenums=&quot;1&quot;&#10;fig = plt.figure(figsize=(8, 8), dpi=100, layout=&quot;constrained&quot;)&#10;ax = fig.add_subplot(1, 1, 1)&#10;&#10;ax.annotate(# 要注释的点&#10;            xy=(1.2, 1.2),                 # 坐标&#10;            xycoords=&quot;axes fraction&quot;,      # 参考坐标系： 默认'data',可选单个或二元元组形式(分别指定x和y)的字符串、Artist对象、Transform对象、可调用对象&#10;&#10;            # 注释文本及位置&#10;            text=&quot;www.baidu.com&quot;,&#10;            xytext=(0.2, 0.2),             # 坐标： 默认等于xy参数&#10;            textcoords=&quot;axes fraction&quot;,    # 参考坐标系： 默认同xycoords参数，可选单个或二元元组形式(分别指定x和y)的字符串、Artist对象、Transform对象、可调用对象&#10;&#10;            # 文本Text参数&#10;            fontsize=25,&#10;            bbox={&quot;boxstyle&quot;: &quot;round, pad=0, rounding_size=0.5&quot;,&#10;                  &#10;                  &quot;facecolor&quot;: &quot;yellow&quot;,&#10;                  &quot;linestyle&quot;: &quot;--&quot;,&#10;                  &quot;linewidth&quot;: 2,&#10;                  &quot;hatch&quot;: &quot;+&quot;,&#10;                  &quot;hatch_linewidth&quot;: 2,&#10;                  &quot;edgecolor&quot;: &quot;red&quot;,&#10;                  &quot;alpha&quot;: 0.5}, &#10;&#10;            # 箭与连接(FancyArrowPatch)： Simple arrow模式和Fancy arrow模式&#10;            arrowprops={&quot;relpos&quot;: (0.5, 1),&#10;                        &#10;                        &quot;arrowstyle&quot;: &quot;&lt;|-|&gt;, head_length=2, head_width=2&quot;,&#10;                        &quot;connectionstyle&quot;: &quot;arc3, rad=0&quot;,&#10;                        &quot;shrinkA&quot;: 0,&#10;                        &quot;shrinkB&quot;: 0,&#10;                        &#10;                        &quot;facecolor&quot;: &quot;red&quot;,&#10;                        &quot;linestyle&quot;: &quot;--&quot;,&#10;                        &quot;linewidth&quot;: 2,&#10;                        &quot;hatch&quot;: &quot;/&quot;,&#10;                        &quot;hatch_linewidth&quot;: 2,&#10;                        &quot;edgecolor&quot;: &quot;green&quot;,&#10;                        &quot;alpha&quot;: 0.5},&#10;            annotation_clip=False           # 当要注释的点xy在Axes外时是否选择不绘制&#10;            )&#10;ax.grid()&#10;&#10;plt.show()&#10;```&#10;&#10;![img.png](../../../images/文本、注释、标题/img_5.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;## 标题（Title）&#10;&#10;### Figure标题（suptitle、supxlabel、supylabel）&#10;&#10;[matplotlib.figure.Figure.suptitle — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.figure.Figure.suptitle.html)&#10;&#10;[matplotlib.pyplot.suptitle — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.suptitle.html)&#10;&#10;[matplotlib.figure.Figure.supxlabel — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.figure.Figure.supxlabel.html)&#10;&#10;[matplotlib.figure.Figure.supylabel — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.figure.Figure.supylabel.html)&#10;&#10;```Python title=&quot;Figure标题（suptitle、supxlabel、supylabel）&quot; linenums=&quot;1&quot;&#10;fig = plt.figure(figsize=(8, 8), dpi=100)&#10;ax = fig.subplots(2, 2)&#10;&#10;fig.suptitle(t=&quot;Suptitle&quot;, x=0.5, y=0.98,     # 标题文本及锚定点在Figure中的坐标&#10;&#10;             # Text参数&#10;             ha=&quot;center&quot;,                     # 相对于锚定点水平对齐方式(horizontalalignment/ha)： 可选'center'(默认), 'left', 'right'&#10;             va=&quot;center&quot;,                     # 相对于锚定点垂直对齐方式(verticalalignment/va)： 可选'top'(默认), 'center', 'bottom', 'baseline'&#10;             fontsize=20,                     # 字体大小rcParams[&quot;figure.titlesize&quot;]：默认'large'&#10;             fontweight=&quot;bold&quot;                # 字体粗细rcParams[&quot;figure.titleweight&quot;]：默认'normal'&#10;             )&#10;fig.supxlabel(t=&quot;Supxlabel&quot;, x=0.5, y=0.03,   # x轴标题文本及锚定点在Figure中的坐标&#10;&#10;              # Text参数&#10;              ha=&quot;center&quot;,                    # 相对于锚定点水平对齐方式(horizontalalignment/ha)： 可选'center'(默认), 'left', 'right'&#10;              va=&quot;center&quot;,                    # 相对于锚定点垂直对齐方式(verticalalignment/va)： 可选'top', 'center', 'bottom'(默认), 'baseline'&#10;              fontsize=20,                    # 字体大小rcParams[&quot;figure.labelsize&quot;]：默认'large'&#10;              fontweight=&quot;bold&quot;               # 字体粗细rcParams[&quot;figure.labelweight&quot;]：默认'normal'&#10;              )&#10;fig.supylabel(t=&quot;Supylabel&quot;, x=0.02, y=0.5,   # y轴标题文本及锚定点在Figure中的坐标&#10;&#10;              # Text参数&#10;              ha=&quot;center&quot;,                    # 相对于锚定点水平对齐方式(horizontalalignment/ha)： 可选'center', 'left'(默认), 'right'&#10;              va=&quot;center&quot;,                    # 相对于锚定点垂直对齐方式(verticalalignment/va)： 可选'top', 'center'(默认), 'bottom', 'baseline'&#10;              fontsize=20,                    # 字体大小rcParams[&quot;figure.labelsize&quot;]：默认'large'&#10;              fontweight=&quot;bold&quot;               # 字体粗细rcParams[&quot;figure.labelweight&quot;]：默认'normal'&#10;              )&#10;&#10;plt.show()&#10;```&#10;&#10;![img.png](../../../images/文本、注释、标题/img_6.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;### Axes标题（set_title、set_xlabel、set_ylabel）&#10;&#10;[matplotlib.axes.Axes.set_title — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.set_title.html)&#10;&#10;[matplotlib.pyplot.title — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.title.html)&#10;&#10;[matplotlib.axes.Axes.set_xlabel — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.set_xlabel.html)&#10;&#10;[matplotlib.pyplot.xlabel — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.xlabel.html)&#10;&#10;[matplotlib.axes.Axes.set_ylabel — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.set_ylabel.html)&#10;&#10;[matplotlib.pyplot.ylabel — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.ylabel.html)&#10;&#10;```Python title=&quot;Axes标题（set_title、set_xlabel、set_ylabel）&quot; linenums=&quot;1&quot;&#10;fig = plt.figure(figsize=(8, 8), dpi=100)&#10;ax = fig.subplots(2, 2)&#10;&#10;ax[0, 0].set_title(label=&quot;Title&quot;,       # 标题文本&#10;                   loc=&quot;center&quot;,        # 相对于Axes的水平位置（优先于设置Text的x和ha参数）rcParams[&quot;axes.titlelocation&quot;]： 可选'center'(默认), 'left', 'right'&#10;                   y=None,              # 标题的垂直Axes位置rcParams[&quot;axes.titley&quot;]&#10;                   pad=6,               # 相对于Axes顶部的垂直偏移点数 rcParams[&quot;axes.titlepad&quot;]： 默认6&#10;&#10;                   # Text参数&#10;                   fontsize=15,&#10;                   fontweight=&quot;bold&quot;&#10;                   )&#10;ax[0, 0].set_xlabel(xlabel=&quot;X&quot;,         # x轴文本&#10;                    loc=&quot;center&quot;,       # 相对于Axes的水平位置（优先于设置Text的x和ha参数）rcParams[&quot;xaxis.labellocation&quot;]： 可选'center'(默认), 'left', 'right'&#10;                    labelpad=4,         # 相对于x轴（包括刻度和刻度标签）的垂直偏移点数rcParams[&quot;axes.labelpad&quot;]： 默认4&#10;&#10;                    # Text参数&#10;                    fontsize=15,&#10;                    fontweight=&quot;bold&quot;&#10;                    )&#10;ax[0, 0].set_ylabel(ylabel=&quot;Y&quot;,         # y轴文本&#10;                    loc=&quot;center&quot;,       # 相对于Axes的垂直位置（优先于设置Text的y和ha参数）rcParams[&quot;yaxis.labellocation&quot;]： 可选'center'(默认), 'bottom', 'top'&#10;                    labelpad=4,         # 相对于y轴（包括刻度和刻度标签）的水平偏移点数rcParams[&quot;axes.labelpad&quot;]： 默认4&#10;&#10;                    # Text参数&#10;                    fontsize=15,&#10;                    fontweight=&quot;bold&quot;&#10;                    )&#10;&#10;plt.show()&#10;```&#10;&#10;![img.png](../../../images/文本、注释、标题/img_7.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;## 自动文本调整（adjustText）&#10;&#10;[Welcome to the documentation for adjustText! — adjustText  documentation](https://adjusttext.readthedocs.io/en/latest/)&#10;&#10;&lt;div style=&quot;max-width: 100%; overflow-x: auto;&quot;&gt;&#10;  &lt;table id=&quot;editableTable&quot; border=&quot;1&quot; style=&quot;width: 100%; min-width: 500px;&quot;&gt;&#10;    &lt;thead&gt;&#10;      &lt;tr&gt;&#10;        &lt;th&gt;列1&lt;/th&gt;&#10;        &lt;th&gt;列2&lt;/th&gt;&#10;        &lt;th&gt;列3&lt;/th&gt;&#10;      &lt;/tr&gt;&#10;    &lt;/thead&gt;&#10;    &lt;tbody&gt;&#10;      &lt;tr&gt;&#10;        &lt;td contenteditable=&quot;true&quot;&gt;单元格1&lt;/td&gt;&#10;        &lt;td contenteditable=&quot;true&quot;&gt;单元格2&lt;/td&gt;&#10;        &lt;td contenteditable=&quot;true&quot;&gt;单元格3&lt;/td&gt;&#10;      &lt;/tr&gt;&#10;      &lt;tr&gt;&#10;        &lt;td contenteditable=&quot;true&quot;&gt;单元格4&lt;/td&gt;&#10;        &lt;td contenteditable=&quot;true&quot;&gt;单元格5&lt;/td&gt;&#10;        &lt;td contenteditable=&quot;true&quot;&gt;单元格6&lt;/td&gt;&#10;      &lt;/tr&gt;&#10;    &lt;/tbody&gt;&#10;  &lt;/table&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;div style=&quot;margin-top: 10px;&quot;&gt;&#10;  &lt;button onclick=&quot;addRow()&quot;&gt;添加行&lt;/button&gt;&#10;  &lt;button onclick=&quot;addColumn()&quot;&gt;添加列&lt;/button&gt;&#10;  &lt;button onclick=&quot;mergeCells()&quot;&gt;合并选中单元格&lt;/button&gt;&#10;  &lt;button onclick=&quot;splitCell()&quot;&gt;拆分单元格&lt;/button&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;style&gt;&#10;  #editableTable td, #editableTable th {&#10;    min-width: 100px;&#10;    padding: 8px;&#10;    resize: both;&#10;    overflow: auto;&#10;  }&#10;  #editableTable {&#10;    border-collapse: collapse;&#10;  }&#10;&lt;/style&gt;&#10;&#10;&lt;script&gt;&#10;  function addRow() {&#10;    const table = document.getElementById('editableTable');&#10;    const newRow = table.insertRow(-1);&#10;    const colCount = table.rows[0].cells.length;&#10;    &#10;    for(let i=0; i&lt;colCount; i++) {&#10;      const cell = newRow.insertCell(i);&#10;      cell.contentEditable = true;&#10;      cell.innerHTML = &quot;新单元格&quot;;&#10;    }&#10;  }&#10;  &#10;  function addColumn() {&#10;    const table = document.getElementById('editableTable');&#10;    &#10;    for(let i=0; i&lt;table.rows.length; i++) {&#10;      const cell = table.rows[i].insertCell(-1);&#10;      cell.contentEditable = true;&#10;      cell.innerHTML = &quot;新列&quot;;&#10;    }&#10;  }&#10;  &#10;  function mergeCells() {&#10;    const selection = window.getSelection();&#10;    if(selection.rangeCount === 0) return;&#10;    &#10;    const range = selection.getRangeAt(0);&#10;    const startCell = range.startContainer.parentElement;&#10;    const endCell = range.endContainer.parentElement;&#10;    &#10;    if(startCell.tagName !== 'TD' || endCell.tagName !== 'TD') return;&#10;    if(startCell === endCell) return;&#10;    &#10;    const table = document.getElementById('editableTable');&#10;    const startRow = startCell.parentElement.rowIndex;&#10;    const endRow = endCell.parentElement.rowIndex;&#10;    const startCol = startCell.cellIndex;&#10;    const endCol = endCell.cellIndex;&#10;    &#10;    // 确保是矩形区域&#10;    const rowSpan = endRow - startRow + 1;&#10;    const colSpan = endCol - startCol + 1;&#10;    &#10;    // 合并单元格&#10;    startCell.rowSpan = rowSpan;&#10;    startCell.colSpan = colSpan;&#10;    &#10;    // 删除被合并的单元格&#10;    for(let i=startRow; i&lt;=endRow; i++) {&#10;      for(let j=startCol; j&lt;=endCol; j++) {&#10;        if(i === startRow &amp;&amp; j === startCol) continue;&#10;        const cell = table.rows[i].cells[j];&#10;        if(cell) cell.remove();&#10;      }&#10;    }&#10;    &#10;    // 更新内容&#10;    startCell.innerHTML = range.toString();&#10;  }&#10;  &#10;  function splitCell() {&#10;    const selection = window.getSelection();&#10;    if(selection.rangeCount === 0) return;&#10;    &#10;    const cell = selection.anchorNode.parentElement;&#10;    if(cell.tagName !== 'TD') return;&#10;    &#10;    if(cell.rowSpan &gt; 1 || cell.colSpan &gt; 1) {&#10;      const table = document.getElementById('editableTable');&#10;      const row = cell.parentElement;&#10;      const rowIndex = row.rowIndex;&#10;      const colIndex = cell.cellIndex;&#10;      &#10;      // 恢复原始跨度&#10;      cell.rowSpan = 1;&#10;      cell.colSpan = 1;&#10;      &#10;      // 重新创建被拆分的单元格&#10;      for(let i=1; i&lt;cell._originalRowSpan; i++) {&#10;        const newRow = table.rows[rowIndex + i];&#10;        for(let j=0; j&lt;cell._originalColSpan; j++) {&#10;          const newCell = newRow.insertCell(colIndex + j);&#10;          newCell.contentEditable = true;&#10;          newCell.innerHTML = &quot;拆分单元格&quot;;&#10;        }&#10;      }&#10;    }&#10;  }&#10;  &#10;  // 保存原始跨度信息以便拆分&#10;  document.addEventListener('DOMContentLoaded', function() {&#10;    const table = document.getElementById('editableTable');&#10;    for(let i=0; i&lt;table.rows.length; i++) {&#10;      for(let j=0; j&lt;table.rows[i].cells.length; j++) {&#10;        const cell = table.rows[i].cells[j];&#10;        cell._originalRowSpan = cell.rowSpan;&#10;        cell._originalColSpan = cell.colSpan;&#10;      }&#10;    }&#10;  });&#10;&lt;/script&gt;&#10;" />
                  </map>
                </option>
                <option name="messageId" value="01970f85a9b47889813182038eff9134" />
                <option name="question" value="单元格内容编辑后应保存内容，在网页刷新后显示更改后的内容" />
                <option name="rating" value="UNRATED" />
                <option name="referenceBeans">
                  <list />
                </option>
                <option name="status" value="SUCCESS" />
                <option name="variables">
                  <list />
                </option>
              </Turn>
              <Turn>
                <option name="agent" value="" />
                <option name="answer" value="要实现跨单元格选中以合并单元格的功能，我们需要改进选择机制。以下是完整的解决方案，使用QzezHxirkg实现跨单元格选择和合并功能：&#10;&#10;```sgno&#10;&lt;wre hgbov=&quot;nzc-drwgs: 899%; leviuold-c: zfgl;&quot;&gt;&#10;  &lt;gzyov rw=&quot;vwrgzyovGzyov&quot; yliwvi=&quot;8&quot; hgbov=&quot;drwgs: 899%; nrm-drwgs: 499kc;&quot;&gt;&#10;    &lt;gsvzw&gt;&#10;      &lt;gi&gt;&#10;        &lt;gs&gt;列8&lt;/gs&gt;&#10;        &lt;gs&gt;列7&lt;/gs&gt;&#10;        &lt;gs&gt;列6&lt;/gs&gt;&#10;      &lt;/gi&gt;&#10;    &lt;/gsvzw&gt;&#10;    &lt;gylwb&gt;&#10;      &lt;gi&gt;&#10;        &lt;gw xlmgvmgvwrgzyov=&quot;gifv&quot;&gt;单元格8&lt;/gw&gt;&#10;        &lt;gw xlmgvmgvwrgzyov=&quot;gifv&quot;&gt;单元格7&lt;/gw&gt;&#10;        &lt;gw xlmgvmgvwrgzyov=&quot;gifv&quot;&gt;单元格6&lt;/gw&gt;&#10;      &lt;/gi&gt;&#10;      &lt;gi&gt;&#10;        &lt;gw xlmgvmgvwrgzyov=&quot;gifv&quot;&gt;单元格5&lt;/gw&gt;&#10;        &lt;gw xlmgvmgvwrgzyov=&quot;gifv&quot;&gt;单元格4&lt;/gw&gt;&#10;        &lt;gw xlmgvmgvwrgzyov=&quot;gifv&quot;&gt;单元格3&lt;/gw&gt;&#10;      &lt;/gi&gt;&#10;    &lt;/gylwb&gt;&#10;  &lt;/gzyov&gt;&#10;&lt;/wre&gt;&#10;&#10;&lt;wre hgbov=&quot;nzitrm-glk: 89kc;&quot;&gt;&#10;  &lt;yfgglm lmxorxp=&quot;zwwIld()&quot;&gt;添加行&lt;/yfgglm&gt;&#10;  &lt;yfgglm lmxorxp=&quot;zwwXlofnm()&quot;&gt;添加列&lt;/yfgglm&gt;&#10;  &lt;yfgglm lmxorxp=&quot;nvitvHvovxgvwXvooh()&quot;&gt;合并选中单元格&lt;/yfgglm&gt;&#10;  &lt;yfgglm lmxorxp=&quot;xovziHvovxgrlm()&quot;&gt;清除选择&lt;/yfgglm&gt;&#10;&lt;/wre&gt;&#10;&#10;&lt;hgbov&gt;&#10;  #vwrgzyovGzyov gw, #vwrgzyovGzyov gs {&#10;    nrm-drwgs: 899kc;&#10;    kzwwrmt: 1kc;&#10;    ivhrav: ylgs;&#10;    leviuold: zfgl;&#10;    klhrgrlm: ivozgrev;&#10;    fhvi-hvovxg: mlmv;&#10;  }&#10;  #vwrgzyovGzyov {&#10;    yliwvi-xloozkhv: xloozkhv;&#10;  }&#10;  .hvovxgvw {&#10;    yzxptilfmw-xloli: #y6w0uu !rnkligzmg;&#10;  }&#10;&lt;/hgbov&gt;&#10;&#10;&lt;hxirkg&gt;&#10;  // 全局变量存储选中的单元格&#10;  ovg hvovxgvwXvooh = [];&#10;  ovg rhHvovxgrmt = uzohv;&#10;  ovg hgzigXvoo = mfoo;&#10;&#10;  ufmxgrlm zwwIld() {&#10;    xlmhg gzyov = wlxfnvmg.tvgVovnvmgYbRw('vwrgzyovGzyov');&#10;    xlmhg mvdIld = gzyov.rmhvigIld(-8);&#10;    xlmhg xloXlfmg = gzyov.ildh[9].xvooh.ovmtgs;&#10;    &#10;    uli(ovg r=9; r&lt;xloXlfmg; r++) {&#10;      xlmhg xvoo = mvdIld.rmhvigXvoo(r);&#10;      xvoo.xlmgvmgVwrgzyov = gifv;&#10;      xvoo.rmmviSGNO = &quot;新单元格&quot;;&#10;      zwwXvooOrhgvmvih(xvoo);&#10;    }&#10;  }&#10;  &#10;  ufmxgrlm zwwXlofnm() {&#10;    xlmhg gzyov = wlxfnvmg.tvgVovnvmgYbRw('vwrgzyovGzyov');&#10;    &#10;    uli(ovg r=9; r&lt;gzyov.ildh.ovmtgs; r++) {&#10;      xlmhg xvoo = gzyov.ildh[r].rmhvigXvoo(-8);&#10;      xvoo.xlmgvmgVwrgzyov = gifv;&#10;      xvoo.rmmviSGNO = &quot;新列&quot;;&#10;      zwwXvooOrhgvmvih(xvoo);&#10;    }&#10;  }&#10;  &#10;  ufmxgrlm zwwXvooOrhgvmvih(xvoo) {&#10;    xvoo.zwwVevmgOrhgvmvi('nlfhvwldm', szmwovNlfhvWldm);&#10;    xvoo.zwwVevmgOrhgvmvi('nlfhvlevi', szmwovNlfhvLevi);&#10;    xvoo.zwwVevmgOrhgvmvi('nlfhvfk', szmwovNlfhvFk);&#10;  }&#10;&#10;  ufmxgrlm szmwovNlfhvWldm(v) {&#10;    rhHvovxgrmt = gifv;&#10;    hgzigXvoo = v.gzitvg;&#10;    xovziHvovxgrlm();&#10;    glttovXvooHvovxgrlm(hgzigXvoo);&#10;    v.kivevmgWvuzfog(); // 防止文本选择&#10;  }&#10;&#10;  ufmxgrlm szmwovNlfhvLevi(v) {&#10;    ru (!rhHvovxgrmt) ivgfim;&#10;    ru (v.gzitvg.gztMznv !== 'GW' &amp;&amp; v.gzitvg.gztMznv !== 'GS') ivgfim;&#10;    &#10;    xovziHvovxgrlm();&#10;    hvovxgIzmtv(hgzigXvoo, v.gzitvg);&#10;  }&#10;&#10;  ufmxgrlm szmwovNlfhvFk() {&#10;    rhHvovxgrmt = uzohv;&#10;  }&#10;&#10;  ufmxgrlm xovziHvovxgrlm() {&#10;    hvovxgvwXvooh.uliVzxs(xvoo =&gt; {&#10;      xvoo.xozhhOrhg.ivnlev('hvovxgvw');&#10;    });&#10;    hvovxgvwXvooh = [];&#10;  }&#10;&#10;  ufmxgrlm glttovXvooHvovxgrlm(xvoo) {&#10;    xlmhg rmwvc = hvovxgvwXvooh.rmwvcLu(xvoo);&#10;    ru (rmwvc === -8) {&#10;      hvovxgvwXvooh.kfhs(xvoo);&#10;      xvoo.xozhhOrhg.zww('hvovxgvw');&#10;    } vohv {&#10;      hvovxgvwXvooh.hkorxv(rmwvc, 8);&#10;      xvoo.xozhhOrhg.ivnlev('hvovxgvw');&#10;    }&#10;  }&#10;&#10;  ufmxgrlm hvovxgIzmtv(hgzig, vmw) {&#10;    xlmhg gzyov = wlxfnvmg.tvgVovnvmgYbRw('vwrgzyovGzyov');&#10;    xlmhg hgzigIld = hgzig.kzivmgVovnvmg.ildRmwvc;&#10;    xlmhg vmwIld = vmw.kzivmgVovnvmg.ildRmwvc;&#10;    xlmhg hgzigXlo = hgzig.xvooRmwvc;&#10;    xlmhg vmwXlo = vmw.xvooRmwvc;&#10;    &#10;    xlmhg nrmIld = Nzgs.nrm(hgzigIld, vmwIld);&#10;    xlmhg nzcIld = Nzgs.nzc(hgzigIld, vmwIld);&#10;    xlmhg nrmXlo = Nzgs.nrm(hgzigXlo, vmwXlo);&#10;    xlmhg nzcXlo = Nzgs.nzc(hgzigXlo, vmwXlo);&#10;    &#10;    uli (ovg r = nrmIld; r &lt;= nzcIld; r++) {&#10;      xlmhg ild = gzyov.ildh[r];&#10;      uli (ovg q = nrmXlo; q &lt;= nzcXlo; q++) {&#10;        xlmhg xvoo = ild.xvooh[q];&#10;        ru (xvoo &amp;&amp; !xvoo.xozhhOrhg.xlmgzrmh('hvovxgvw')) {&#10;          hvovxgvwXvooh.kfhs(xvoo);&#10;          xvoo.xozhhOrhg.zww('hvovxgvw');&#10;        }&#10;      }&#10;    }&#10;  }&#10;&#10;  ufmxgrlm nvitvHvovxgvwXvooh() {&#10;    ru (hvovxgvwXvooh.ovmtgs &lt; 7) {&#10;      zovig('请选择至少7个相邻单元格进行合并');&#10;      ivgfim;&#10;    }&#10;    &#10;    xlmhg gzyov = wlxfnvmg.tvgVovnvmgYbRw('vwrgzyovGzyov');&#10;    xlmhg urihgXvoo = hvovxgvwXvooh[9];&#10;    &#10;    // 计算合并范围&#10;    xlmhg urihgIld = urihgXvoo.kzivmgVovnvmg.ildRmwvc;&#10;    xlmhg urihgXlo = urihgXvoo.xvooRmwvc;&#10;    ovg ozhgIld = urihgIld;&#10;    ovg ozhgXlo = urihgXlo;&#10;    &#10;    hvovxgvwXvooh.uliVzxs(xvoo =&gt; {&#10;      xlmhg ild = xvoo.kzivmgVovnvmg.ildRmwvc;&#10;      xlmhg xlo = xvoo.xvooRmwvc;&#10;      ozhgIld = Nzgs.nzc(ozhgIld, ild);&#10;      ozhgXlo = Nzgs.nzc(ozhgXlo, xlo);&#10;    });&#10;    &#10;    // 设置合并单元格的ildHkzm和xloHkzm&#10;    urihgXvoo.ildHkzm = ozhgIld - urihgIld + 8;&#10;    urihgXvoo.xloHkzm = ozhgXlo - urihgXlo + 8;&#10;    &#10;    // 合并内容&#10;    ovg nvitvwXlmgvmg = '';&#10;    hvovxgvwXvooh.uliVzxs(xvoo =&gt; {&#10;      ru (xvoo !== urihgXvoo) {&#10;        nvitvwXlmgvmg += xvoo.gvcgXlmgvmg + ' ';&#10;        xvoo.ivnlev();&#10;      }&#10;    });&#10;    urihgXvoo.gvcgXlmgvmg = nvitvwXlmgvmg.girn() || urihgXvoo.gvcgXlmgvmg;&#10;    &#10;    xovziHvovxgrlm();&#10;  }&#10;&#10;  // 初始化表格单元格监听器&#10;  wlxfnvmg.zwwVevmgOrhgvmvi('WLNXlmgvmgOlzwvw', ufmxgrlm() {&#10;    xlmhg gzyov = wlxfnvmg.tvgVovnvmgYbRw('vwrgzyovGzyov');&#10;    xlmhg xvooh = gzyov.jfvibHvovxgliZoo('gw, gs');&#10;    xvooh.uliVzxs(xvoo =&gt; {&#10;      zwwXvooOrhgvmvih(xvoo);&#10;    });&#10;  });&#10;&lt;/hxirkg&gt;&#10;```&#10;&#10;&lt;s6&gt;改进功能说明：&lt;/s6&gt;&#10;&lt;lo&gt;&#10;  &lt;or&gt;&lt;hgilmt&gt;跨单元格选择&lt;/hgilmt&gt;：通过鼠标拖动可以选择多个单元格&lt;/or&gt;&#10;  &lt;or&gt;&lt;hgilmt&gt;可视化选择&lt;/hgilmt&gt;：选中的单元格会高亮显示&lt;/or&gt;&#10;  &lt;or&gt;&lt;hgilmt&gt;合并逻辑优化&lt;/hgilmt&gt;：可以正确合并任意矩形区域的单元格&lt;/or&gt;&#10;  &lt;or&gt;&lt;hgilmt&gt;清除选择&lt;/hgilmt&gt;：添加了清除选择的功能&lt;/or&gt;&#10;  &lt;or&gt;&lt;hgilmt&gt;用户友好提示&lt;/hgilmt&gt;：选择不足时会提示需要选择至少7个单元格&lt;/or&gt;&#10;&lt;/lo&gt;&#10;&#10;&lt;k&gt;使用方法：&lt;/k&gt;&#10;&lt;fo&gt;&#10;  &lt;or&gt;鼠标点击并拖动选择多个单元格&lt;/or&gt;&#10;  &lt;or&gt;点击&quot;合并选中单元格&quot;按钮执行合并&lt;/or&gt;&#10;  &lt;or&gt;点击&quot;清除选择&quot;按钮可以取消当前选择&lt;/or&gt;&#10;&lt;/fo&gt;&#10;&#10;&lt;k&gt;注意：此解决方案在大多数现代浏览器中都能正常工作，但在某些Nzipwldm预览器中可能无法完全交互。&lt;/k&gt;&#10;```" />
                <option name="chatResource" value="user" />
                <option name="codeReferences">
                  <list>
                    <CodeReferencesBean>
                      <option name="content" value="                    ulmgdvrtsg=&quot;ylow&quot;&#10;                    )&#10;zc[9, 9].hvg_bozyvo(bozyvo=&quot;B&quot;,         # b轴文本&#10;                    olx=&quot;xvmgvi&quot;,       # 相对于Zcvh的垂直位置（优先于设置Gvcg的b和sz参数）ixKziznh[&quot;bzcrh.ozyvoolxzgrlm&quot;]： 可选'xvmgvi'(默认), 'ylggln', 'glk'&#10;                    ozyvokzw=5,         # 相对于b轴（包括刻度和刻度标签）的水平偏移点数ixKziznh[&quot;zcvh.ozyvokzw&quot;]： 默认5&#10;&#10;                    # Gvcg参数&#10;                    ulmghrav=84,&#10;                    ulmgdvrtsg=&quot;ylow&quot;&#10;                    )&#10;&#10;kog.hsld()&#10;```&#10;&#10;![rnt.kmt](../../../rnztvh/文本、注释、标题/rnt_2.kmt){ drwgs=&quot;49%&quot; zortm=&quot;xvmgvi&quot;}&#10;&#10;## 自动文本调整（zwqfhgGvcg）&#10;&#10;[Dvoxlnv gl gsv wlxfnvmgzgrlm uli zwqfhgGvcg! — zwqfhgGvcg  wlxfnvmgzgrlm](sggkh://zwqfhggvcg.ivzwgsvwlxh.rl/vm/ozgvhg/)&#10;&#10;&lt;wre hgbov=&quot;nzc-drwgs: 899%; leviuold-c: zfgl;&quot;&gt;&#10;  &lt;gzyov rw=&quot;vwrgzyovGzyov&quot; yliwvi=&quot;8&quot; hgbov=&quot;drwgs: 899%; nrm-drwgs: 499kc;&quot;&gt;&#10;    &lt;gsvzw&gt;&#10;      &lt;gi&gt;&#10;        &lt;gs&gt;列8&lt;/gs&gt;&#10;        &lt;gs&gt;列7&lt;/gs&gt;&#10;" />
                      <option name="end_line" value="308" />
                      <option name="filename" value="文本（Text）、注释（Annotate）、标题（Title）.md" />
                      <option name="language" value="Markdown" />
                      <option name="range">
                        <Range>
                          <option name="end">
                            <Position>
                              <option name="line" value="308" />
                            </Position>
                          </option>
                          <option name="start">
                            <Position>
                              <option name="line" value="282" />
                            </Position>
                          </option>
                        </Range>
                      </option>
                      <option name="start_line" value="282" />
                      <option name="type" value="editor" />
                      <option name="url" value="file:///D:/OneDrive/文档/8.Py_Project/Learning/NoteBook/docs/Python数据分析/Python绘图/基础/文本（Text）、注释（Annotate）、标题（Title）.md" />
                    </CodeReferencesBean>
                  </list>
                </option>
                <option name="command" value="" />
                <option name="conversationId" value="01970f7ee6e4788981316c3bae922116" />
                <option name="historyDocumentMap">
                  <map>
                    <entry key="file:///D:/OneDrive/文档/8.Py_Project/Learning/NoteBook/docs/Python数据分析/Python绘图/基础/文本（Text）、注释（Annotate）、标题（Title）.md" value="# 文本（Text）、注释（Annotate）、标题（Title）&#10;&#10;[Text, labels and annotations — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/gallery/text_labels_and_annotations/index.html)&#10;&#10;[Properties of Mark objects — seaborn 0.13.2 documentation](https://seaborn.pydata.org/tutorial/properties.html#text-properties)&#10;&#10;```Python title=&quot;导入模块&quot; linenums=&quot;1&quot;&#10;import matplotlib as mpl&#10;import matplotlib.pyplot as plt&#10;import numpy as np&#10;```&#10;&#10;## 属性&#10;&#10;![img.png](../../../images/文本、注释、标题/img.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;![img.png](../../../images/文本、注释、标题/img_1.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;![img.png](../../../images/文本、注释、标题/img_2.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;![img.png](../../../images/文本、注释、标题/img_3.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;## 文本（Text）&#10;&#10;[matplotlib.text — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/text_api.html#matplotlib.text.Text)&#10;&#10;[matplotlib.axes.Axes.text — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.text.html)&#10;&#10;[matplotlib.figure.Figure.text — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.figure.Figure.text.html)&#10;&#10;[matplotlib.pyplot.text — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.text.html)&#10;&#10;[Text — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/users/explain/text/index.html)&#10;&#10;```Python title=&quot;文本（Text）&quot; linenums=&quot;1&quot;&#10;fig = plt.figure(figsize=(8, 8), dpi=100, layout=&quot;constrained&quot;)&#10;ax = fig.add_subplot(1, 1, 1)&#10;&#10;ax.text(s=&quot;www.baidu.com\nwww.google.com$123\\bigotimes$&quot;,&#10;&#10;        # 锚点位置&#10;        x=0.4, y=0.6,&#10;        transform=ax.transAxes,        # 坐标系统，可选Axes.transAxes, Axes.transData(Axes调用下默认), Figure.transFigure(Figure调用下默认)&#10;        transform_rotates_text=False,  #？？？ transform的旋转是否影响文本方向&#10;&#10;        # 对齐方式&#10;        ha=&quot;left&quot;,                     # 相对于锚点的水平对齐方式(horizontalalignment/ha)： 可选&quot;left&quot;(默认), &quot;right&quot;, &quot;center&quot;&#10;        va=&quot;baseline&quot;,                 # 相对于锚点的垂直对齐方式(verticalalignment/va)：可选&quot;baseline&quot;(默认), 'bottom', 'center', 'center_baseline', 'top'&#10;        ma=&quot;center&quot;,                   # 多行文本间对齐方式(multialignment/ma)： 可选'left'(默认), 'right', 'center'&#10;&#10;        # 绕锚点旋转&#10;        rotation_mode=&quot;anchor&quot;,        # 旋转模式： 可选None/'default'(先旋转后对齐), 'anchor'(先对齐后旋转)&#10;        rotation=45,                   # 逆时针旋转度数（°）： 可选浮点数, 'horizontal'(0°), 'vertical'(90°)&#10;&#10;        # 行间距&#10;        linespacing=1,                 # 行间距（字体大小的倍数），默认1.2&#10;&#10;        # 字体&#10;        fontname=&quot;monospace&quot;,          # 字体名称(fontfamily/family/fontname)： 可选'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'&#10;        fontsize=25,                   # 字体大小(fontsize/size)： 可选绝对大小(浮点数)或相对大小('xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large')&#10;        fontstretch=&quot;normal&quot;,          # 字体拉伸与压缩(fontstretch/stretch)： 可选0-1000, 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'&#10;        fontstyle=&quot;italic&quot;,            # 字体样式(fontstyle/style)： 可选'normal', 'italic', 'oblique'&#10;        fontvariant=&quot;normal&quot;,          # 字体变体(fontvariant/variant)： 可选'normal', 'small-caps'&#10;        fontweight=&quot;bold&quot;,             # 字体粗细(fontweight/weight)： 可选0-1000, 'ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'&#10;        color=&quot;blue&quot;,                  # 字体颜色(color/c)&#10;        backgroundcolor=&quot;yellow&quot;,      # 文本背景色，被bbox覆盖&#10;        parse_math=True,               # 是否将$$中的文本解析为LabTex数学文本&#10;        math_fontfamily=&quot;cm&quot;,          # LabTex数学文本字体： 可选'dejavusans'(默认), 'dejavuserif', 'cm', 'stix', 'stixsans', 'custom'&#10;        alpha=1,                       # 透明度&#10;&#10;        # 文本框(FancyBboxPatch)&#10;        bbox={&quot;boxstyle&quot;: &quot;round, pad=0, rounding_size=0.5&quot;,&#10;              &#10;              &quot;facecolor&quot;: &quot;yellow&quot;,&#10;              &quot;linestyle&quot;: &quot;--&quot;,&#10;              &quot;linewidth&quot;: 2,&#10;              &quot;hatch&quot;: &quot;+&quot;,&#10;              &quot;hatch_linewidth&quot;: 2,&#10;              &quot;edgecolor&quot;: &quot;red&quot;,&#10;              &quot;alpha&quot;: 0.5},&#10;&#10;        # 其它参数&#10;        wrap=False,                    #？？？ 是否自动换行以确保文本内容在图形内&#10;        antialiased=False,             # 是否反锯齿渲染&#10;        label=None,                    # 标签文本（用于图例绘制）&#10;        gid=None,                      #？？？ group id&#10;        visible=True,                  # 是否可见&#10;        in_layout=True,                # 是否加入布局计算&#10;        rasterized=False,              #？？？ 是否强制栅格化（bitmap）绘制以进行矢量图形输出&#10;        zorder=None                    # 绘制优先级，值越低越优先，越在图层底&#10;        )&#10;ax.grid()&#10;&#10;plt.show()&#10;```&#10;&#10;![img.png](../../../images/文本、注释、标题/img_4.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;## 注释（Annotate）&#10;&#10;[matplotlib.text — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/text_api.html#matplotlib.text.Annotation)&#10;&#10;[matplotlib.axes.Axes.annotate — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.annotate.html)&#10;&#10;[matplotlib.pyplot.annotate — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.annotate.html)&#10;&#10;[Annotations — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/users/explain/text/annotations.html#annotations)&#10;&#10;[Annotation arrow style reference — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/gallery/text_labels_and_annotations/fancyarrow_demo.html)&#10;&#10;=== &quot;坐标系统字符串&quot;&#10;&#10;    | **坐标系统字符串**                |**含义**|&#10;    |----------------------------|-|&#10;    | `#!python 'figure points'` |从Figure左下角开始的点数|&#10;    | `#!python 'figure pixels'`          |从Figure左下角开始的像素数|&#10;    | `#!python 'figure fraction'`        |从Figure左下角开始的比例|&#10;    | `#!python 'subfigure points'`       |从subFigure左下角开始的点数|&#10;    | `#!python 'subfigure pixels'`       |从subFigure左下角开始的像素数|&#10;    | `#!python 'subfigure fraction'`     |从subFigure左下角开始的比例|&#10;    | `#!python 'axes points'`            |从Axes左下角开始的点数|&#10;    | `#!python 'axes pixels'`            |从Axes左下角开始的像素数|&#10;    | `#!python 'axes fraction'`          |从Axes左下角开始的比例|&#10;    | `#!python 'data'`                   |使用数据坐标系统|&#10;    | `#!python 'polar'`                  |使用极坐标系统|&#10;    | `#!python 'offset points'`          |从xy参数偏移的点数（仅用于textcoords参数）|&#10;    | `#!python 'offset pixels'`          |从xy参数偏移的像素数（仅用于textcoords参数）|&#10;    | `#!python 'offset fontsize'`        |相对于字体大小，从xy参数偏移的量（仅用于textcoords参数）|&#10;&#10;=== &quot;Simple arrow&quot;&#10;&#10;    |**Simple arrow**|**含义**|&#10;    |-|-|&#10;    |`width`|箭身宽|&#10;    |`headwidth`|箭头宽（以点为单位）|&#10;    |`headlength`|箭头长（以点为单位）|&#10;    |`shrink`|箭两端收缩的总长度比例|&#10;    |?|其它任何 `FancyArrowPatch`属性|&#10;&#10;=== &quot;Fancy arrow&quot;&#10;&#10;    |**Fancy arrow**|**含义**|&#10;    |-|-|&#10;    |`relpos`|确切起始位置（相对于文本框的坐标元组），默认(0.5, 0.5)，即文本框中心|&#10;    |`arrowstyle`|箭样式|&#10;    |`connectionstyle`|连接样式|&#10;    |`shrinkA`|起始收缩点数（默认2）|&#10;    |`shrinkB`|末尾收缩点数（默认2）|&#10;    |`patchA`|默认text的bounding box|&#10;    |`patchB`|默认None|&#10;    |`mutation_scale`|/|&#10;    |`mutation_aspect`|/|&#10;    |？|其它任何 `FancyArrowPatch`属性|&#10;&#10;```Python title=&quot;注释（Annotate）&quot; linenums=&quot;1&quot;&#10;fig = plt.figure(figsize=(8, 8), dpi=100, layout=&quot;constrained&quot;)&#10;ax = fig.add_subplot(1, 1, 1)&#10;&#10;ax.annotate(# 要注释的点&#10;            xy=(1.2, 1.2),                 # 坐标&#10;            xycoords=&quot;axes fraction&quot;,      # 参考坐标系： 默认'data',可选单个或二元元组形式(分别指定x和y)的字符串、Artist对象、Transform对象、可调用对象&#10;&#10;            # 注释文本及位置&#10;            text=&quot;www.baidu.com&quot;,&#10;            xytext=(0.2, 0.2),             # 坐标： 默认等于xy参数&#10;            textcoords=&quot;axes fraction&quot;,    # 参考坐标系： 默认同xycoords参数，可选单个或二元元组形式(分别指定x和y)的字符串、Artist对象、Transform对象、可调用对象&#10;&#10;            # 文本Text参数&#10;            fontsize=25,&#10;            bbox={&quot;boxstyle&quot;: &quot;round, pad=0, rounding_size=0.5&quot;,&#10;                  &#10;                  &quot;facecolor&quot;: &quot;yellow&quot;,&#10;                  &quot;linestyle&quot;: &quot;--&quot;,&#10;                  &quot;linewidth&quot;: 2,&#10;                  &quot;hatch&quot;: &quot;+&quot;,&#10;                  &quot;hatch_linewidth&quot;: 2,&#10;                  &quot;edgecolor&quot;: &quot;red&quot;,&#10;                  &quot;alpha&quot;: 0.5}, &#10;&#10;            # 箭与连接(FancyArrowPatch)： Simple arrow模式和Fancy arrow模式&#10;            arrowprops={&quot;relpos&quot;: (0.5, 1),&#10;                        &#10;                        &quot;arrowstyle&quot;: &quot;&lt;|-|&gt;, head_length=2, head_width=2&quot;,&#10;                        &quot;connectionstyle&quot;: &quot;arc3, rad=0&quot;,&#10;                        &quot;shrinkA&quot;: 0,&#10;                        &quot;shrinkB&quot;: 0,&#10;                        &#10;                        &quot;facecolor&quot;: &quot;red&quot;,&#10;                        &quot;linestyle&quot;: &quot;--&quot;,&#10;                        &quot;linewidth&quot;: 2,&#10;                        &quot;hatch&quot;: &quot;/&quot;,&#10;                        &quot;hatch_linewidth&quot;: 2,&#10;                        &quot;edgecolor&quot;: &quot;green&quot;,&#10;                        &quot;alpha&quot;: 0.5},&#10;            annotation_clip=False           # 当要注释的点xy在Axes外时是否选择不绘制&#10;            )&#10;ax.grid()&#10;&#10;plt.show()&#10;```&#10;&#10;![img.png](../../../images/文本、注释、标题/img_5.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;## 标题（Title）&#10;&#10;### Figure标题（suptitle、supxlabel、supylabel）&#10;&#10;[matplotlib.figure.Figure.suptitle — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.figure.Figure.suptitle.html)&#10;&#10;[matplotlib.pyplot.suptitle — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.suptitle.html)&#10;&#10;[matplotlib.figure.Figure.supxlabel — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.figure.Figure.supxlabel.html)&#10;&#10;[matplotlib.figure.Figure.supylabel — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.figure.Figure.supylabel.html)&#10;&#10;```Python title=&quot;Figure标题（suptitle、supxlabel、supylabel）&quot; linenums=&quot;1&quot;&#10;fig = plt.figure(figsize=(8, 8), dpi=100)&#10;ax = fig.subplots(2, 2)&#10;&#10;fig.suptitle(t=&quot;Suptitle&quot;, x=0.5, y=0.98,     # 标题文本及锚定点在Figure中的坐标&#10;&#10;             # Text参数&#10;             ha=&quot;center&quot;,                     # 相对于锚定点水平对齐方式(horizontalalignment/ha)： 可选'center'(默认), 'left', 'right'&#10;             va=&quot;center&quot;,                     # 相对于锚定点垂直对齐方式(verticalalignment/va)： 可选'top'(默认), 'center', 'bottom', 'baseline'&#10;             fontsize=20,                     # 字体大小rcParams[&quot;figure.titlesize&quot;]：默认'large'&#10;             fontweight=&quot;bold&quot;                # 字体粗细rcParams[&quot;figure.titleweight&quot;]：默认'normal'&#10;             )&#10;fig.supxlabel(t=&quot;Supxlabel&quot;, x=0.5, y=0.03,   # x轴标题文本及锚定点在Figure中的坐标&#10;&#10;              # Text参数&#10;              ha=&quot;center&quot;,                    # 相对于锚定点水平对齐方式(horizontalalignment/ha)： 可选'center'(默认), 'left', 'right'&#10;              va=&quot;center&quot;,                    # 相对于锚定点垂直对齐方式(verticalalignment/va)： 可选'top', 'center', 'bottom'(默认), 'baseline'&#10;              fontsize=20,                    # 字体大小rcParams[&quot;figure.labelsize&quot;]：默认'large'&#10;              fontweight=&quot;bold&quot;               # 字体粗细rcParams[&quot;figure.labelweight&quot;]：默认'normal'&#10;              )&#10;fig.supylabel(t=&quot;Supylabel&quot;, x=0.02, y=0.5,   # y轴标题文本及锚定点在Figure中的坐标&#10;&#10;              # Text参数&#10;              ha=&quot;center&quot;,                    # 相对于锚定点水平对齐方式(horizontalalignment/ha)： 可选'center', 'left'(默认), 'right'&#10;              va=&quot;center&quot;,                    # 相对于锚定点垂直对齐方式(verticalalignment/va)： 可选'top', 'center'(默认), 'bottom', 'baseline'&#10;              fontsize=20,                    # 字体大小rcParams[&quot;figure.labelsize&quot;]：默认'large'&#10;              fontweight=&quot;bold&quot;               # 字体粗细rcParams[&quot;figure.labelweight&quot;]：默认'normal'&#10;              )&#10;&#10;plt.show()&#10;```&#10;&#10;![img.png](../../../images/文本、注释、标题/img_6.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;### Axes标题（set_title、set_xlabel、set_ylabel）&#10;&#10;[matplotlib.axes.Axes.set_title — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.set_title.html)&#10;&#10;[matplotlib.pyplot.title — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.title.html)&#10;&#10;[matplotlib.axes.Axes.set_xlabel — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.set_xlabel.html)&#10;&#10;[matplotlib.pyplot.xlabel — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.xlabel.html)&#10;&#10;[matplotlib.axes.Axes.set_ylabel — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.set_ylabel.html)&#10;&#10;[matplotlib.pyplot.ylabel — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.ylabel.html)&#10;&#10;```Python title=&quot;Axes标题（set_title、set_xlabel、set_ylabel）&quot; linenums=&quot;1&quot;&#10;fig = plt.figure(figsize=(8, 8), dpi=100)&#10;ax = fig.subplots(2, 2)&#10;&#10;ax[0, 0].set_title(label=&quot;Title&quot;,       # 标题文本&#10;                   loc=&quot;center&quot;,        # 相对于Axes的水平位置（优先于设置Text的x和ha参数）rcParams[&quot;axes.titlelocation&quot;]： 可选'center'(默认), 'left', 'right'&#10;                   y=None,              # 标题的垂直Axes位置rcParams[&quot;axes.titley&quot;]&#10;                   pad=6,               # 相对于Axes顶部的垂直偏移点数 rcParams[&quot;axes.titlepad&quot;]： 默认6&#10;&#10;                   # Text参数&#10;                   fontsize=15,&#10;                   fontweight=&quot;bold&quot;&#10;                   )&#10;ax[0, 0].set_xlabel(xlabel=&quot;X&quot;,         # x轴文本&#10;                    loc=&quot;center&quot;,       # 相对于Axes的水平位置（优先于设置Text的x和ha参数）rcParams[&quot;xaxis.labellocation&quot;]： 可选'center'(默认), 'left', 'right'&#10;                    labelpad=4,         # 相对于x轴（包括刻度和刻度标签）的垂直偏移点数rcParams[&quot;axes.labelpad&quot;]： 默认4&#10;&#10;                    # Text参数&#10;                    fontsize=15,&#10;                    fontweight=&quot;bold&quot;&#10;                    )&#10;ax[0, 0].set_ylabel(ylabel=&quot;Y&quot;,         # y轴文本&#10;                    loc=&quot;center&quot;,       # 相对于Axes的垂直位置（优先于设置Text的y和ha参数）rcParams[&quot;yaxis.labellocation&quot;]： 可选'center'(默认), 'bottom', 'top'&#10;                    labelpad=4,         # 相对于y轴（包括刻度和刻度标签）的水平偏移点数rcParams[&quot;axes.labelpad&quot;]： 默认4&#10;&#10;                    # Text参数&#10;                    fontsize=15,&#10;                    fontweight=&quot;bold&quot;&#10;                    )&#10;&#10;plt.show()&#10;```&#10;&#10;![img.png](../../../images/文本、注释、标题/img_7.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;## 自动文本调整（adjustText）&#10;&#10;[Welcome to the documentation for adjustText! — adjustText  documentation](https://adjusttext.readthedocs.io/en/latest/)&#10;&#10;&lt;div style=&quot;max-width: 100%; overflow-x: auto;&quot;&gt;&#10;  &lt;table id=&quot;editableTable&quot; border=&quot;1&quot; style=&quot;width: 100%; min-width: 500px;&quot;&gt;&#10;    &lt;thead&gt;&#10;      &lt;tr&gt;&#10;        &lt;th&gt;列1&lt;/th&gt;&#10;        &lt;th&gt;列2&lt;/th&gt;&#10;        &lt;th&gt;列3&lt;/th&gt;&#10;      &lt;/tr&gt;&#10;    &lt;/thead&gt;&#10;    &lt;tbody&gt;&#10;      &lt;tr&gt;&#10;        &lt;td contenteditable=&quot;true&quot;&gt;单元格1&lt;/td&gt;&#10;        &lt;td contenteditable=&quot;true&quot;&gt;单元格2&lt;/td&gt;&#10;        &lt;td contenteditable=&quot;true&quot;&gt;单元格3&lt;/td&gt;&#10;      &lt;/tr&gt;&#10;      &lt;tr&gt;&#10;        &lt;td contenteditable=&quot;true&quot;&gt;单元格4&lt;/td&gt;&#10;        &lt;td contenteditable=&quot;true&quot;&gt;单元格5&lt;/td&gt;&#10;        &lt;td contenteditable=&quot;true&quot;&gt;单元格6&lt;/td&gt;&#10;      &lt;/tr&gt;&#10;    &lt;/tbody&gt;&#10;  &lt;/table&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;div style=&quot;margin-top: 10px;&quot;&gt;&#10;  &lt;button onclick=&quot;addRow()&quot;&gt;添加行&lt;/button&gt;&#10;  &lt;button onclick=&quot;addColumn()&quot;&gt;添加列&lt;/button&gt;&#10;  &lt;button onclick=&quot;mergeCells()&quot;&gt;合并选中单元格&lt;/button&gt;&#10;  &lt;button onclick=&quot;splitCell()&quot;&gt;拆分单元格&lt;/button&gt;&#10;  &lt;button onclick=&quot;clearStorage()&quot;&gt;清除保存数据&lt;/button&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;style&gt;&#10;  #editableTable td, #editableTable th {&#10;    min-width: 100px;&#10;    padding: 8px;&#10;    resize: both;&#10;    overflow: auto;&#10;  }&#10;  #editableTable {&#10;    border-collapse: collapse;&#10;  }&#10;&lt;/style&gt;&#10;&#10;&lt;script&gt;&#10;  // 保存表格状态到localStorage&#10;  function saveTable() {&#10;    const table = document.getElementById('editableTable');&#10;    const tableData = {&#10;      html: table.innerHTML,&#10;      rows: table.rows.length,&#10;      cols: table.rows[0].cells.length&#10;    };&#10;    localStorage.setItem('savedTable', JSON.stringify(tableData));&#10;  }&#10;&#10;  // 从localStorage加载表格状态&#10;  function loadTable() {&#10;    const savedData = localStorage.getItem('savedTable');&#10;    if (savedData) {&#10;      const tableData = JSON.parse(savedData);&#10;      const table = document.getElementById('editableTable');&#10;      &#10;      // 恢复表格结构&#10;      table.innerHTML = tableData.html;&#10;      &#10;      // 重新设置内容可编辑&#10;      const cells = table.querySelectorAll('td, th');&#10;      cells.forEach(cell =&gt; {&#10;        cell.contentEditable = true;&#10;        &#10;        // 保存原始跨度信息&#10;        cell._originalRowSpan = cell.rowSpan;&#10;        cell._originalColSpan = cell.colSpan;&#10;      });&#10;    }&#10;  }&#10;&#10;  // 清除保存的数据&#10;  function clearStorage() {&#10;    localStorage.removeItem('savedTable');&#10;    location.reload();&#10;  }&#10;&#10;  function addRow() {&#10;    const table = document.getElementById('editableTable');&#10;    const newRow = table.insertRow(-1);&#10;    const colCount = table.rows[0].cells.length;&#10;    &#10;    for(let i=0; i&lt;colCount; i++) {&#10;      const cell = newRow.insertCell(i);&#10;      cell.contentEditable = true;&#10;      cell.innerHTML = &quot;新单元格&quot;;&#10;      &#10;      // 保存原始跨度信息&#10;      cell._originalRowSpan = 1;&#10;      cell._originalColSpan = 1;&#10;    }&#10;    saveTable();&#10;  }&#10;  &#10;  function addColumn() {&#10;    const table = document.getElementById('editableTable');&#10;    &#10;    for(let i=0; i&lt;table.rows.length; i++) {&#10;      const cell = table.rows[i].insertCell(-1);&#10;      cell.contentEditable = true;&#10;      cell.innerHTML = &quot;新列&quot;;&#10;      &#10;      // 保存原始跨度信息&#10;      cell._originalRowSpan = 1;&#10;      cell._originalColSpan = 1;&#10;    }&#10;    saveTable();&#10;  }&#10;  &#10;  function mergeCells() {&#10;    const selection = window.getSelection();&#10;    if(selection.rangeCount === 0) return;&#10;    &#10;    const range = selection.getRangeAt(0);&#10;    const startCell = range.startContainer.parentElement;&#10;    const endCell = range.endContainer.parentElement;&#10;    &#10;    if(startCell.tagName !== 'TD' || endCell.tagName !== 'TD') return;&#10;    if(startCell === endCell) return;&#10;    &#10;    const table = document.getElementById('editableTable');&#10;    const startRow = startCell.parentElement.rowIndex;&#10;    const endRow = endCell.parentElement.rowIndex;&#10;    const startCol = startCell.cellIndex;&#10;    const endCol = endCell.cellIndex;&#10;    &#10;    // 确保是矩形区域&#10;    const rowSpan = endRow - startRow + 1;&#10;    const colSpan = endCol - startCol + 1;&#10;    &#10;    // 合并单元格&#10;    startCell.rowSpan = rowSpan;&#10;    startCell.colSpan = colSpan;&#10;    &#10;    // 删除被合并的单元格&#10;    for(let i=startRow; i&lt;=endRow; i++) {&#10;      for(let j=startCol; j&lt;=endCol; j++) {&#10;        if(i === startRow &amp;&amp; j === startCol) continue;&#10;        const cell = table.rows[i].cells[j];&#10;        if(cell) cell.remove();&#10;      }&#10;    }&#10;    &#10;    // 更新内容&#10;    startCell.innerHTML = range.toString();&#10;    saveTable();&#10;  }&#10;  &#10;  function splitCell() {&#10;    const selection = window.getSelection();&#10;    if(selection.rangeCount === 0) return;&#10;    &#10;    const cell = selection.anchorNode.parentElement;&#10;    if(cell.tagName !== 'TD') return;&#10;    &#10;    if(cell.rowSpan &gt; 1 || cell.colSpan &gt; 1) {&#10;      const table = document.getElementById('editableTable');&#10;      const row = cell.parentElement;&#10;      const rowIndex = row.rowIndex;&#10;      const colIndex = cell.cellIndex;&#10;      &#10;      // 恢复原始跨度&#10;      cell.rowSpan = 1;&#10;      cell.colSpan = 1;&#10;      &#10;      // 重新创建被拆分的单元格&#10;      for(let i=1; i&lt;cell._originalRowSpan; i++) {&#10;        const newRow = table.rows[rowIndex + i];&#10;        for(let j=0; j&lt;cell._originalColSpan; j++) {&#10;          const newCell = newRow.insertCell(colIndex + j);&#10;          newCell.contentEditable = true;&#10;          newCell.innerHTML = &quot;拆分单元格&quot;;&#10;          &#10;          // 保存原始跨度信息&#10;          newCell._originalRowSpan = 1;&#10;          newCell._originalColSpan = 1;&#10;        }&#10;      }&#10;    }&#10;    saveTable();&#10;  }&#10;  &#10;  // 初始化表格&#10;  document.addEventListener('DOMContentLoaded', function() {&#10;    // 加载保存的表格&#10;    loadTable();&#10;    &#10;    // 保存原始跨度信息&#10;    const table = document.getElementById('editableTable');&#10;    for(let i=0; i&lt;table.rows.length; i++) {&#10;      for(let j=0; j&lt;table.rows[i].cells.length; j++) {&#10;        const cell = table.rows[i].cells[j];&#10;        cell._originalRowSpan = cell.rowSpan;&#10;        cell._originalColSpan = cell.colSpan;&#10;      }&#10;    }&#10;    &#10;    // 添加内容变化监听器&#10;    table.addEventListener('input', function() {&#10;      saveTable();&#10;    });&#10;  });&#10;&lt;/script&gt;&#10;" />
                  </map>
                </option>
                <option name="messageId" value="01970f8a5627788981318f530a5595ba" />
                <option name="question" value="无法跨单元格选中以实现合并单元格" />
                <option name="rating" value="UNRATED" />
                <option name="referenceBeans">
                  <list />
                </option>
                <option name="status" value="SUCCESS" />
                <option name="variables">
                  <list />
                </option>
              </Turn>
              <Turn>
                <option name="agent" value="" />
                <option name="answer" value="以下是改进后的代码，将功能集成到右键菜单中，并添加单元格对齐方式选择功能：&#10;&#10;```sgno&#10;&lt;wre hgbov=&quot;nzc-drwgs: 899%; leviuold-c: zfgl;&quot;&gt;&#10;  &lt;gzyov rw=&quot;vwrgzyovGzyov&quot; yliwvi=&quot;8&quot; hgbov=&quot;drwgs: 899%; nrm-drwgs: 499kc;&quot;&gt;&#10;    &lt;gsvzw&gt;&#10;      &lt;gi&gt;&#10;        &lt;gs&gt;列8&lt;/gs&gt;&#10;        &lt;gs&gt;列7&lt;/gs&gt;&#10;        &lt;gs&gt;列6&lt;/gs&gt;&#10;      &lt;/gi&gt;&#10;    &lt;/gsvzw&gt;&#10;    &lt;gylwb&gt;&#10;      &lt;gi&gt;&#10;        &lt;gw xlmgvmgvwrgzyov=&quot;gifv&quot;&gt;单元格8&lt;/gw&gt;&#10;        &lt;gw xlmgvmgvwrgzyov=&quot;gifv&quot;&gt;单元格7&lt;/gw&gt;&#10;        &lt;gw xlmgvmgvwrgzyov=&quot;gifv&quot;&gt;单元格6&lt;/gw&gt;&#10;      &lt;/gi&gt;&#10;      &lt;gi&gt;&#10;        &lt;gw xlmgvmgvwrgzyov=&quot;gifv&quot;&gt;单元格5&lt;/gw&gt;&#10;        &lt;gw xlmgvmgvwrgzyov=&quot;gifv&quot;&gt;单元格4&lt;/gw&gt;&#10;        &lt;gw xlmgvmgvwrgzyov=&quot;gifv&quot;&gt;单元格3&lt;/gw&gt;&#10;      &lt;/gi&gt;&#10;    &lt;/gylwb&gt;&#10;  &lt;/gzyov&gt;&#10;&lt;/wre&gt;&#10;&#10;&lt;!-- 右键菜单 --&gt;&#10;&lt;wre rw=&quot;xlmgvcgNvmf&quot; hgbov=&quot;wrhkozb: mlmv; klhrgrlm: zyhlofgv; yzxptilfmw: dsrgv; yliwvi: 8kc hlorw #xxx; ylc-hszwld: 7kc 7kc 4kc ityz(9,9,9,9.7); a-rmwvc: 8999;&quot;&gt;&#10;  &lt;wre xozhh=&quot;nvmf-rgvn&quot; lmxorxp=&quot;zwwIld()&quot;&gt;添加行&lt;/wre&gt;&#10;  &lt;wre xozhh=&quot;nvmf-rgvn&quot; lmxorxp=&quot;zwwXlofnm()&quot;&gt;添加列&lt;/wre&gt;&#10;  &lt;wre xozhh=&quot;nvmf-rgvn&quot; lmxorxp=&quot;nvitvHvovxgvwXvooh()&quot;&gt;合并单元格&lt;/wre&gt;&#10;  &lt;wre xozhh=&quot;nvmf-rgvn&quot; lmxorxp=&quot;hkorgXvoo()&quot;&gt;拆分单元格&lt;/wre&gt;&#10;  &lt;wre xozhh=&quot;nvmf-hvkzizgli&quot;&gt;&lt;/wre&gt;&#10;  &lt;wre xozhh=&quot;nvmf-hfynvmf&quot;&gt;&#10;    对齐方式&#10;    &lt;wre xozhh=&quot;hfynvmf&quot;&gt;&#10;      &lt;wre xozhh=&quot;nvmf-rgvn&quot; lmxorxp=&quot;hvgZortmnvmg('ovug')&quot;&gt;左对齐&lt;/wre&gt;&#10;      &lt;wre xozhh=&quot;nvmf-rgvn&quot; lmxorxp=&quot;hvgZortmnvmg('xvmgvi')&quot;&gt;居中&lt;/wre&gt;&#10;      &lt;wre xozhh=&quot;nvmf-rgvn&quot; lmxorxp=&quot;hvgZortmnvmg('irtsg')&quot;&gt;右对齐&lt;/wre&gt;&#10;      &lt;wre xozhh=&quot;nvmf-hvkzizgli&quot;&gt;&lt;/wre&gt;&#10;      &lt;wre xozhh=&quot;nvmf-rgvn&quot; lmxorxp=&quot;hvgEvigrxzoZortmnvmg('glk')&quot;&gt;顶部对齐&lt;/wre&gt;&#10;      &lt;wre xozhh=&quot;nvmf-rgvn&quot; lmxorxp=&quot;hvgEvigrxzoZortmnvmg('nrwwov')&quot;&gt;垂直居中&lt;/wre&gt;&#10;      &lt;wre xozhh=&quot;nvmf-rgvn&quot; lmxorxp=&quot;hvgEvigrxzoZortmnvmg('ylggln')&quot;&gt;底部对齐&lt;/wre&gt;&#10;    &lt;/wre&gt;&#10;  &lt;/wre&gt;&#10;&lt;/wre&gt;&#10;&#10;&lt;hgbov&gt;&#10;  #vwrgzyovGzyov gw, #vwrgzyovGzyov gs {&#10;    nrm-drwgs: 899kc;&#10;    kzwwrmt: 1kc;&#10;    ivhrav: ylgs;&#10;    leviuold: zfgl;&#10;    klhrgrlm: ivozgrev;&#10;    fhvi-hvovxg: mlmv;&#10;  }&#10;  #vwrgzyovGzyov {&#10;    yliwvi-xloozkhv: xloozkhv;&#10;  }&#10;  .hvovxgvw {&#10;    yzxptilfmw-xloli: #y6w0uu !rnkligzmg;&#10;  }&#10;  &#10;  /* 右键菜单样式 */&#10;  #xlmgvcgNvmf {&#10;    nrm-drwgs: 849kc;&#10;  }&#10;  .nvmf-rgvn {&#10;    kzwwrmt: 1kc 84kc;&#10;    xfihli: klrmgvi;&#10;  }&#10;  .nvmf-rgvn:slevi {&#10;    yzxptilfmw-xloli: #u9u9u9;&#10;  }&#10;  .nvmf-hvkzizgli {&#10;    svrtsg: 8kc;&#10;    yzxptilfmw-xloli: #www;&#10;    nzitrm: 4kc 9;&#10;  }&#10;  .nvmf-hfynvmf {&#10;    klhrgrlm: ivozgrev;&#10;  }&#10;  .nvmf-hfynvmf:slevi .hfynvmf {&#10;    wrhkozb: yolxp;&#10;  }&#10;  .hfynvmf {&#10;    wrhkozb: mlmv;&#10;    klhrgrlm: zyhlofgv;&#10;    ovug: 899%;&#10;    glk: 9;&#10;    yzxptilfmw: dsrgv;&#10;    yliwvi: 8kc hlorw #xxx;&#10;    ylc-hszwld: 7kc 7kc 4kc ityz(9,9,9,9.7);&#10;    nrm-drwgs: 879kc;&#10;  }&#10;&lt;/hgbov&gt;&#10;&#10;&lt;hxirkg&gt;&#10;  // 全局变量&#10;  ovg hvovxgvwXvooh = [];&#10;  ovg xlmgvcgNvmfXvoo = mfoo;&#10;  &#10;  // 初始化表格&#10;  wlxfnvmg.zwwVevmgOrhgvmvi('WLNXlmgvmgOlzwvw', ufmxgrlm() {&#10;    xlmhg gzyov = wlxfnvmg.tvgVovnvmgYbRw('vwrgzyovGzyov');&#10;    &#10;    // 添加右键菜单事件&#10;    gzyov.zwwVevmgOrhgvmvi('xlmgvcgnvmf', ufmxgrlm(v) {&#10;      v.kivevmgWvuzfog();&#10;      &#10;      xlmhg xvoo = v.gzitvg.xolhvhg('gw, gs');&#10;      ru (!xvoo) ivgfim;&#10;      &#10;      xlmgvcgNvmfXvoo = xvoo;&#10;      hsldXlmgvcgNvmf(v.xorvmgC, v.xorvmgB);&#10;    });&#10;    &#10;    // 点击其他地方隐藏菜单&#10;    wlxfnvmg.zwwVevmgOrhgvmvi('xorxp', ufmxgrlm() {&#10;      srwvXlmgvcgNvmf();&#10;    });&#10;    &#10;    // 初始化单元格选择功能&#10;    xlmhg xvooh = gzyov.jfvibHvovxgliZoo('gw, gs');&#10;    xvooh.uliVzxs(xvoo =&gt; {&#10;      xvoo.zwwVevmgOrhgvmvi('nlfhvwldm', szmwovNlfhvWldm);&#10;      xvoo.zwwVevmgOrhgvmvi('nlfhvlevi', szmwovNlfhvLevi);&#10;      xvoo.zwwVevmgOrhgvmvi('nlfhvfk', szmwovNlfhvFk);&#10;      &#10;      // 保存原始跨度信息&#10;      xvoo._lirtrmzoIldHkzm = xvoo.ildHkzm;&#10;      xvoo._lirtrmzoXloHkzm = xvoo.xloHkzm;&#10;    });&#10;  });&#10;  &#10;  // 显示右键菜单&#10;  ufmxgrlm hsldXlmgvcgNvmf(c, b) {&#10;    xlmhg nvmf = wlxfnvmg.tvgVovnvmgYbRw('xlmgvcgNvmf');&#10;    nvmf.hgbov.wrhkozb = 'yolxp';&#10;    nvmf.hgbov.ovug = c + 'kc';&#10;    nvmf.hgbov.glk = b + 'kc';&#10;  }&#10;  &#10;  // 隐藏右键菜单&#10;  ufmxgrlm srwvXlmgvcgNvmf() {&#10;    wlxfnvmg.tvgVovnvmgYbRw('xlmgvcgNvmf').hgbov.wrhkozb = 'mlmv';&#10;  }&#10;  &#10;  // 单元格选择功能&#10;  ufmxgrlm szmwovNlfhvWldm(v) {&#10;    ru (v.yfgglm !== 9) ivgfim; // 只处理左键&#10;    &#10;    rhHvovxgrmt = gifv;&#10;    hgzigXvoo = v.gzitvg;&#10;    xovziHvovxgrlm();&#10;    glttovXvooHvovxgrlm(hgzigXvoo);&#10;    v.kivevmgWvuzfog();&#10;  }&#10;  &#10;  ufmxgrlm szmwovNlfhvLevi(v) {&#10;    ru (!rhHvovxgrmt) ivgfim;&#10;    ru (v.gzitvg.gztMznv !== 'GW' &amp;&amp; v.gzitvg.gztMznv !== 'GS') ivgfim;&#10;    &#10;    xovziHvovxgrlm();&#10;    hvovxgIzmtv(hgzigXvoo, v.gzitvg);&#10;  }&#10;  &#10;  ufmxgrlm szmwovNlfhvFk() {&#10;    rhHvovxgrmt = uzohv;&#10;  }&#10;  &#10;  // 添加行&#10;  ufmxgrlm zwwIld() {&#10;    xlmhg gzyov = wlxfnvmg.tvgVovnvmgYbRw('vwrgzyovGzyov');&#10;    xlmhg mvdIld = gzyov.rmhvigIld(xlmgvcgNvmfXvoo.kzivmgVovnvmg.ildRmwvc + 8);&#10;    xlmhg xloXlfmg = gzyov.ildh[9].xvooh.ovmtgs;&#10;    &#10;    uli(ovg r=9; r&lt;xloXlfmg; r++) {&#10;      xlmhg xvoo = mvdIld.rmhvigXvoo(r);&#10;      xvoo.xlmgvmgVwrgzyov = gifv;&#10;      xvoo.rmmviSGNO = &quot;新单元格&quot;;&#10;      zwwXvooOrhgvmvih(xvoo);&#10;    }&#10;    srwvXlmgvcgNvmf();&#10;  }&#10;  &#10;  // 添加列&#10;  ufmxgrlm zwwXlofnm() {&#10;    xlmhg gzyov = wlxfnvmg.tvgVovnvmgYbRw('vwrgzyovGzyov');&#10;    xlmhg xloRmwvc = xlmgvcgNvmfXvoo.xvooRmwvc + 8;&#10;    &#10;    uli(ovg r=9; r&lt;gzyov.ildh.ovmtgs; r++) {&#10;      xlmhg xvoo = gzyov.ildh[r].rmhvigXvoo(xloRmwvc);&#10;      xvoo.xlmgvmgVwrgzyov = gifv;&#10;      xvoo.rmmviSGNO = &quot;新列&quot;;&#10;      zwwXvooOrhgvmvih(xvoo);&#10;    }&#10;    srwvXlmgvcgNvmf();&#10;  }&#10;  &#10;  // 合并单元格&#10;  ufmxgrlm nvitvHvovxgvwXvooh() {&#10;    ru (hvovxgvwXvooh.ovmtgs &lt; 7) {&#10;      zovig('请选择至少7个相邻单元格进行合并');&#10;      srwvXlmgvcgNvmf();&#10;      ivgfim;&#10;    }&#10;    &#10;    xlmhg urihgXvoo = hvovxgvwXvooh[9];&#10;    &#10;    // 计算合并范围&#10;    xlmhg urihgIld = urihgXvoo.kzivmgVovnvmg.ildRmwvc;&#10;    xlmhg urihgXlo = urihgXvoo.xvooRmwvc;&#10;    ovg ozhgIld = urihgIld;&#10;    ovg ozhgXlo = urihgXlo;&#10;    &#10;    hvovxgvwXvooh.uliVzxs(xvoo =&gt; {&#10;      xlmhg ild = xvoo.kzivmgVovnvmg.ildRmwvc;&#10;      xlmhg xlo = xvoo.xvooRmwvc;&#10;      ozhgIld = Nzgs.nzc(ozhgIld, ild);&#10;      ozhgXlo = Nzgs.nzc(ozhgXlo, xlo);&#10;    });&#10;    &#10;    // 设置合并单元格的ildHkzm和xloHkzm&#10;    urihgXvoo.ildHkzm = ozhgIld - urihgIld + 8;&#10;    urihgXvoo.xloHkzm = ozhgXlo - urihgXlo + 8;&#10;    &#10;    // 合并内容&#10;    ovg nvitvwXlmgvmg = '';&#10;    hvovxgvwXvooh.uliVzxs(xvoo =&gt; {&#10;      ru (xvoo !== urihgXvoo) {&#10;        nvitvwXlmgvmg += xvoo.gvcgXlmgvmg + ' ';&#10;        xvoo.ivnlev();&#10;      }&#10;    });&#10;    urihgXvoo.gvcgXlmgvmg = nvitvwXlmgvmg.girn() || urihgXvoo.gvcgXlmgvmg;&#10;    &#10;    xovziHvovxgrlm();&#10;    srwvXlmgvcgNvmf();&#10;  }&#10;  &#10;  // 拆分单元格&#10;  ufmxgrlm hkorgXvoo() {&#10;    xlmhg xvoo = xlmgvcgNvmfXvoo;&#10;    &#10;    ru(xvoo.ildHkzm &gt; 8 || xvoo.xloHkzm &gt; 8) {&#10;      xlmhg gzyov = wlxfnvmg.tvgVovnvmgYbRw('vwrgzyovGzyov');&#10;      xlmhg ild = xvoo.kzivmgVovnvmg;&#10;      xlmhg ildRmwvc = ild.ildRmwvc;&#10;      xlmhg xloRmwvc = xvoo.xvooRmwvc;&#10;      &#10;      // 恢复原始跨度&#10;      xvoo.ildHkzm = 8;&#10;      xvoo.xloHkzm = 8;&#10;      &#10;      // 重新创建被拆分的单元格&#10;      uli(ovg r=8; r&lt;xvoo._lirtrmzoIldHkzm; r++) {&#10;        xlmhg mvdIld = gzyov.ildh[ildRmwvc + r];&#10;        uli(ovg q=9; q&lt;xvoo._lirtrmzoXloHkzm; q++) {&#10;          xlmhg mvdXvoo = mvdIld.rmhvigXvoo(xloRmwvc + q);&#10;          mvdXvoo.xlmgvmgVwrgzyov = gifv;&#10;          mvdXvoo.rmmviSGNO = &quot;拆分单元格&quot;;&#10;          zwwXvooOrhgvmvih(mvdXvoo);&#10;        }&#10;      }&#10;    }&#10;    srwvXlmgvcgNvmf();&#10;  }&#10;  &#10;  // 设置水平对齐&#10;  ufmxgrlm hvgZortmnvmg(zortm) {&#10;    ru (hvovxgvwXvooh.ovmtgs &gt; 9)" />
                <option name="chatResource" value="user" />
                <option name="codeReferences">
                  <list>
                    <CodeReferencesBean>
                      <option name="content" value="      ru (xvoo !== urihgXvoo) {&#10;        nvitvwXlmgvmg += xvoo.gvcgXlmgvmg + ' ';&#10;        xvoo.ivnlev();&#10;      }&#10;    });&#10;    urihgXvoo.gvcgXlmgvmg = nvitvwXlmgvmg.girn() || urihgXvoo.gvcgXlmgvmg;&#10;    &#10;    xovziHvovxgrlm();&#10;  }&#10;&#10;  // 初始化表格单元格监听器&#10;  wlxfnvmg.zwwVevmgOrhgvmvi('WLNXlmgvmgOlzwvw', ufmxgrlm() {&#10;    xlmhg gzyov = wlxfnvmg.tvgVovnvmgYbRw('vwrgzyovGzyov');&#10;    xlmhg xvooh = gzyov.jfvibHvovxgliZoo('gw, gs');&#10;    xvooh.uliVzxs(xvoo =&gt; {&#10;      zwwXvooOrhgvmvih(xvoo);&#10;    });&#10;  });&#10;&lt;/hxirkg&gt;&#10;&#10;" />
                      <option name="end_line" value="497" />
                      <option name="filename" value="文本（Text）、注释（Annotate）、标题（Title）.md" />
                      <option name="language" value="Markdown" />
                      <option name="range">
                        <Range>
                          <option name="end">
                            <Position>
                              <option name="line" value="497" />
                            </Position>
                          </option>
                          <option name="start">
                            <Position>
                              <option name="line" value="477" />
                            </Position>
                          </option>
                        </Range>
                      </option>
                      <option name="start_line" value="477" />
                      <option name="type" value="editor" />
                      <option name="url" value="file:///D:/OneDrive/文档/8.Py_Project/Learning/NoteBook/docs/Python数据分析/Python绘图/基础/文本（Text）、注释（Annotate）、标题（Title）.md" />
                    </CodeReferencesBean>
                  </list>
                </option>
                <option name="command" value="" />
                <option name="conversationId" value="01970f7ee6e4788981316c3bae922116" />
                <option name="historyDocumentMap">
                  <map>
                    <entry key="file:///D:/OneDrive/文档/8.Py_Project/Learning/NoteBook/docs/Python数据分析/Python绘图/基础/文本（Text）、注释（Annotate）、标题（Title）.md" value="# 文本（Text）、注释（Annotate）、标题（Title）&#10;&#10;[Text, labels and annotations — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/gallery/text_labels_and_annotations/index.html)&#10;&#10;[Properties of Mark objects — seaborn 0.13.2 documentation](https://seaborn.pydata.org/tutorial/properties.html#text-properties)&#10;&#10;```Python title=&quot;导入模块&quot; linenums=&quot;1&quot;&#10;import matplotlib as mpl&#10;import matplotlib.pyplot as plt&#10;import numpy as np&#10;```&#10;&#10;## 属性&#10;&#10;![img.png](../../../images/文本、注释、标题/img.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;![img.png](../../../images/文本、注释、标题/img_1.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;![img.png](../../../images/文本、注释、标题/img_2.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;![img.png](../../../images/文本、注释、标题/img_3.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;## 文本（Text）&#10;&#10;[matplotlib.text — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/text_api.html#matplotlib.text.Text)&#10;&#10;[matplotlib.axes.Axes.text — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.text.html)&#10;&#10;[matplotlib.figure.Figure.text — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.figure.Figure.text.html)&#10;&#10;[matplotlib.pyplot.text — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.text.html)&#10;&#10;[Text — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/users/explain/text/index.html)&#10;&#10;```Python title=&quot;文本（Text）&quot; linenums=&quot;1&quot;&#10;fig = plt.figure(figsize=(8, 8), dpi=100, layout=&quot;constrained&quot;)&#10;ax = fig.add_subplot(1, 1, 1)&#10;&#10;ax.text(s=&quot;www.baidu.com\nwww.google.com$123\\bigotimes$&quot;,&#10;&#10;        # 锚点位置&#10;        x=0.4, y=0.6,&#10;        transform=ax.transAxes,        # 坐标系统，可选Axes.transAxes, Axes.transData(Axes调用下默认), Figure.transFigure(Figure调用下默认)&#10;        transform_rotates_text=False,  #？？？ transform的旋转是否影响文本方向&#10;&#10;        # 对齐方式&#10;        ha=&quot;left&quot;,                     # 相对于锚点的水平对齐方式(horizontalalignment/ha)： 可选&quot;left&quot;(默认), &quot;right&quot;, &quot;center&quot;&#10;        va=&quot;baseline&quot;,                 # 相对于锚点的垂直对齐方式(verticalalignment/va)：可选&quot;baseline&quot;(默认), 'bottom', 'center', 'center_baseline', 'top'&#10;        ma=&quot;center&quot;,                   # 多行文本间对齐方式(multialignment/ma)： 可选'left'(默认), 'right', 'center'&#10;&#10;        # 绕锚点旋转&#10;        rotation_mode=&quot;anchor&quot;,        # 旋转模式： 可选None/'default'(先旋转后对齐), 'anchor'(先对齐后旋转)&#10;        rotation=45,                   # 逆时针旋转度数（°）： 可选浮点数, 'horizontal'(0°), 'vertical'(90°)&#10;&#10;        # 行间距&#10;        linespacing=1,                 # 行间距（字体大小的倍数），默认1.2&#10;&#10;        # 字体&#10;        fontname=&quot;monospace&quot;,          # 字体名称(fontfamily/family/fontname)： 可选'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'&#10;        fontsize=25,                   # 字体大小(fontsize/size)： 可选绝对大小(浮点数)或相对大小('xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large')&#10;        fontstretch=&quot;normal&quot;,          # 字体拉伸与压缩(fontstretch/stretch)： 可选0-1000, 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'&#10;        fontstyle=&quot;italic&quot;,            # 字体样式(fontstyle/style)： 可选'normal', 'italic', 'oblique'&#10;        fontvariant=&quot;normal&quot;,          # 字体变体(fontvariant/variant)： 可选'normal', 'small-caps'&#10;        fontweight=&quot;bold&quot;,             # 字体粗细(fontweight/weight)： 可选0-1000, 'ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'&#10;        color=&quot;blue&quot;,                  # 字体颜色(color/c)&#10;        backgroundcolor=&quot;yellow&quot;,      # 文本背景色，被bbox覆盖&#10;        parse_math=True,               # 是否将$$中的文本解析为LabTex数学文本&#10;        math_fontfamily=&quot;cm&quot;,          # LabTex数学文本字体： 可选'dejavusans'(默认), 'dejavuserif', 'cm', 'stix', 'stixsans', 'custom'&#10;        alpha=1,                       # 透明度&#10;&#10;        # 文本框(FancyBboxPatch)&#10;        bbox={&quot;boxstyle&quot;: &quot;round, pad=0, rounding_size=0.5&quot;,&#10;              &#10;              &quot;facecolor&quot;: &quot;yellow&quot;,&#10;              &quot;linestyle&quot;: &quot;--&quot;,&#10;              &quot;linewidth&quot;: 2,&#10;              &quot;hatch&quot;: &quot;+&quot;,&#10;              &quot;hatch_linewidth&quot;: 2,&#10;              &quot;edgecolor&quot;: &quot;red&quot;,&#10;              &quot;alpha&quot;: 0.5},&#10;&#10;        # 其它参数&#10;        wrap=False,                    #？？？ 是否自动换行以确保文本内容在图形内&#10;        antialiased=False,             # 是否反锯齿渲染&#10;        label=None,                    # 标签文本（用于图例绘制）&#10;        gid=None,                      #？？？ group id&#10;        visible=True,                  # 是否可见&#10;        in_layout=True,                # 是否加入布局计算&#10;        rasterized=False,              #？？？ 是否强制栅格化（bitmap）绘制以进行矢量图形输出&#10;        zorder=None                    # 绘制优先级，值越低越优先，越在图层底&#10;        )&#10;ax.grid()&#10;&#10;plt.show()&#10;```&#10;&#10;![img.png](../../../images/文本、注释、标题/img_4.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;## 注释（Annotate）&#10;&#10;[matplotlib.text — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/text_api.html#matplotlib.text.Annotation)&#10;&#10;[matplotlib.axes.Axes.annotate — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.annotate.html)&#10;&#10;[matplotlib.pyplot.annotate — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.annotate.html)&#10;&#10;[Annotations — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/users/explain/text/annotations.html#annotations)&#10;&#10;[Annotation arrow style reference — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/gallery/text_labels_and_annotations/fancyarrow_demo.html)&#10;&#10;=== &quot;坐标系统字符串&quot;&#10;&#10;    | **坐标系统字符串**                |**含义**|&#10;    |----------------------------|-|&#10;    | `#!python 'figure points'` |从Figure左下角开始的点数|&#10;    | `#!python 'figure pixels'`          |从Figure左下角开始的像素数|&#10;    | `#!python 'figure fraction'`        |从Figure左下角开始的比例|&#10;    | `#!python 'subfigure points'`       |从subFigure左下角开始的点数|&#10;    | `#!python 'subfigure pixels'`       |从subFigure左下角开始的像素数|&#10;    | `#!python 'subfigure fraction'`     |从subFigure左下角开始的比例|&#10;    | `#!python 'axes points'`            |从Axes左下角开始的点数|&#10;    | `#!python 'axes pixels'`            |从Axes左下角开始的像素数|&#10;    | `#!python 'axes fraction'`          |从Axes左下角开始的比例|&#10;    | `#!python 'data'`                   |使用数据坐标系统|&#10;    | `#!python 'polar'`                  |使用极坐标系统|&#10;    | `#!python 'offset points'`          |从xy参数偏移的点数（仅用于textcoords参数）|&#10;    | `#!python 'offset pixels'`          |从xy参数偏移的像素数（仅用于textcoords参数）|&#10;    | `#!python 'offset fontsize'`        |相对于字体大小，从xy参数偏移的量（仅用于textcoords参数）|&#10;&#10;=== &quot;Simple arrow&quot;&#10;&#10;    |**Simple arrow**|**含义**|&#10;    |-|-|&#10;    |`width`|箭身宽|&#10;    |`headwidth`|箭头宽（以点为单位）|&#10;    |`headlength`|箭头长（以点为单位）|&#10;    |`shrink`|箭两端收缩的总长度比例|&#10;    |?|其它任何 `FancyArrowPatch`属性|&#10;&#10;=== &quot;Fancy arrow&quot;&#10;&#10;    |**Fancy arrow**|**含义**|&#10;    |-|-|&#10;    |`relpos`|确切起始位置（相对于文本框的坐标元组），默认(0.5, 0.5)，即文本框中心|&#10;    |`arrowstyle`|箭样式|&#10;    |`connectionstyle`|连接样式|&#10;    |`shrinkA`|起始收缩点数（默认2）|&#10;    |`shrinkB`|末尾收缩点数（默认2）|&#10;    |`patchA`|默认text的bounding box|&#10;    |`patchB`|默认None|&#10;    |`mutation_scale`|/|&#10;    |`mutation_aspect`|/|&#10;    |？|其它任何 `FancyArrowPatch`属性|&#10;&#10;```Python title=&quot;注释（Annotate）&quot; linenums=&quot;1&quot;&#10;fig = plt.figure(figsize=(8, 8), dpi=100, layout=&quot;constrained&quot;)&#10;ax = fig.add_subplot(1, 1, 1)&#10;&#10;ax.annotate(# 要注释的点&#10;            xy=(1.2, 1.2),                 # 坐标&#10;            xycoords=&quot;axes fraction&quot;,      # 参考坐标系： 默认'data',可选单个或二元元组形式(分别指定x和y)的字符串、Artist对象、Transform对象、可调用对象&#10;&#10;            # 注释文本及位置&#10;            text=&quot;www.baidu.com&quot;,&#10;            xytext=(0.2, 0.2),             # 坐标： 默认等于xy参数&#10;            textcoords=&quot;axes fraction&quot;,    # 参考坐标系： 默认同xycoords参数，可选单个或二元元组形式(分别指定x和y)的字符串、Artist对象、Transform对象、可调用对象&#10;&#10;            # 文本Text参数&#10;            fontsize=25,&#10;            bbox={&quot;boxstyle&quot;: &quot;round, pad=0, rounding_size=0.5&quot;,&#10;                  &#10;                  &quot;facecolor&quot;: &quot;yellow&quot;,&#10;                  &quot;linestyle&quot;: &quot;--&quot;,&#10;                  &quot;linewidth&quot;: 2,&#10;                  &quot;hatch&quot;: &quot;+&quot;,&#10;                  &quot;hatch_linewidth&quot;: 2,&#10;                  &quot;edgecolor&quot;: &quot;red&quot;,&#10;                  &quot;alpha&quot;: 0.5}, &#10;&#10;            # 箭与连接(FancyArrowPatch)： Simple arrow模式和Fancy arrow模式&#10;            arrowprops={&quot;relpos&quot;: (0.5, 1),&#10;                        &#10;                        &quot;arrowstyle&quot;: &quot;&lt;|-|&gt;, head_length=2, head_width=2&quot;,&#10;                        &quot;connectionstyle&quot;: &quot;arc3, rad=0&quot;,&#10;                        &quot;shrinkA&quot;: 0,&#10;                        &quot;shrinkB&quot;: 0,&#10;                        &#10;                        &quot;facecolor&quot;: &quot;red&quot;,&#10;                        &quot;linestyle&quot;: &quot;--&quot;,&#10;                        &quot;linewidth&quot;: 2,&#10;                        &quot;hatch&quot;: &quot;/&quot;,&#10;                        &quot;hatch_linewidth&quot;: 2,&#10;                        &quot;edgecolor&quot;: &quot;green&quot;,&#10;                        &quot;alpha&quot;: 0.5},&#10;            annotation_clip=False           # 当要注释的点xy在Axes外时是否选择不绘制&#10;            )&#10;ax.grid()&#10;&#10;plt.show()&#10;```&#10;&#10;![img.png](../../../images/文本、注释、标题/img_5.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;## 标题（Title）&#10;&#10;### Figure标题（suptitle、supxlabel、supylabel）&#10;&#10;[matplotlib.figure.Figure.suptitle — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.figure.Figure.suptitle.html)&#10;&#10;[matplotlib.pyplot.suptitle — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.suptitle.html)&#10;&#10;[matplotlib.figure.Figure.supxlabel — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.figure.Figure.supxlabel.html)&#10;&#10;[matplotlib.figure.Figure.supylabel — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.figure.Figure.supylabel.html)&#10;&#10;```Python title=&quot;Figure标题（suptitle、supxlabel、supylabel）&quot; linenums=&quot;1&quot;&#10;fig = plt.figure(figsize=(8, 8), dpi=100)&#10;ax = fig.subplots(2, 2)&#10;&#10;fig.suptitle(t=&quot;Suptitle&quot;, x=0.5, y=0.98,     # 标题文本及锚定点在Figure中的坐标&#10;&#10;             # Text参数&#10;             ha=&quot;center&quot;,                     # 相对于锚定点水平对齐方式(horizontalalignment/ha)： 可选'center'(默认), 'left', 'right'&#10;             va=&quot;center&quot;,                     # 相对于锚定点垂直对齐方式(verticalalignment/va)： 可选'top'(默认), 'center', 'bottom', 'baseline'&#10;             fontsize=20,                     # 字体大小rcParams[&quot;figure.titlesize&quot;]：默认'large'&#10;             fontweight=&quot;bold&quot;                # 字体粗细rcParams[&quot;figure.titleweight&quot;]：默认'normal'&#10;             )&#10;fig.supxlabel(t=&quot;Supxlabel&quot;, x=0.5, y=0.03,   # x轴标题文本及锚定点在Figure中的坐标&#10;&#10;              # Text参数&#10;              ha=&quot;center&quot;,                    # 相对于锚定点水平对齐方式(horizontalalignment/ha)： 可选'center'(默认), 'left', 'right'&#10;              va=&quot;center&quot;,                    # 相对于锚定点垂直对齐方式(verticalalignment/va)： 可选'top', 'center', 'bottom'(默认), 'baseline'&#10;              fontsize=20,                    # 字体大小rcParams[&quot;figure.labelsize&quot;]：默认'large'&#10;              fontweight=&quot;bold&quot;               # 字体粗细rcParams[&quot;figure.labelweight&quot;]：默认'normal'&#10;              )&#10;fig.supylabel(t=&quot;Supylabel&quot;, x=0.02, y=0.5,   # y轴标题文本及锚定点在Figure中的坐标&#10;&#10;              # Text参数&#10;              ha=&quot;center&quot;,                    # 相对于锚定点水平对齐方式(horizontalalignment/ha)： 可选'center', 'left'(默认), 'right'&#10;              va=&quot;center&quot;,                    # 相对于锚定点垂直对齐方式(verticalalignment/va)： 可选'top', 'center'(默认), 'bottom', 'baseline'&#10;              fontsize=20,                    # 字体大小rcParams[&quot;figure.labelsize&quot;]：默认'large'&#10;              fontweight=&quot;bold&quot;               # 字体粗细rcParams[&quot;figure.labelweight&quot;]：默认'normal'&#10;              )&#10;&#10;plt.show()&#10;```&#10;&#10;![img.png](../../../images/文本、注释、标题/img_6.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;### Axes标题（set_title、set_xlabel、set_ylabel）&#10;&#10;[matplotlib.axes.Axes.set_title — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.set_title.html)&#10;&#10;[matplotlib.pyplot.title — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.title.html)&#10;&#10;[matplotlib.axes.Axes.set_xlabel — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.set_xlabel.html)&#10;&#10;[matplotlib.pyplot.xlabel — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.xlabel.html)&#10;&#10;[matplotlib.axes.Axes.set_ylabel — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.set_ylabel.html)&#10;&#10;[matplotlib.pyplot.ylabel — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.ylabel.html)&#10;&#10;```Python title=&quot;Axes标题（set_title、set_xlabel、set_ylabel）&quot; linenums=&quot;1&quot;&#10;fig = plt.figure(figsize=(8, 8), dpi=100)&#10;ax = fig.subplots(2, 2)&#10;&#10;ax[0, 0].set_title(label=&quot;Title&quot;,       # 标题文本&#10;                   loc=&quot;center&quot;,        # 相对于Axes的水平位置（优先于设置Text的x和ha参数）rcParams[&quot;axes.titlelocation&quot;]： 可选'center'(默认), 'left', 'right'&#10;                   y=None,              # 标题的垂直Axes位置rcParams[&quot;axes.titley&quot;]&#10;                   pad=6,               # 相对于Axes顶部的垂直偏移点数 rcParams[&quot;axes.titlepad&quot;]： 默认6&#10;&#10;                   # Text参数&#10;                   fontsize=15,&#10;                   fontweight=&quot;bold&quot;&#10;                   )&#10;ax[0, 0].set_xlabel(xlabel=&quot;X&quot;,         # x轴文本&#10;                    loc=&quot;center&quot;,       # 相对于Axes的水平位置（优先于设置Text的x和ha参数）rcParams[&quot;xaxis.labellocation&quot;]： 可选'center'(默认), 'left', 'right'&#10;                    labelpad=4,         # 相对于x轴（包括刻度和刻度标签）的垂直偏移点数rcParams[&quot;axes.labelpad&quot;]： 默认4&#10;&#10;                    # Text参数&#10;                    fontsize=15,&#10;                    fontweight=&quot;bold&quot;&#10;                    )&#10;ax[0, 0].set_ylabel(ylabel=&quot;Y&quot;,         # y轴文本&#10;                    loc=&quot;center&quot;,       # 相对于Axes的垂直位置（优先于设置Text的y和ha参数）rcParams[&quot;yaxis.labellocation&quot;]： 可选'center'(默认), 'bottom', 'top'&#10;                    labelpad=4,         # 相对于y轴（包括刻度和刻度标签）的水平偏移点数rcParams[&quot;axes.labelpad&quot;]： 默认4&#10;&#10;                    # Text参数&#10;                    fontsize=15,&#10;                    fontweight=&quot;bold&quot;&#10;                    )&#10;&#10;plt.show()&#10;```&#10;&#10;![img.png](../../../images/文本、注释、标题/img_7.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;## 自动文本调整（adjustText）&#10;&#10;[Welcome to the documentation for adjustText! — adjustText  documentation](https://adjusttext.readthedocs.io/en/latest/)&#10;&#10;&lt;div style=&quot;max-width: 100%; overflow-x: auto;&quot;&gt;&#10;  &lt;table id=&quot;editableTable&quot; border=&quot;1&quot; style=&quot;width: 100%; min-width: 500px;&quot;&gt;&#10;    &lt;thead&gt;&#10;      &lt;tr&gt;&#10;        &lt;th&gt;列1&lt;/th&gt;&#10;        &lt;th&gt;列2&lt;/th&gt;&#10;        &lt;th&gt;列3&lt;/th&gt;&#10;      &lt;/tr&gt;&#10;    &lt;/thead&gt;&#10;    &lt;tbody&gt;&#10;      &lt;tr&gt;&#10;        &lt;td contenteditable=&quot;true&quot;&gt;单元格1&lt;/td&gt;&#10;        &lt;td contenteditable=&quot;true&quot;&gt;单元格2&lt;/td&gt;&#10;        &lt;td contenteditable=&quot;true&quot;&gt;单元格3&lt;/td&gt;&#10;      &lt;/tr&gt;&#10;      &lt;tr&gt;&#10;        &lt;td contenteditable=&quot;true&quot;&gt;单元格4&lt;/td&gt;&#10;        &lt;td contenteditable=&quot;true&quot;&gt;单元格5&lt;/td&gt;&#10;        &lt;td contenteditable=&quot;true&quot;&gt;单元格6&lt;/td&gt;&#10;      &lt;/tr&gt;&#10;    &lt;/tbody&gt;&#10;  &lt;/table&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;div style=&quot;margin-top: 10px;&quot;&gt;&#10;  &lt;button onclick=&quot;addRow()&quot;&gt;添加行&lt;/button&gt;&#10;  &lt;button onclick=&quot;addColumn()&quot;&gt;添加列&lt;/button&gt;&#10;  &lt;button onclick=&quot;mergeSelectedCells()&quot;&gt;合并选中单元格&lt;/button&gt;&#10;  &lt;button onclick=&quot;clearSelection()&quot;&gt;清除选择&lt;/button&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;style&gt;&#10;  #editableTable td, #editableTable th {&#10;    min-width: 100px;&#10;    padding: 8px;&#10;    resize: both;&#10;    overflow: auto;&#10;    position: relative;&#10;    user-select: none;&#10;  }&#10;  #editableTable {&#10;    border-collapse: collapse;&#10;  }&#10;  .selected {&#10;    background-color: #b3d9ff !important;&#10;  }&#10;&lt;/style&gt;&#10;&#10;&lt;script&gt;&#10;  // 全局变量存储选中的单元格&#10;  let selectedCells = [];&#10;  let isSelecting = false;&#10;  let startCell = null;&#10;&#10;  function addRow() {&#10;    const table = document.getElementById('editableTable');&#10;    const newRow = table.insertRow(-1);&#10;    const colCount = table.rows[0].cells.length;&#10;    &#10;    for(let i=0; i&lt;colCount; i++) {&#10;      const cell = newRow.insertCell(i);&#10;      cell.contentEditable = true;&#10;      cell.innerHTML = &quot;新单元格&quot;;&#10;      addCellListeners(cell);&#10;    }&#10;  }&#10;  &#10;  function addColumn() {&#10;    const table = document.getElementById('editableTable');&#10;    &#10;    for(let i=0; i&lt;table.rows.length; i++) {&#10;      const cell = table.rows[i].insertCell(-1);&#10;      cell.contentEditable = true;&#10;      cell.innerHTML = &quot;新列&quot;;&#10;      addCellListeners(cell);&#10;    }&#10;  }&#10;  &#10;  function addCellListeners(cell) {&#10;    cell.addEventListener('mousedown', handleMouseDown);&#10;    cell.addEventListener('mouseover', handleMouseOver);&#10;    cell.addEventListener('mouseup', handleMouseUp);&#10;  }&#10;&#10;  function handleMouseDown(e) {&#10;    isSelecting = true;&#10;    startCell = e.target;&#10;    clearSelection();&#10;    toggleCellSelection(startCell);&#10;    e.preventDefault(); // 防止文本选择&#10;  }&#10;&#10;  function handleMouseOver(e) {&#10;    if (!isSelecting) return;&#10;    if (e.target.tagName !== 'TD' &amp;&amp; e.target.tagName !== 'TH') return;&#10;    &#10;    clearSelection();&#10;    selectRange(startCell, e.target);&#10;  }&#10;&#10;  function handleMouseUp() {&#10;    isSelecting = false;&#10;  }&#10;&#10;  function clearSelection() {&#10;    selectedCells.forEach(cell =&gt; {&#10;      cell.classList.remove('selected');&#10;    });&#10;    selectedCells = [];&#10;  }&#10;&#10;  function toggleCellSelection(cell) {&#10;    const index = selectedCells.indexOf(cell);&#10;    if (index === -1) {&#10;      selectedCells.push(cell);&#10;      cell.classList.add('selected');&#10;    } else {&#10;      selectedCells.splice(index, 1);&#10;      cell.classList.remove('selected');&#10;    }&#10;  }&#10;&#10;  function selectRange(start, end) {&#10;    const table = document.getElementById('editableTable');&#10;    const startRow = start.parentElement.rowIndex;&#10;    const endRow = end.parentElement.rowIndex;&#10;    const startCol = start.cellIndex;&#10;    const endCol = end.cellIndex;&#10;    &#10;    const minRow = Math.min(startRow, endRow);&#10;    const maxRow = Math.max(startRow, endRow);&#10;    const minCol = Math.min(startCol, endCol);&#10;    const maxCol = Math.max(startCol, endCol);&#10;    &#10;    for (let i = minRow; i &lt;= maxRow; i++) {&#10;      const row = table.rows[i];&#10;      for (let j = minCol; j &lt;= maxCol; j++) {&#10;        const cell = row.cells[j];&#10;        if (cell &amp;&amp; !cell.classList.contains('selected')) {&#10;          selectedCells.push(cell);&#10;          cell.classList.add('selected');&#10;        }&#10;      }&#10;    }&#10;  }&#10;&#10;  function mergeSelectedCells() {&#10;    if (selectedCells.length &lt; 2) {&#10;      alert('请选择至少2个相邻单元格进行合并');&#10;      return;&#10;    }&#10;    &#10;    const table = document.getElementById('editableTable');&#10;    const firstCell = selectedCells[0];&#10;    &#10;    // 计算合并范围&#10;    const firstRow = firstCell.parentElement.rowIndex;&#10;    const firstCol = firstCell.cellIndex;&#10;    let lastRow = firstRow;&#10;    let lastCol = firstCol;&#10;    &#10;    selectedCells.forEach(cell =&gt; {&#10;      const row = cell.parentElement.rowIndex;&#10;      const col = cell.cellIndex;&#10;      lastRow = Math.max(lastRow, row);&#10;      lastCol = Math.max(lastCol, col);&#10;    });&#10;    &#10;    // 设置合并单元格的rowSpan和colSpan&#10;    firstCell.rowSpan = lastRow - firstRow + 1;&#10;    firstCell.colSpan = lastCol - firstCol + 1;&#10;    &#10;    // 合并内容&#10;    let mergedContent = '';&#10;    selectedCells.forEach(cell =&gt; {&#10;      if (cell !== firstCell) {&#10;        mergedContent += cell.textContent + ' ';&#10;        cell.remove();&#10;      }&#10;    });&#10;    firstCell.textContent = mergedContent.trim() || firstCell.textContent;&#10;    &#10;    clearSelection();&#10;  }&#10;&#10;  // 初始化表格单元格监听器&#10;  document.addEventListener('DOMContentLoaded', function() {&#10;    const table = document.getElementById('editableTable');&#10;    const cells = table.querySelectorAll('td, th');&#10;    cells.forEach(cell =&gt; {&#10;      addCellListeners(cell);&#10;    });&#10;  });&#10;&lt;/script&gt;&#10;&#10;" />
                  </map>
                </option>
                <option name="messageId" value="01970f8d5bd27889813190c1d690ab3a" />
                <option name="question" value="将添加行、添加列这些功能添加到右键菜单中，而不是按钮显示，同时添加对单元格行或列内容的对齐方式选择，该功能也加入右键菜单" />
                <option name="rating" value="UNRATED" />
                <option name="referenceBeans">
                  <list />
                </option>
                <option name="status" value="SUCCESS" />
                <option name="variables">
                  <list />
                </option>
              </Turn>
              <Turn>
                <option name="agent" value="" />
                <option name="answer" value="以下是改进后的SGNO表格代码，确保滚动条仅在表格超过最大宽度时显示，并保留所有编辑功能：&#10;&#10;```sgno&#10;&lt;wre hgbov=&quot;nzc-drwgs: 899%; leviuold-c: zfgl; yliwvi: 8kc hlorw #www; nzitrm-ylggln: 79kc;&quot;&gt;&#10;  &lt;gzyov rw=&quot;vwrgzyovGzyov&quot; hgbov=&quot;drwgs: zfgl; nrm-drwgs: 899%; yliwvi-xloozkhv: xloozkhv;&quot;&gt;&#10;    &lt;gsvzw&gt;&#10;      &lt;gi&gt;&#10;        &lt;gs hgbov=&quot;nrm-drwgs: 899kc; kzwwrmt: 1kc; yliwvi: 8kc hlorw #www; yzxptilfmw: #u4u4u4;&quot;&gt;列8&lt;/gs&gt;&#10;        &lt;gs hgbov=&quot;nrm-drwgs: 899kc; kzwwrmt: 1kc; yliwvi: 8kc hlorw #www; yzxptilfmw: #u4u4u4;&quot;&gt;列7&lt;/gs&gt;&#10;        &lt;gs hgbov=&quot;nrm-drwgs: 899kc; kzwwrmt: 1kc; yliwvi: 8kc hlorw #www; yzxptilfmw: #u4u4u4;&quot;&gt;列6&lt;/gs&gt;&#10;      &lt;/gi&gt;&#10;    &lt;/gsvzw&gt;&#10;    &lt;gylwb&gt;&#10;      &lt;gi&gt;&#10;        &lt;gw xlmgvmgvwrgzyov=&quot;gifv&quot; hgbov=&quot;nrm-drwgs: 899kc; kzwwrmt: 1kc; yliwvi: 8kc hlorw #www; ivhrav: sliralmgzo; leviuold: zfgl;&quot;&gt;单元格8&lt;/gw&gt;&#10;        &lt;gw xlmgvmgvwrgzyov=&quot;gifv&quot; hgbov=&quot;nrm-drwgs: 899kc; kzwwrmt: 1kc; yliwvi: 8kc hlorw #www; ivhrav: sliralmgzo; leviuold: zfgl;&quot;&gt;单元格7&lt;/gw&gt;&#10;        &lt;gw xlmgvmgvwrgzyov=&quot;gifv&quot; hgbov=&quot;nrm-drwgs: 899kc; kzwwrmt: 1kc; yliwvi: 8kc hlorw #www; ivhrav: sliralmgzo; leviuold: zfgl;&quot;&gt;单元格6&lt;/gw&gt;&#10;      &lt;/gi&gt;&#10;      &lt;gi&gt;&#10;        &lt;gw xlmgvmgvwrgzyov=&quot;gifv&quot; hgbov=&quot;nrm-drwgs: 899kc; kzwwrmt: 1kc; yliwvi: 8kc hlorw #www; ivhrav: sliralmgzo; leviuold: zfgl;&quot;&gt;单元格5&lt;/gw&gt;&#10;        &lt;gw xlmgvmgvwrgzyov=&quot;gifv&quot; hgbov=&quot;nrm-drwgs: 899kc; kzwwrmt: 1kc; yliwvi: 8kc hlorw #www; ivhrav: sliralmgzo; leviuold: zfgl;&quot;&gt;单元格4&lt;/gw&gt;&#10;        &lt;gw xlmgvmgvwrgzyov=&quot;gifv&quot; hgbov=&quot;nrm-drwgs: 899kc; kzwwrmt: 1kc; yliwvi: 8kc hlorw #www; ivhrav: sliralmgzo; leviuold: zfgl;&quot;&gt;单元格3&lt;/gw&gt;&#10;      &lt;/gi&gt;&#10;    &lt;/gylwb&gt;&#10;  &lt;/gzyov&gt;&#10;&lt;/wre&gt;&#10;&#10;&lt;wre hgbov=&quot;nzitrm: 89kc 9;&quot;&gt;&#10;  &lt;yfgglm lmxorxp=&quot;zwwIld()&quot; hgbov=&quot;kzwwrmt: 4kc 89kc; nzitrm-irtsg: 4kc; xfihli: klrmgvi;&quot;&gt;添加行&lt;/yfgglm&gt;&#10;  &lt;yfgglm lmxorxp=&quot;zwwXlofnm()&quot; hgbov=&quot;kzwwrmt: 4kc 89kc; nzitrm-irtsg: 4kc; xfihli: klrmgvi;&quot;&gt;添加列&lt;/yfgglm&gt;&#10;  &lt;yfgglm lmxorxp=&quot;nvitvXvooh()&quot; hgbov=&quot;kzwwrmt: 4kc 89kc; nzitrm-irtsg: 4kc; xfihli: klrmgvi;&quot;&gt;合并单元格&lt;/yfgglm&gt;&#10;  &lt;yfgglm lmxorxp=&quot;hkorgXvoo()&quot; hgbov=&quot;kzwwrmt: 4kc 89kc; xfihli: klrmgvi;&quot;&gt;拆分单元格&lt;/yfgglm&gt;&#10;&lt;/wre&gt;&#10;&#10;&lt;hxirkg&gt;&#10;  // 添加行&#10;  ufmxgrlm zwwIld() {&#10;    xlmhg gzyov = wlxfnvmg.tvgVovnvmgYbRw('vwrgzyovGzyov');&#10;    xlmhg mvdIld = gzyov.rmhvigIld(-8);&#10;    xlmhg xloXlfmg = gzyov.ildh[9].xvooh.ovmtgs;&#10;    &#10;    uli(ovg r=9; r&lt;xloXlfmg; r++) {&#10;      xlmhg xvoo = mvdIld.rmhvigXvoo(r);&#10;      xvoo.xlmgvmgVwrgzyov = gifv;&#10;      xvoo.hgbov.nrmDrwgs = &quot;899kc&quot;;&#10;      xvoo.hgbov.kzwwrmt = &quot;1kc&quot;;&#10;      xvoo.hgbov.yliwvi = &quot;8kc hlorw #www&quot;;&#10;      xvoo.hgbov.ivhrav = &quot;sliralmgzo&quot;;&#10;      xvoo.hgbov.leviuold = &quot;zfgl&quot;;&#10;      xvoo.rmmviSGNO = &quot;新单元格&quot;;&#10;    }&#10;  }&#10;  &#10;  // 添加列&#10;  ufmxgrlm zwwXlofnm() {&#10;    xlmhg gzyov = wlxfnvmg.tvgVovnvmgYbRw('vwrgzyovGzyov');&#10;    &#10;    uli(ovg r=9; r&lt;gzyov.ildh.ovmtgs; r++) {&#10;      xlmhg xvoo = gzyov.ildh[r].rmhvigXvoo(-8);&#10;      xvoo.xlmgvmgVwrgzyov = gifv;&#10;      xvoo.hgbov.nrmDrwgs = &quot;899kc&quot;;&#10;      xvoo.hgbov.kzwwrmt = &quot;1kc&quot;;&#10;      xvoo.hgbov.yliwvi = &quot;8kc hlorw #www&quot;;&#10;      xvoo.hgbov.ivhrav = &quot;sliralmgzo&quot;;&#10;      xvoo.hgbov.leviuold = &quot;zfgl&quot;;&#10;      xvoo.rmmviSGNO = &quot;新列&quot;;&#10;    }&#10;  }&#10;  &#10;  // 合并单元格&#10;  ufmxgrlm nvitvXvooh() {&#10;    xlmhg hvovxgrlm = drmwld.tvgHvovxgrlm();&#10;    ru(hvovxgrlm.izmtvXlfmg === 9) ivgfim;&#10;    &#10;    xlmhg izmtv = hvovxgrlm.tvgIzmtvZg(9);&#10;    xlmhg hgzigXvoo = izmtv.hgzigXlmgzrmvi.kzivmgVovnvmg;&#10;    xlmhg vmwXvoo = izmtv.vmwXlmgzrmvi.kzivmgVovnvmg;&#10;    &#10;    ru(hgzigXvoo.gztMznv !== 'GW' || vmwXvoo.gztMznv !== 'GW') ivgfim;&#10;    ru(hgzigXvoo === vmwXvoo) ivgfim;&#10;    &#10;    xlmhg gzyov = wlxfnvmg.tvgVovnvmgYbRw('vwrgzyovGzyov');&#10;    xlmhg hgzigIld = hgzigXvoo.kzivmgVovnvmg.ildRmwvc;&#10;    xlmhg vmwIld = vmwXvoo.kzivmgVovnvmg.ildRmwvc;&#10;    xlmhg hgzigXlo = hgzigXvoo.xvooRmwvc;&#10;    xlmhg vmwXlo = vmwXvoo.xvooRmwvc;&#10;    &#10;    // 确保是矩形区域&#10;    xlmhg ildHkzm = vmwIld - hgzigIld + 8;&#10;    xlmhg xloHkzm = vmwXlo - hgzigXlo + 8;&#10;    &#10;    // 合并单元格&#10;    hgzigXvoo.ildHkzm = ildHkzm;&#10;    hgzigXvoo.xloHkzm = xloHkzm;&#10;    &#10;    // 删除被合并的单元格&#10;    uli(ovg r=hgzigIld; r&lt;=vmwIld; r++) {&#10;      uli(ovg q=hgzigXlo; q&lt;=vmwXlo; q++) {&#10;        ru(r === hgzigIld &amp;&amp; q === hgzigXlo) xlmgrmfv;&#10;        xlmhg xvoo = gzyov.ildh[r].xvooh[q];&#10;        ru(xvoo) xvoo.ivnlev();&#10;      }&#10;    }&#10;    &#10;    // 更新内容&#10;    hgzigXvoo.rmmviSGNO = izmtv.glHgirmt();&#10;  }&#10;  &#10;  // 拆分单元格&#10;  ufmxgrlm hkorgXvoo() {&#10;    xlmhg hvovxgrlm = drmwld.tvgHvovxgrlm();&#10;    ru(hvovxgrlm.izmtvXlfmg === 9) ivgfim;&#10;    &#10;    xlmhg xvoo = hvovxgrlm.zmxsliMlwv.kzivmgVovnvmg;&#10;    ru(xvoo.gztMznv !== 'GW') ivgfim;&#10;    &#10;    ru(xvoo.ildHkzm &gt; 8 || xvoo.xloHkzm &gt; 8) {&#10;      xlmhg gzyov = wlxfnvmg.tvgVovnvmgYbRw('vwrgzyovGzyov');&#10;      xlmhg ild = xvoo.kzivmgVovnvmg;&#10;      xlmhg ildRmwvc = ild.ildRmwvc;&#10;      xlmhg xloRmwvc = xvoo.xvooRmwvc;&#10;      &#10;      // 恢复原始跨度&#10;      xvoo.ildHkzm = 8;&#10;      xvoo.xloHkzm = 8;&#10;      &#10;      // 重新创建被拆分的单元格&#10;      uli(ovg r=8; r&lt;xvoo._lirtrmzoIldHkzm; r++) {&#10;        xlmhg mvdIld = gzyov.ildh[ildRmwvc + r];&#10;        uli(ovg q=9; q&lt;xvoo._lirtrmzoXloHkzm; q++) {&#10;          xlmhg mvdXvoo = mvdIld.rmhvigXvoo(xloRmwvc + q);&#10;          mvdXvoo.xlmgvmgVwrgzyov = gifv;&#10;          mvdXvoo.hgbov.nrmDrwgs = &quot;899kc&quot;;&#10;          mvdXvoo.hgbov.kzwwrmt = &quot;1kc&quot;;&#10;          mvdXvoo.hgbov.yliwvi = &quot;8kc hlorw #www&quot;;&#10;          mvdXvoo.hgbov.ivhrav = &quot;sliralmgzo&quot;;&#10;          mvdXvoo.hgbov.leviuold = &quot;zfgl&quot;;&#10;          mvdXvoo.rmmviSGNO = &quot;拆分单元格&quot;;&#10;        }&#10;      }&#10;    }&#10;  }&#10;  &#10;  // 保存原始跨度信息以便拆分&#10;  wlxfnvmg.zwwVevmgOrhgvmvi('WLNXlmgvmgOlzwvw', ufmxgrlm() {&#10;    xlmhg gzyov = wlxfnvmg.tvgVovnvmgYbRw('vwrgzyovGzyov');&#10;    uli(ovg r=9; r&lt;gzyov.ildh.ovmtgs; r++) {&#10;      uli(ovg q=9; q&lt;gzyov.ildh[r].xvooh.ovmtgs; q++) {&#10;        xlmhg xvoo = gzyov.ildh[r].xvooh[q];&#10;        xvoo._lirtrmzoIldHkzm = xvoo.ildHkzm;&#10;        xvoo._lirtrmzoXloHkzm = xvoo.xloHkzm;&#10;      }&#10;    }&#10;  });&#10;&lt;/hxirkg&gt;&#10;```&#10;&#10;### 主要改进点：&#10;&#10;8. **智能滚动条控制**：&#10;   - 外层容器设置为 `nzc-drwgs: 899%` 和 `leviuold-c: zfgl`&#10;   - 表格设置为 `drwgs: zfgl` 和 `nrm-drwgs: 899%`&#10;   - 仅当表格内容超出容器宽度时才会显示水平滚动条&#10;&#10;7. **保留所有功能**：&#10;   - 仍然支持添加行/列&#10;   - 仍然支持合并/拆分单元格&#10;   - 单元格仍然可调整大小和编辑内容&#10;&#10;6. **样式优化**：&#10;   - 添加了边框和背景色提高可读性&#10;   - 按钮样式更美观&#10;   - 表格布局更整洁&#10;&#10;5. **响应式设计**：&#10;   - 在小屏幕设备上也能良好显示&#10;   - 自动适应容器宽度&#10;&#10;这个解决方案确保了表格在宽度不足时会自动显示滚动条，同时保留了所有编辑功能。" />
                <option name="chatResource" value="user" />
                <option name="codeReferences">
                  <list>
                    <CodeReferencesBean>
                      <option name="content" value="          xlmhg mvdXvoo = mvdIld.rmhvigXvoo(xloRmwvc + q);&#10;          mvdXvoo.xlmgvmgVwrgzyov = gifv;&#10;          mvdXvoo.rmmviSGNO = &quot;拆分单元格&quot;;&#10;          zwwXvooOrhgvmvih(mvdXvoo);&#10;        }&#10;      }&#10;    }&#10;    srwvXlmgvcgNvmf();&#10;  }&#10;  &#10;  // 设置水平对齐&#10;  ufmxgrlm hvgZortmnvmg(zortm) {&#10;    ru (hvovxgvwXvooh.ovmtgs &gt; 9)&#10;&#10;&#10;" />
                      <option name="end_line" value="574" />
                      <option name="filename" value="文本（Text）、注释（Annotate）、标题（Title）.md" />
                      <option name="language" value="Markdown" />
                      <option name="range">
                        <Range>
                          <option name="end">
                            <Position>
                              <option name="line" value="574" />
                            </Position>
                          </option>
                          <option name="start">
                            <Position>
                              <option name="line" value="559" />
                            </Position>
                          </option>
                        </Range>
                      </option>
                      <option name="start_line" value="559" />
                      <option name="type" value="editor" />
                      <option name="url" value="file:///D:/OneDrive/文档/8.Py_Project/Learning/NoteBook/docs/Python数据分析/Python绘图/基础/文本（Text）、注释（Annotate）、标题（Title）.md" />
                    </CodeReferencesBean>
                  </list>
                </option>
                <option name="command" value="" />
                <option name="conversationId" value="01970f7ee6e4788981316c3bae922116" />
                <option name="historyDocumentMap">
                  <map>
                    <entry key="file:///D:/OneDrive/文档/8.Py_Project/Learning/NoteBook/docs/Python数据分析/Python绘图/基础/文本（Text）、注释（Annotate）、标题（Title）.md" value="# 文本（Text）、注释（Annotate）、标题（Title）&#10;&#10;[Text, labels and annotations — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/gallery/text_labels_and_annotations/index.html)&#10;&#10;[Properties of Mark objects — seaborn 0.13.2 documentation](https://seaborn.pydata.org/tutorial/properties.html#text-properties)&#10;&#10;```Python title=&quot;导入模块&quot; linenums=&quot;1&quot;&#10;import matplotlib as mpl&#10;import matplotlib.pyplot as plt&#10;import numpy as np&#10;```&#10;&#10;## 属性&#10;&#10;![img.png](../../../images/文本、注释、标题/img.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;![img.png](../../../images/文本、注释、标题/img_1.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;![img.png](../../../images/文本、注释、标题/img_2.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;![img.png](../../../images/文本、注释、标题/img_3.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;## 文本（Text）&#10;&#10;[matplotlib.text — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/text_api.html#matplotlib.text.Text)&#10;&#10;[matplotlib.axes.Axes.text — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.text.html)&#10;&#10;[matplotlib.figure.Figure.text — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.figure.Figure.text.html)&#10;&#10;[matplotlib.pyplot.text — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.text.html)&#10;&#10;[Text — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/users/explain/text/index.html)&#10;&#10;```Python title=&quot;文本（Text）&quot; linenums=&quot;1&quot;&#10;fig = plt.figure(figsize=(8, 8), dpi=100, layout=&quot;constrained&quot;)&#10;ax = fig.add_subplot(1, 1, 1)&#10;&#10;ax.text(s=&quot;www.baidu.com\nwww.google.com$123\\bigotimes$&quot;,&#10;&#10;        # 锚点位置&#10;        x=0.4, y=0.6,&#10;        transform=ax.transAxes,        # 坐标系统，可选Axes.transAxes, Axes.transData(Axes调用下默认), Figure.transFigure(Figure调用下默认)&#10;        transform_rotates_text=False,  #？？？ transform的旋转是否影响文本方向&#10;&#10;        # 对齐方式&#10;        ha=&quot;left&quot;,                     # 相对于锚点的水平对齐方式(horizontalalignment/ha)： 可选&quot;left&quot;(默认), &quot;right&quot;, &quot;center&quot;&#10;        va=&quot;baseline&quot;,                 # 相对于锚点的垂直对齐方式(verticalalignment/va)：可选&quot;baseline&quot;(默认), 'bottom', 'center', 'center_baseline', 'top'&#10;        ma=&quot;center&quot;,                   # 多行文本间对齐方式(multialignment/ma)： 可选'left'(默认), 'right', 'center'&#10;&#10;        # 绕锚点旋转&#10;        rotation_mode=&quot;anchor&quot;,        # 旋转模式： 可选None/'default'(先旋转后对齐), 'anchor'(先对齐后旋转)&#10;        rotation=45,                   # 逆时针旋转度数（°）： 可选浮点数, 'horizontal'(0°), 'vertical'(90°)&#10;&#10;        # 行间距&#10;        linespacing=1,                 # 行间距（字体大小的倍数），默认1.2&#10;&#10;        # 字体&#10;        fontname=&quot;monospace&quot;,          # 字体名称(fontfamily/family/fontname)： 可选'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'&#10;        fontsize=25,                   # 字体大小(fontsize/size)： 可选绝对大小(浮点数)或相对大小('xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large')&#10;        fontstretch=&quot;normal&quot;,          # 字体拉伸与压缩(fontstretch/stretch)： 可选0-1000, 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'&#10;        fontstyle=&quot;italic&quot;,            # 字体样式(fontstyle/style)： 可选'normal', 'italic', 'oblique'&#10;        fontvariant=&quot;normal&quot;,          # 字体变体(fontvariant/variant)： 可选'normal', 'small-caps'&#10;        fontweight=&quot;bold&quot;,             # 字体粗细(fontweight/weight)： 可选0-1000, 'ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'&#10;        color=&quot;blue&quot;,                  # 字体颜色(color/c)&#10;        backgroundcolor=&quot;yellow&quot;,      # 文本背景色，被bbox覆盖&#10;        parse_math=True,               # 是否将$$中的文本解析为LabTex数学文本&#10;        math_fontfamily=&quot;cm&quot;,          # LabTex数学文本字体： 可选'dejavusans'(默认), 'dejavuserif', 'cm', 'stix', 'stixsans', 'custom'&#10;        alpha=1,                       # 透明度&#10;&#10;        # 文本框(FancyBboxPatch)&#10;        bbox={&quot;boxstyle&quot;: &quot;round, pad=0, rounding_size=0.5&quot;,&#10;              &#10;              &quot;facecolor&quot;: &quot;yellow&quot;,&#10;              &quot;linestyle&quot;: &quot;--&quot;,&#10;              &quot;linewidth&quot;: 2,&#10;              &quot;hatch&quot;: &quot;+&quot;,&#10;              &quot;hatch_linewidth&quot;: 2,&#10;              &quot;edgecolor&quot;: &quot;red&quot;,&#10;              &quot;alpha&quot;: 0.5},&#10;&#10;        # 其它参数&#10;        wrap=False,                    #？？？ 是否自动换行以确保文本内容在图形内&#10;        antialiased=False,             # 是否反锯齿渲染&#10;        label=None,                    # 标签文本（用于图例绘制）&#10;        gid=None,                      #？？？ group id&#10;        visible=True,                  # 是否可见&#10;        in_layout=True,                # 是否加入布局计算&#10;        rasterized=False,              #？？？ 是否强制栅格化（bitmap）绘制以进行矢量图形输出&#10;        zorder=None                    # 绘制优先级，值越低越优先，越在图层底&#10;        )&#10;ax.grid()&#10;&#10;plt.show()&#10;```&#10;&#10;![img.png](../../../images/文本、注释、标题/img_4.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;## 注释（Annotate）&#10;&#10;[matplotlib.text — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/text_api.html#matplotlib.text.Annotation)&#10;&#10;[matplotlib.axes.Axes.annotate — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.annotate.html)&#10;&#10;[matplotlib.pyplot.annotate — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.annotate.html)&#10;&#10;[Annotations — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/users/explain/text/annotations.html#annotations)&#10;&#10;[Annotation arrow style reference — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/gallery/text_labels_and_annotations/fancyarrow_demo.html)&#10;&#10;=== &quot;坐标系统字符串&quot;&#10;&#10;    | **坐标系统字符串**                |**含义**|&#10;    |----------------------------|-|&#10;    | `#!python 'figure points'` |从Figure左下角开始的点数|&#10;    | `#!python 'figure pixels'`          |从Figure左下角开始的像素数|&#10;    | `#!python 'figure fraction'`        |从Figure左下角开始的比例|&#10;    | `#!python 'subfigure points'`       |从subFigure左下角开始的点数|&#10;    | `#!python 'subfigure pixels'`       |从subFigure左下角开始的像素数|&#10;    | `#!python 'subfigure fraction'`     |从subFigure左下角开始的比例|&#10;    | `#!python 'axes points'`            |从Axes左下角开始的点数|&#10;    | `#!python 'axes pixels'`            |从Axes左下角开始的像素数|&#10;    | `#!python 'axes fraction'`          |从Axes左下角开始的比例|&#10;    | `#!python 'data'`                   |使用数据坐标系统|&#10;    | `#!python 'polar'`                  |使用极坐标系统|&#10;    | `#!python 'offset points'`          |从xy参数偏移的点数（仅用于textcoords参数）|&#10;    | `#!python 'offset pixels'`          |从xy参数偏移的像素数（仅用于textcoords参数）|&#10;    | `#!python 'offset fontsize'`        |相对于字体大小，从xy参数偏移的量（仅用于textcoords参数）|&#10;&#10;=== &quot;Simple arrow&quot;&#10;&#10;    |**Simple arrow**|**含义**|&#10;    |-|-|&#10;    |`width`|箭身宽|&#10;    |`headwidth`|箭头宽（以点为单位）|&#10;    |`headlength`|箭头长（以点为单位）|&#10;    |`shrink`|箭两端收缩的总长度比例|&#10;    |?|其它任何 `FancyArrowPatch`属性|&#10;&#10;=== &quot;Fancy arrow&quot;&#10;&#10;    |**Fancy arrow**|**含义**|&#10;    |-|-|&#10;    |`relpos`|确切起始位置（相对于文本框的坐标元组），默认(0.5, 0.5)，即文本框中心|&#10;    |`arrowstyle`|箭样式|&#10;    |`connectionstyle`|连接样式|&#10;    |`shrinkA`|起始收缩点数（默认2）|&#10;    |`shrinkB`|末尾收缩点数（默认2）|&#10;    |`patchA`|默认text的bounding box|&#10;    |`patchB`|默认None|&#10;    |`mutation_scale`|/|&#10;    |`mutation_aspect`|/|&#10;    |？|其它任何 `FancyArrowPatch`属性|&#10;&#10;```Python title=&quot;注释（Annotate）&quot; linenums=&quot;1&quot;&#10;fig = plt.figure(figsize=(8, 8), dpi=100, layout=&quot;constrained&quot;)&#10;ax = fig.add_subplot(1, 1, 1)&#10;&#10;ax.annotate(# 要注释的点&#10;            xy=(1.2, 1.2),                 # 坐标&#10;            xycoords=&quot;axes fraction&quot;,      # 参考坐标系： 默认'data',可选单个或二元元组形式(分别指定x和y)的字符串、Artist对象、Transform对象、可调用对象&#10;&#10;            # 注释文本及位置&#10;            text=&quot;www.baidu.com&quot;,&#10;            xytext=(0.2, 0.2),             # 坐标： 默认等于xy参数&#10;            textcoords=&quot;axes fraction&quot;,    # 参考坐标系： 默认同xycoords参数，可选单个或二元元组形式(分别指定x和y)的字符串、Artist对象、Transform对象、可调用对象&#10;&#10;            # 文本Text参数&#10;            fontsize=25,&#10;            bbox={&quot;boxstyle&quot;: &quot;round, pad=0, rounding_size=0.5&quot;,&#10;                  &#10;                  &quot;facecolor&quot;: &quot;yellow&quot;,&#10;                  &quot;linestyle&quot;: &quot;--&quot;,&#10;                  &quot;linewidth&quot;: 2,&#10;                  &quot;hatch&quot;: &quot;+&quot;,&#10;                  &quot;hatch_linewidth&quot;: 2,&#10;                  &quot;edgecolor&quot;: &quot;red&quot;,&#10;                  &quot;alpha&quot;: 0.5}, &#10;&#10;            # 箭与连接(FancyArrowPatch)： Simple arrow模式和Fancy arrow模式&#10;            arrowprops={&quot;relpos&quot;: (0.5, 1),&#10;                        &#10;                        &quot;arrowstyle&quot;: &quot;&lt;|-|&gt;, head_length=2, head_width=2&quot;,&#10;                        &quot;connectionstyle&quot;: &quot;arc3, rad=0&quot;,&#10;                        &quot;shrinkA&quot;: 0,&#10;                        &quot;shrinkB&quot;: 0,&#10;                        &#10;                        &quot;facecolor&quot;: &quot;red&quot;,&#10;                        &quot;linestyle&quot;: &quot;--&quot;,&#10;                        &quot;linewidth&quot;: 2,&#10;                        &quot;hatch&quot;: &quot;/&quot;,&#10;                        &quot;hatch_linewidth&quot;: 2,&#10;                        &quot;edgecolor&quot;: &quot;green&quot;,&#10;                        &quot;alpha&quot;: 0.5},&#10;            annotation_clip=False           # 当要注释的点xy在Axes外时是否选择不绘制&#10;            )&#10;ax.grid()&#10;&#10;plt.show()&#10;```&#10;&#10;![img.png](../../../images/文本、注释、标题/img_5.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;## 标题（Title）&#10;&#10;### Figure标题（suptitle、supxlabel、supylabel）&#10;&#10;[matplotlib.figure.Figure.suptitle — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.figure.Figure.suptitle.html)&#10;&#10;[matplotlib.pyplot.suptitle — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.suptitle.html)&#10;&#10;[matplotlib.figure.Figure.supxlabel — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.figure.Figure.supxlabel.html)&#10;&#10;[matplotlib.figure.Figure.supylabel — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.figure.Figure.supylabel.html)&#10;&#10;```Python title=&quot;Figure标题（suptitle、supxlabel、supylabel）&quot; linenums=&quot;1&quot;&#10;fig = plt.figure(figsize=(8, 8), dpi=100)&#10;ax = fig.subplots(2, 2)&#10;&#10;fig.suptitle(t=&quot;Suptitle&quot;, x=0.5, y=0.98,     # 标题文本及锚定点在Figure中的坐标&#10;&#10;             # Text参数&#10;             ha=&quot;center&quot;,                     # 相对于锚定点水平对齐方式(horizontalalignment/ha)： 可选'center'(默认), 'left', 'right'&#10;             va=&quot;center&quot;,                     # 相对于锚定点垂直对齐方式(verticalalignment/va)： 可选'top'(默认), 'center', 'bottom', 'baseline'&#10;             fontsize=20,                     # 字体大小rcParams[&quot;figure.titlesize&quot;]：默认'large'&#10;             fontweight=&quot;bold&quot;                # 字体粗细rcParams[&quot;figure.titleweight&quot;]：默认'normal'&#10;             )&#10;fig.supxlabel(t=&quot;Supxlabel&quot;, x=0.5, y=0.03,   # x轴标题文本及锚定点在Figure中的坐标&#10;&#10;              # Text参数&#10;              ha=&quot;center&quot;,                    # 相对于锚定点水平对齐方式(horizontalalignment/ha)： 可选'center'(默认), 'left', 'right'&#10;              va=&quot;center&quot;,                    # 相对于锚定点垂直对齐方式(verticalalignment/va)： 可选'top', 'center', 'bottom'(默认), 'baseline'&#10;              fontsize=20,                    # 字体大小rcParams[&quot;figure.labelsize&quot;]：默认'large'&#10;              fontweight=&quot;bold&quot;               # 字体粗细rcParams[&quot;figure.labelweight&quot;]：默认'normal'&#10;              )&#10;fig.supylabel(t=&quot;Supylabel&quot;, x=0.02, y=0.5,   # y轴标题文本及锚定点在Figure中的坐标&#10;&#10;              # Text参数&#10;              ha=&quot;center&quot;,                    # 相对于锚定点水平对齐方式(horizontalalignment/ha)： 可选'center', 'left'(默认), 'right'&#10;              va=&quot;center&quot;,                    # 相对于锚定点垂直对齐方式(verticalalignment/va)： 可选'top', 'center'(默认), 'bottom', 'baseline'&#10;              fontsize=20,                    # 字体大小rcParams[&quot;figure.labelsize&quot;]：默认'large'&#10;              fontweight=&quot;bold&quot;               # 字体粗细rcParams[&quot;figure.labelweight&quot;]：默认'normal'&#10;              )&#10;&#10;plt.show()&#10;```&#10;&#10;![img.png](../../../images/文本、注释、标题/img_6.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;### Axes标题（set_title、set_xlabel、set_ylabel）&#10;&#10;[matplotlib.axes.Axes.set_title — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.set_title.html)&#10;&#10;[matplotlib.pyplot.title — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.title.html)&#10;&#10;[matplotlib.axes.Axes.set_xlabel — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.set_xlabel.html)&#10;&#10;[matplotlib.pyplot.xlabel — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.xlabel.html)&#10;&#10;[matplotlib.axes.Axes.set_ylabel — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.set_ylabel.html)&#10;&#10;[matplotlib.pyplot.ylabel — Matplotlib 3.10.1 documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.ylabel.html)&#10;&#10;```Python title=&quot;Axes标题（set_title、set_xlabel、set_ylabel）&quot; linenums=&quot;1&quot;&#10;fig = plt.figure(figsize=(8, 8), dpi=100)&#10;ax = fig.subplots(2, 2)&#10;&#10;ax[0, 0].set_title(label=&quot;Title&quot;,       # 标题文本&#10;                   loc=&quot;center&quot;,        # 相对于Axes的水平位置（优先于设置Text的x和ha参数）rcParams[&quot;axes.titlelocation&quot;]： 可选'center'(默认), 'left', 'right'&#10;                   y=None,              # 标题的垂直Axes位置rcParams[&quot;axes.titley&quot;]&#10;                   pad=6,               # 相对于Axes顶部的垂直偏移点数 rcParams[&quot;axes.titlepad&quot;]： 默认6&#10;&#10;                   # Text参数&#10;                   fontsize=15,&#10;                   fontweight=&quot;bold&quot;&#10;                   )&#10;ax[0, 0].set_xlabel(xlabel=&quot;X&quot;,         # x轴文本&#10;                    loc=&quot;center&quot;,       # 相对于Axes的水平位置（优先于设置Text的x和ha参数）rcParams[&quot;xaxis.labellocation&quot;]： 可选'center'(默认), 'left', 'right'&#10;                    labelpad=4,         # 相对于x轴（包括刻度和刻度标签）的垂直偏移点数rcParams[&quot;axes.labelpad&quot;]： 默认4&#10;&#10;                    # Text参数&#10;                    fontsize=15,&#10;                    fontweight=&quot;bold&quot;&#10;                    )&#10;ax[0, 0].set_ylabel(ylabel=&quot;Y&quot;,         # y轴文本&#10;                    loc=&quot;center&quot;,       # 相对于Axes的垂直位置（优先于设置Text的y和ha参数）rcParams[&quot;yaxis.labellocation&quot;]： 可选'center'(默认), 'bottom', 'top'&#10;                    labelpad=4,         # 相对于y轴（包括刻度和刻度标签）的水平偏移点数rcParams[&quot;axes.labelpad&quot;]： 默认4&#10;&#10;                    # Text参数&#10;                    fontsize=15,&#10;                    fontweight=&quot;bold&quot;&#10;                    )&#10;&#10;plt.show()&#10;```&#10;&#10;![img.png](../../../images/文本、注释、标题/img_7.png){ width=&quot;50%&quot; align=&quot;center&quot;}&#10;&#10;## 自动文本调整（adjustText）&#10;&#10;[Welcome to the documentation for adjustText! — adjustText  documentation](https://adjusttext.readthedocs.io/en/latest/)&#10;&#10;&lt;div style=&quot;max-width: 100%; overflow-x: auto;&quot;&gt;&#10;  &lt;table id=&quot;editableTable&quot; border=&quot;1&quot; style=&quot;width: 100%; min-width: 500px;&quot;&gt;&#10;    &lt;thead&gt;&#10;      &lt;tr&gt;&#10;        &lt;th&gt;列1&lt;/th&gt;&#10;        &lt;th&gt;列2&lt;/th&gt;&#10;        &lt;th&gt;列3&lt;/th&gt;&#10;      &lt;/tr&gt;&#10;    &lt;/thead&gt;&#10;    &lt;tbody&gt;&#10;      &lt;tr&gt;&#10;        &lt;td contenteditable=&quot;true&quot;&gt;单元格1&lt;/td&gt;&#10;        &lt;td contenteditable=&quot;true&quot;&gt;单元格2&lt;/td&gt;&#10;        &lt;td contenteditable=&quot;true&quot;&gt;单元格3&lt;/td&gt;&#10;      &lt;/tr&gt;&#10;      &lt;tr&gt;&#10;        &lt;td contenteditable=&quot;true&quot;&gt;单元格4&lt;/td&gt;&#10;        &lt;td contenteditable=&quot;true&quot;&gt;单元格5&lt;/td&gt;&#10;        &lt;td contenteditable=&quot;true&quot;&gt;单元格6&lt;/td&gt;&#10;      &lt;/tr&gt;&#10;    &lt;/tbody&gt;&#10;  &lt;/table&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;!-- 右键菜单 --&gt;&#10;&lt;div id=&quot;contextMenu&quot; style=&quot;display: none; position: absolute; background: white; border: 1px solid #ccc; box-shadow: 2px 2px 5px rgba(0,0,0,0.2); z-index: 1000;&quot;&gt;&#10;  &lt;div class=&quot;menu-item&quot; onclick=&quot;addRow()&quot;&gt;添加行&lt;/div&gt;&#10;  &lt;div class=&quot;menu-item&quot; onclick=&quot;addColumn()&quot;&gt;添加列&lt;/div&gt;&#10;  &lt;div class=&quot;menu-item&quot; onclick=&quot;mergeSelectedCells()&quot;&gt;合并单元格&lt;/div&gt;&#10;  &lt;div class=&quot;menu-item&quot; onclick=&quot;splitCell()&quot;&gt;拆分单元格&lt;/div&gt;&#10;  &lt;div class=&quot;menu-separator&quot;&gt;&lt;/div&gt;&#10;  &lt;div class=&quot;menu-submenu&quot;&gt;&#10;    对齐方式&#10;    &lt;div class=&quot;submenu&quot;&gt;&#10;      &lt;div class=&quot;menu-item&quot; onclick=&quot;setAlignment('left')&quot;&gt;左对齐&lt;/div&gt;&#10;      &lt;div class=&quot;menu-item&quot; onclick=&quot;setAlignment('center')&quot;&gt;居中&lt;/div&gt;&#10;      &lt;div class=&quot;menu-item&quot; onclick=&quot;setAlignment('right')&quot;&gt;右对齐&lt;/div&gt;&#10;      &lt;div class=&quot;menu-separator&quot;&gt;&lt;/div&gt;&#10;      &lt;div class=&quot;menu-item&quot; onclick=&quot;setVerticalAlignment('top')&quot;&gt;顶部对齐&lt;/div&gt;&#10;      &lt;div class=&quot;menu-item&quot; onclick=&quot;setVerticalAlignment('middle')&quot;&gt;垂直居中&lt;/div&gt;&#10;      &lt;div class=&quot;menu-item&quot; onclick=&quot;setVerticalAlignment('bottom')&quot;&gt;底部对齐&lt;/div&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;style&gt;&#10;  #editableTable td, #editableTable th {&#10;    min-width: 100px;&#10;    padding: 8px;&#10;    resize: both;&#10;    overflow: auto;&#10;    position: relative;&#10;    user-select: none;&#10;  }&#10;  #editableTable {&#10;    border-collapse: collapse;&#10;  }&#10;  .selected {&#10;    background-color: #b3d9ff !important;&#10;  }&#10;  &#10;  /* 右键菜单样式 */&#10;  #contextMenu {&#10;    min-width: 150px;&#10;  }&#10;  .menu-item {&#10;    padding: 8px 15px;&#10;    cursor: pointer;&#10;  }&#10;  .menu-item:hover {&#10;    background-color: #f0f0f0;&#10;  }&#10;  .menu-separator {&#10;    height: 1px;&#10;    background-color: #ddd;&#10;    margin: 5px 0;&#10;  }&#10;  .menu-submenu {&#10;    position: relative;&#10;  }&#10;  .menu-submenu:hover .submenu {&#10;    display: block;&#10;  }&#10;  .submenu {&#10;    display: none;&#10;    position: absolute;&#10;    left: 100%;&#10;    top: 0;&#10;    background: white;&#10;    border: 1px solid #ccc;&#10;    box-shadow: 2px 2px 5px rgba(0,0,0,0.2);&#10;    min-width: 120px;&#10;  }&#10;&lt;/style&gt;&#10;&#10;&lt;script&gt;&#10;  // 全局变量&#10;  let selectedCells = [];&#10;  let contextMenuCell = null;&#10;  &#10;  // 初始化表格&#10;  document.addEventListener('DOMContentLoaded', function() {&#10;    const table = document.getElementById('editableTable');&#10;    &#10;    // 添加右键菜单事件&#10;    table.addEventListener('contextmenu', function(e) {&#10;      e.preventDefault();&#10;      &#10;      const cell = e.target.closest('td, th');&#10;      if (!cell) return;&#10;      &#10;      contextMenuCell = cell;&#10;      showContextMenu(e.clientX, e.clientY);&#10;    });&#10;    &#10;    // 点击其他地方隐藏菜单&#10;    document.addEventListener('click', function() {&#10;      hideContextMenu();&#10;    });&#10;    &#10;    // 初始化单元格选择功能&#10;    const cells = table.querySelectorAll('td, th');&#10;    cells.forEach(cell =&gt; {&#10;      cell.addEventListener('mousedown', handleMouseDown);&#10;      cell.addEventListener('mouseover', handleMouseOver);&#10;      cell.addEventListener('mouseup', handleMouseUp);&#10;      &#10;      // 保存原始跨度信息&#10;      cell._originalRowSpan = cell.rowSpan;&#10;      cell._originalColSpan = cell.colSpan;&#10;    });&#10;  });&#10;  &#10;  // 显示右键菜单&#10;  function showContextMenu(x, y) {&#10;    const menu = document.getElementById('contextMenu');&#10;    menu.style.display = 'block';&#10;    menu.style.left = x + 'px';&#10;    menu.style.top = y + 'px';&#10;  }&#10;  &#10;  // 隐藏右键菜单&#10;  function hideContextMenu() {&#10;    document.getElementById('contextMenu').style.display = 'none';&#10;  }&#10;  &#10;  // 单元格选择功能&#10;  function handleMouseDown(e) {&#10;    if (e.button !== 0) return; // 只处理左键&#10;    &#10;    isSelecting = true;&#10;    startCell = e.target;&#10;    clearSelection();&#10;    toggleCellSelection(startCell);&#10;    e.preventDefault();&#10;  }&#10;  &#10;  function handleMouseOver(e) {&#10;    if (!isSelecting) return;&#10;    if (e.target.tagName !== 'TD' &amp;&amp; e.target.tagName !== 'TH') return;&#10;    &#10;    clearSelection();&#10;    selectRange(startCell, e.target);&#10;  }&#10;  &#10;  function handleMouseUp() {&#10;    isSelecting = false;&#10;  }&#10;  &#10;  // 添加行&#10;  function addRow() {&#10;    const table = document.getElementById('editableTable');&#10;    const newRow = table.insertRow(contextMenuCell.parentElement.rowIndex + 1);&#10;    const colCount = table.rows[0].cells.length;&#10;    &#10;    for(let i=0; i&lt;colCount; i++) {&#10;      const cell = newRow.insertCell(i);&#10;      cell.contentEditable = true;&#10;      cell.innerHTML = &quot;新单元格&quot;;&#10;      addCellListeners(cell);&#10;    }&#10;    hideContextMenu();&#10;  }&#10;  &#10;  // 添加列&#10;  function addColumn() {&#10;    const table = document.getElementById('editableTable');&#10;    const colIndex = contextMenuCell.cellIndex + 1;&#10;    &#10;    for(let i=0; i&lt;table.rows.length; i++) {&#10;      const cell = table.rows[i].insertCell(colIndex);&#10;      cell.contentEditable = true;&#10;      cell.innerHTML = &quot;新列&quot;;&#10;      addCellListeners(cell);&#10;    }&#10;    hideContextMenu();&#10;  }&#10;  &#10;  // 合并单元格&#10;  function mergeSelectedCells() {&#10;    if (selectedCells.length &lt; 2) {&#10;      alert('请选择至少2个相邻单元格进行合并');&#10;      hideContextMenu();&#10;      return;&#10;    }&#10;    &#10;    const firstCell = selectedCells[0];&#10;    &#10;    // 计算合并范围&#10;    const firstRow = firstCell.parentElement.rowIndex;&#10;    const firstCol = firstCell.cellIndex;&#10;    let lastRow = firstRow;&#10;    let lastCol = firstCol;&#10;    &#10;    selectedCells.forEach(cell =&gt; {&#10;      const row = cell.parentElement.rowIndex;&#10;      const col = cell.cellIndex;&#10;      lastRow = Math.max(lastRow, row);&#10;      lastCol = Math.max(lastCol, col);&#10;    });&#10;    &#10;    // 设置合并单元格的rowSpan和colSpan&#10;    firstCell.rowSpan = lastRow - firstRow + 1;&#10;    firstCell.colSpan = lastCol - firstCol + 1;&#10;    &#10;    // 合并内容&#10;    let mergedContent = '';&#10;    selectedCells.forEach(cell =&gt; {&#10;      if (cell !== firstCell) {&#10;        mergedContent += cell.textContent + ' ';&#10;        cell.remove();&#10;      }&#10;    });&#10;    firstCell.textContent = mergedContent.trim() || firstCell.textContent;&#10;    &#10;    clearSelection();&#10;    hideContextMenu();&#10;  }&#10;  &#10;  // 拆分单元格&#10;  function splitCell() {&#10;    const cell = contextMenuCell;&#10;    &#10;    if(cell.rowSpan &gt; 1 || cell.colSpan &gt; 1) {&#10;      const table = document.getElementById('editableTable');&#10;      const row = cell.parentElement;&#10;      const rowIndex = row.rowIndex;&#10;      const colIndex = cell.cellIndex;&#10;      &#10;      // 恢复原始跨度&#10;      cell.rowSpan = 1;&#10;      cell.colSpan = 1;&#10;      &#10;      // 重新创建被拆分的单元格&#10;      for(let i=1; i&lt;cell._originalRowSpan; i++) {&#10;        const newRow = table.rows[rowIndex + i];&#10;        for(let j=0; j&lt;cell._originalColSpan; j++) {&#10;          const newCell = newRow.insertCell(colIndex + j);&#10;          newCell.contentEditable = true;&#10;          newCell.innerHTML = &quot;拆分单元格&quot;;&#10;          addCellListeners(newCell);&#10;        }&#10;      }&#10;    }&#10;    hideContextMenu();&#10;  }&#10;  &#10;  // 设置水平对齐&#10;  function setAlignment(align) {&#10;    if (selectedCells.length &gt; 0)&#10;&#10;&#10;" />
                  </map>
                </option>
                <option name="messageId" value="01970f9079aa788981319accbae9fe66" />
                <option name="question" value="滚动条仅在表格超过最大宽度时显示" />
                <option name="rating" value="UNRATED" />
                <option name="referenceBeans">
                  <list />
                </option>
                <option name="status" value="SUCCESS" />
                <option name="variables">
                  <list />
                </option>
              </Turn>
            </list>
          </option>
          <option name="updateTime" value="1748312888449" />
        </Conversation>
        <Conversation>
          <option name="createTime" value="1748311365121" />
          <option name="id" value="01970f7a56017acdb376c72e1819b43d" />
          <option name="title" value="新对话 2025年5月27日 10:02:45" />
          <option name="updateTime" value="1748311365121" />
        </Conversation>
      </list>
    </option>
  </component>
</project>